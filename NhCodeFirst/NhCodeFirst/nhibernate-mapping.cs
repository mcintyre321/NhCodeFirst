//These files were generated by running Linq To Xsd against the NHibernate XSD documents. 
//This allows us to programmatically manipulate the NHibernate configuration.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace urn.nhibernate.mapping.Item2.Item2 {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (meta*, metavalue*, column+)
    /// </para>
    /// </summary>
    public partial class any : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<meta> metaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<metavalue> metavalueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<column> columnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool insertDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool updateDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool optimisticlockDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool lazyDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator any(XElement xe) { return XTypedServices.ToXTypedElement<any>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static any() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("meta", "urn:nhibernate-mapping-2.2")), new NamedContentModelEntity(XName.Get("meta-value", "urn:nhibernate-mapping-2.2")), new NamedContentModelEntity(XName.Get("column", "urn:nhibernate-mapping-2.2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (meta*, metavalue*, column+)
        /// </para>
        /// </summary>
        public any() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, metavalue*, column+)
        /// </para>
        /// </summary>
        public IList<meta> meta {
            get {
                if ((this.metaField == null)) {
                    this.metaField = new XTypedList<meta>(this, LinqToXsdTypeManager.Instance, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                }
                return this.metaField;
            }
            set {
                if ((value == null)) {
                    this.metaField = null;
                }
                else {
                    if ((this.metaField == null)) {
                        this.metaField = XTypedList<meta>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<meta>(this.metaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, metavalue*, column+)
        /// </para>
        /// </summary>
        public IList<metavalue> metavalue {
            get {
                if ((this.metavalueField == null)) {
                    this.metavalueField = new XTypedList<metavalue>(this, LinqToXsdTypeManager.Instance, XName.Get("meta-value", "urn:nhibernate-mapping-2.2"));
                }
                return this.metavalueField;
            }
            set {
                if ((value == null)) {
                    this.metavalueField = null;
                }
                else {
                    if ((this.metavalueField == null)) {
                        this.metavalueField = XTypedList<metavalue>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta-value", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<metavalue>(this.metavalueField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, metavalue*, column+)
        /// </para>
        /// </summary>
        public IList<column> column {
            get {
                if ((this.columnField == null)) {
                    this.columnField = new XTypedList<column>(this, LinqToXsdTypeManager.Instance, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                }
                return this.columnField;
            }
            set {
                if ((value == null)) {
                    this.columnField = null;
                }
                else {
                    if ((this.columnField == null)) {
                        this.columnField = XTypedList<column>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<column>(this.columnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string column1 {
            get {
                XAttribute x = this.Attribute(XName.Get("column", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("column", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string idtype {
            get {
                XAttribute x = this.Attribute(XName.Get("id-type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id-type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string metatype {
            get {
                XAttribute x = this.Attribute(XName.Get("meta-type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("meta-type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string access {
            get {
                XAttribute x = this.Attribute(XName.Get("access", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("access", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool insert {
            get {
                XAttribute x = this.Attribute(XName.Get("insert", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, insertDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("insert", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool update {
            get {
                XAttribute x = this.Attribute(XName.Get("update", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, updateDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("update", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string cascade {
            get {
                XAttribute x = this.Attribute(XName.Get("cascade", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("cascade", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string index {
            get {
                XAttribute x = this.Attribute(XName.Get("index", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("index", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool optimisticlock {
            get {
                XAttribute x = this.Attribute(XName.Get("optimistic-lock", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, optimisticlockDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("optimistic-lock", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool lazy {
            get {
                XAttribute x = this.Attribute(XName.Get("lazy", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, lazyDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("lazy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("any", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static any Load(string xmlFile) {
            return XTypedServices.Load<any>(xmlFile);
        }
        
        public static any Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<any>(xmlFile);
        }
        
        public static any Parse(string xml) {
            return XTypedServices.Parse<any>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<any>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(meta));
            localElementDictionary.Add(XName.Get("meta-value", "urn:nhibernate-mapping-2.2"), typeof(metavalue));
            localElementDictionary.Add(XName.Get("column", "urn:nhibernate-mapping-2.2"), typeof(column));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
    /// </para>
    /// </summary>
    public partial class array : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<meta> metaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<synchronize> synchronizeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool inverseDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool mutableDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool optimisticlockDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool embedxmlDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator array(XElement xe) { return XTypedServices.ToXTypedElement<array>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static array() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public array() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public IList<meta> meta {
            get {
                if ((this.metaField == null)) {
                    this.metaField = new XTypedList<meta>(this, LinqToXsdTypeManager.Instance, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                }
                return this.metaField;
            }
            set {
                if ((value == null)) {
                    this.metaField = null;
                }
                else {
                    if ((this.metaField == null)) {
                        this.metaField = XTypedList<meta>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<meta>(this.metaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public subselect subselect {
            get {
                XElement x = this.GetElement(XName.Get("subselect", "urn:nhibernate-mapping-2.2"));
                return ((subselect)(x));
            }
            set {
                this.SetElement(XName.Get("subselect", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public cache cache {
            get {
                XElement x = this.GetElement(XName.Get("cache", "urn:nhibernate-mapping-2.2"));
                return ((cache)(x));
            }
            set {
                this.SetElement(XName.Get("cache", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public IList<synchronize> synchronize {
            get {
                if ((this.synchronizeField == null)) {
                    this.synchronizeField = new XTypedList<synchronize>(this, LinqToXsdTypeManager.Instance, XName.Get("synchronize", "urn:nhibernate-mapping-2.2"));
                }
                return this.synchronizeField;
            }
            set {
                if ((value == null)) {
                    this.synchronizeField = null;
                }
                else {
                    if ((this.synchronizeField == null)) {
                        this.synchronizeField = XTypedList<synchronize>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("synchronize", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<synchronize>(this.synchronizeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public comment comment {
            get {
                XElement x = this.GetElement(XName.Get("comment", "urn:nhibernate-mapping-2.2"));
                return ((comment)(x));
            }
            set {
                this.SetElement(XName.Get("comment", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public key key {
            get {
                XElement x = this.GetElement(XName.Get("key", "urn:nhibernate-mapping-2.2"));
                return ((key)(x));
            }
            set {
                this.SetElement(XName.Get("key", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public index index {
            get {
                XElement x = this.GetElement(XName.Get("index", "urn:nhibernate-mapping-2.2"));
                return ((index)(x));
            }
            set {
                this.SetElement(XName.Get("index", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public listindex listindex {
            get {
                XElement x = this.GetElement(XName.Get("list-index", "urn:nhibernate-mapping-2.2"));
                return ((listindex)(x));
            }
            set {
                this.SetElement(XName.Get("list-index", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public element element {
            get {
                XElement x = this.GetElement(XName.Get("element", "urn:nhibernate-mapping-2.2"));
                return ((element)(x));
            }
            set {
                this.SetElement(XName.Get("element", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public onetomany onetomany {
            get {
                XElement x = this.GetElement(XName.Get("one-to-many", "urn:nhibernate-mapping-2.2"));
                return ((onetomany)(x));
            }
            set {
                this.SetElement(XName.Get("one-to-many", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public manytomany manytomany {
            get {
                XElement x = this.GetElement(XName.Get("many-to-many", "urn:nhibernate-mapping-2.2"));
                return ((manytomany)(x));
            }
            set {
                this.SetElement(XName.Get("many-to-many", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public compositeelement compositeelement {
            get {
                XElement x = this.GetElement(XName.Get("composite-element", "urn:nhibernate-mapping-2.2"));
                return ((compositeelement)(x));
            }
            set {
                this.SetElement(XName.Get("composite-element", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public manytoany manytoany {
            get {
                XElement x = this.GetElement(XName.Get("many-to-any", "urn:nhibernate-mapping-2.2"));
                return ((manytoany)(x));
            }
            set {
                this.SetElement(XName.Get("many-to-any", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public loader loader {
            get {
                XElement x = this.GetElement(XName.Get("loader", "urn:nhibernate-mapping-2.2"));
                return ((loader)(x));
            }
            set {
                this.SetElement(XName.Get("loader", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public sqlinsert sqlinsert {
            get {
                XElement x = this.GetElement(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"));
                return ((sqlinsert)(x));
            }
            set {
                this.SetElement(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public sqlupdate sqlupdate {
            get {
                XElement x = this.GetElement(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"));
                return ((sqlupdate)(x));
            }
            set {
                this.SetElement(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public sqldelete sqldelete {
            get {
                XElement x = this.GetElement(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"));
                return ((sqldelete)(x));
            }
            set {
                this.SetElement(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public sqldeleteall sqldeleteall {
            get {
                XElement x = this.GetElement(XName.Get("sql-delete-all", "urn:nhibernate-mapping-2.2"));
                return ((sqldeleteall)(x));
            }
            set {
                this.SetElement(XName.Get("sql-delete-all", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string access {
            get {
                XAttribute x = this.Attribute(XName.Get("access", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("access", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string table {
            get {
                XAttribute x = this.Attribute(XName.Get("table", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("table", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string schema {
            get {
                XAttribute x = this.Attribute(XName.Get("schema", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("schema", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string catalog {
            get {
                XAttribute x = this.Attribute(XName.Get("catalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("catalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string subselect1 {
            get {
                XAttribute x = this.Attribute(XName.Get("subselect", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("subselect", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool inverse {
            get {
                XAttribute x = this.Attribute(XName.Get("inverse", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, inverseDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("inverse", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool mutable {
            get {
                XAttribute x = this.Attribute(XName.Get("mutable", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, mutableDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("mutable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string elementclass {
            get {
                XAttribute x = this.Attribute(XName.Get("element-class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("element-class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string cascade {
            get {
                XAttribute x = this.Attribute(XName.Get("cascade", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("cascade", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @where {
            get {
                XAttribute x = this.Attribute(XName.Get("where", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("where", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> batchsize {
            get {
                XAttribute x = this.Attribute(XName.Get("batch-size", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("batch-size", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string outerjoin {
            get {
                XAttribute x = this.Attribute(XName.Get("outer-join", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("outer-join", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string fetch {
            get {
                XAttribute x = this.Attribute(XName.Get("fetch", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("fetch", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string persister {
            get {
                XAttribute x = this.Attribute(XName.Get("persister", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("persister", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string collectiontype {
            get {
                XAttribute x = this.Attribute(XName.Get("collection-type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("collection-type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string check {
            get {
                XAttribute x = this.Attribute(XName.Get("check", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("check", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool optimisticlock {
            get {
                XAttribute x = this.Attribute(XName.Get("optimistic-lock", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, optimisticlockDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("optimistic-lock", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool embedxml {
            get {
                XAttribute x = this.Attribute(XName.Get("embed-xml", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, embedxmlDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("embed-xml", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("array", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static array Load(string xmlFile) {
            return XTypedServices.Load<array>(xmlFile);
        }
        
        public static array Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<array>(xmlFile);
        }
        
        public static array Parse(string xml) {
            return XTypedServices.Parse<array>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<array>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(meta));
            localElementDictionary.Add(XName.Get("subselect", "urn:nhibernate-mapping-2.2"), typeof(subselect));
            localElementDictionary.Add(XName.Get("cache", "urn:nhibernate-mapping-2.2"), typeof(cache));
            localElementDictionary.Add(XName.Get("synchronize", "urn:nhibernate-mapping-2.2"), typeof(synchronize));
            localElementDictionary.Add(XName.Get("comment", "urn:nhibernate-mapping-2.2"), typeof(comment));
            localElementDictionary.Add(XName.Get("key", "urn:nhibernate-mapping-2.2"), typeof(key));
            localElementDictionary.Add(XName.Get("index", "urn:nhibernate-mapping-2.2"), typeof(index));
            localElementDictionary.Add(XName.Get("list-index", "urn:nhibernate-mapping-2.2"), typeof(listindex));
            localElementDictionary.Add(XName.Get("element", "urn:nhibernate-mapping-2.2"), typeof(element));
            localElementDictionary.Add(XName.Get("one-to-many", "urn:nhibernate-mapping-2.2"), typeof(onetomany));
            localElementDictionary.Add(XName.Get("many-to-many", "urn:nhibernate-mapping-2.2"), typeof(manytomany));
            localElementDictionary.Add(XName.Get("composite-element", "urn:nhibernate-mapping-2.2"), typeof(compositeelement));
            localElementDictionary.Add(XName.Get("many-to-any", "urn:nhibernate-mapping-2.2"), typeof(manytoany));
            localElementDictionary.Add(XName.Get("loader", "urn:nhibernate-mapping-2.2"), typeof(loader));
            localElementDictionary.Add(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"), typeof(sqlinsert));
            localElementDictionary.Add(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"), typeof(sqlupdate));
            localElementDictionary.Add(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"), typeof(sqldelete));
            localElementDictionary.Add(XName.Get("sql-delete-all", "urn:nhibernate-mapping-2.2"), typeof(sqldeleteall));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
    /// </para>
    /// </summary>
    public partial class bag : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<meta> metaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<synchronize> synchronizeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<filter> filterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool inverseDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool mutableDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool optimisticlockDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool embedxmlDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator bag(XElement xe) { return XTypedServices.ToXTypedElement<bag>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static bag() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public bag() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public IList<meta> meta {
            get {
                if ((this.metaField == null)) {
                    this.metaField = new XTypedList<meta>(this, LinqToXsdTypeManager.Instance, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                }
                return this.metaField;
            }
            set {
                if ((value == null)) {
                    this.metaField = null;
                }
                else {
                    if ((this.metaField == null)) {
                        this.metaField = XTypedList<meta>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<meta>(this.metaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public subselect subselect {
            get {
                XElement x = this.GetElement(XName.Get("subselect", "urn:nhibernate-mapping-2.2"));
                return ((subselect)(x));
            }
            set {
                this.SetElement(XName.Get("subselect", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public cache cache {
            get {
                XElement x = this.GetElement(XName.Get("cache", "urn:nhibernate-mapping-2.2"));
                return ((cache)(x));
            }
            set {
                this.SetElement(XName.Get("cache", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public IList<synchronize> synchronize {
            get {
                if ((this.synchronizeField == null)) {
                    this.synchronizeField = new XTypedList<synchronize>(this, LinqToXsdTypeManager.Instance, XName.Get("synchronize", "urn:nhibernate-mapping-2.2"));
                }
                return this.synchronizeField;
            }
            set {
                if ((value == null)) {
                    this.synchronizeField = null;
                }
                else {
                    if ((this.synchronizeField == null)) {
                        this.synchronizeField = XTypedList<synchronize>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("synchronize", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<synchronize>(this.synchronizeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public comment comment {
            get {
                XElement x = this.GetElement(XName.Get("comment", "urn:nhibernate-mapping-2.2"));
                return ((comment)(x));
            }
            set {
                this.SetElement(XName.Get("comment", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public key key {
            get {
                XElement x = this.GetElement(XName.Get("key", "urn:nhibernate-mapping-2.2"));
                return ((key)(x));
            }
            set {
                this.SetElement(XName.Get("key", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public element element {
            get {
                XElement x = this.GetElement(XName.Get("element", "urn:nhibernate-mapping-2.2"));
                return ((element)(x));
            }
            set {
                this.SetElement(XName.Get("element", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public onetomany onetomany {
            get {
                XElement x = this.GetElement(XName.Get("one-to-many", "urn:nhibernate-mapping-2.2"));
                return ((onetomany)(x));
            }
            set {
                this.SetElement(XName.Get("one-to-many", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public manytomany manytomany {
            get {
                XElement x = this.GetElement(XName.Get("many-to-many", "urn:nhibernate-mapping-2.2"));
                return ((manytomany)(x));
            }
            set {
                this.SetElement(XName.Get("many-to-many", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public compositeelement compositeelement {
            get {
                XElement x = this.GetElement(XName.Get("composite-element", "urn:nhibernate-mapping-2.2"));
                return ((compositeelement)(x));
            }
            set {
                this.SetElement(XName.Get("composite-element", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public manytoany manytoany {
            get {
                XElement x = this.GetElement(XName.Get("many-to-any", "urn:nhibernate-mapping-2.2"));
                return ((manytoany)(x));
            }
            set {
                this.SetElement(XName.Get("many-to-any", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public loader loader {
            get {
                XElement x = this.GetElement(XName.Get("loader", "urn:nhibernate-mapping-2.2"));
                return ((loader)(x));
            }
            set {
                this.SetElement(XName.Get("loader", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public sqlinsert sqlinsert {
            get {
                XElement x = this.GetElement(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"));
                return ((sqlinsert)(x));
            }
            set {
                this.SetElement(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public sqlupdate sqlupdate {
            get {
                XElement x = this.GetElement(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"));
                return ((sqlupdate)(x));
            }
            set {
                this.SetElement(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public sqldelete sqldelete {
            get {
                XElement x = this.GetElement(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"));
                return ((sqldelete)(x));
            }
            set {
                this.SetElement(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public sqldeleteall sqldeleteall {
            get {
                XElement x = this.GetElement(XName.Get("sql-delete-all", "urn:nhibernate-mapping-2.2"));
                return ((sqldeleteall)(x));
            }
            set {
                this.SetElement(XName.Get("sql-delete-all", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public IList<filter> filter {
            get {
                if ((this.filterField == null)) {
                    this.filterField = new XTypedList<filter>(this, LinqToXsdTypeManager.Instance, XName.Get("filter", "urn:nhibernate-mapping-2.2"));
                }
                return this.filterField;
            }
            set {
                if ((value == null)) {
                    this.filterField = null;
                }
                else {
                    if ((this.filterField == null)) {
                        this.filterField = XTypedList<filter>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("filter", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<filter>(this.filterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string access {
            get {
                XAttribute x = this.Attribute(XName.Get("access", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("access", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string table {
            get {
                XAttribute x = this.Attribute(XName.Get("table", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("table", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string schema {
            get {
                XAttribute x = this.Attribute(XName.Get("schema", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("schema", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string catalog {
            get {
                XAttribute x = this.Attribute(XName.Get("catalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("catalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string subselect1 {
            get {
                XAttribute x = this.Attribute(XName.Get("subselect", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("subselect", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string lazy {
            get {
                XAttribute x = this.Attribute(XName.Get("lazy", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("lazy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool inverse {
            get {
                XAttribute x = this.Attribute(XName.Get("inverse", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, inverseDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("inverse", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool mutable {
            get {
                XAttribute x = this.Attribute(XName.Get("mutable", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, mutableDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("mutable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string cascade {
            get {
                XAttribute x = this.Attribute(XName.Get("cascade", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("cascade", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string orderby {
            get {
                XAttribute x = this.Attribute(XName.Get("order-by", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("order-by", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @where {
            get {
                XAttribute x = this.Attribute(XName.Get("where", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("where", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> batchsize {
            get {
                XAttribute x = this.Attribute(XName.Get("batch-size", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("batch-size", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string outerjoin {
            get {
                XAttribute x = this.Attribute(XName.Get("outer-join", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("outer-join", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string fetch {
            get {
                XAttribute x = this.Attribute(XName.Get("fetch", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("fetch", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string persister {
            get {
                XAttribute x = this.Attribute(XName.Get("persister", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("persister", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string collectiontype {
            get {
                XAttribute x = this.Attribute(XName.Get("collection-type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("collection-type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string check {
            get {
                XAttribute x = this.Attribute(XName.Get("check", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("check", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool optimisticlock {
            get {
                XAttribute x = this.Attribute(XName.Get("optimistic-lock", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, optimisticlockDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("optimistic-lock", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool embedxml {
            get {
                XAttribute x = this.Attribute(XName.Get("embed-xml", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, embedxmlDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("embed-xml", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The concrete collection should use a generic version or an object-based version.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> generic {
            get {
                XAttribute x = this.Attribute(XName.Get("generic", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("generic", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("bag", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static bag Load(string xmlFile) {
            return XTypedServices.Load<bag>(xmlFile);
        }
        
        public static bag Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<bag>(xmlFile);
        }
        
        public static bag Parse(string xml) {
            return XTypedServices.Parse<bag>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<bag>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(meta));
            localElementDictionary.Add(XName.Get("subselect", "urn:nhibernate-mapping-2.2"), typeof(subselect));
            localElementDictionary.Add(XName.Get("cache", "urn:nhibernate-mapping-2.2"), typeof(cache));
            localElementDictionary.Add(XName.Get("synchronize", "urn:nhibernate-mapping-2.2"), typeof(synchronize));
            localElementDictionary.Add(XName.Get("comment", "urn:nhibernate-mapping-2.2"), typeof(comment));
            localElementDictionary.Add(XName.Get("key", "urn:nhibernate-mapping-2.2"), typeof(key));
            localElementDictionary.Add(XName.Get("element", "urn:nhibernate-mapping-2.2"), typeof(element));
            localElementDictionary.Add(XName.Get("one-to-many", "urn:nhibernate-mapping-2.2"), typeof(onetomany));
            localElementDictionary.Add(XName.Get("many-to-many", "urn:nhibernate-mapping-2.2"), typeof(manytomany));
            localElementDictionary.Add(XName.Get("composite-element", "urn:nhibernate-mapping-2.2"), typeof(compositeelement));
            localElementDictionary.Add(XName.Get("many-to-any", "urn:nhibernate-mapping-2.2"), typeof(manytoany));
            localElementDictionary.Add(XName.Get("loader", "urn:nhibernate-mapping-2.2"), typeof(loader));
            localElementDictionary.Add(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"), typeof(sqlinsert));
            localElementDictionary.Add(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"), typeof(sqlupdate));
            localElementDictionary.Add(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"), typeof(sqldelete));
            localElementDictionary.Add(XName.Get("sql-delete-all", "urn:nhibernate-mapping-2.2"), typeof(sqldeleteall));
            localElementDictionary.Add(XName.Get("filter", "urn:nhibernate-mapping-2.2"), typeof(filter));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class cache : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string includeDefaultValue = "all";
        
         public static explicit operator cache(XElement xe) { return XTypedServices.ToXTypedElement<cache>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public cache() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string usage {
            get {
                XAttribute x = this.Attribute(XName.Get("usage", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("usage", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string region {
            get {
                XAttribute x = this.Attribute(XName.Get("region", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("region", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string include {
            get {
                XAttribute x = this.Attribute(XName.Get("include", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, includeDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("include", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("cache", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static cache Load(string xmlFile) {
            return XTypedServices.Load<cache>(xmlFile);
        }
        
        public static cache Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<cache>(xmlFile);
        }
        
        public static cache Parse(string xml) {
            return XTypedServices.Parse<cache>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<cache>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
    /// </para>
    /// </summary>
    public partial class @class : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<meta> metaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<synchronize> synchronizeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tuplizer> tuplizerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<property> propertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<manytoone> manytooneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<onetoone> onetooneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<component> componentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dynamiccomponent> dynamiccomponentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<properties> propertiesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<any> anyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<map> mapField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<set> setField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bag> bagField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<idbag> idbagField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<array> arrayField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<primitivearray> primitivearrayField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<join> joinField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subclass> subclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<joinedsubclass> joinedsubclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unionsubclass> unionsubclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<filter> filterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<resultset> resultsetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<query> queryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<sqlquery> sqlqueryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool mutableDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string polymorphismDefaultValue = "implicit";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool dynamicupdateDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool dynamicinsertDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool selectbeforeupdateDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string optimisticlockDefaultValue = "version";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator @class(XElement xe) { return XTypedServices.ToXTypedElement<@class>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static @class() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public @class() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<meta> meta {
            get {
                if ((this.metaField == null)) {
                    this.metaField = new XTypedList<meta>(this, LinqToXsdTypeManager.Instance, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                }
                return this.metaField;
            }
            set {
                if ((value == null)) {
                    this.metaField = null;
                }
                else {
                    if ((this.metaField == null)) {
                        this.metaField = XTypedList<meta>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<meta>(this.metaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public subselect subselect {
            get {
                XElement x = this.GetElement(XName.Get("subselect", "urn:nhibernate-mapping-2.2"));
                return ((subselect)(x));
            }
            set {
                this.SetElement(XName.Get("subselect", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public cache cache {
            get {
                XElement x = this.GetElement(XName.Get("cache", "urn:nhibernate-mapping-2.2"));
                return ((cache)(x));
            }
            set {
                this.SetElement(XName.Get("cache", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<synchronize> synchronize {
            get {
                if ((this.synchronizeField == null)) {
                    this.synchronizeField = new XTypedList<synchronize>(this, LinqToXsdTypeManager.Instance, XName.Get("synchronize", "urn:nhibernate-mapping-2.2"));
                }
                return this.synchronizeField;
            }
            set {
                if ((value == null)) {
                    this.synchronizeField = null;
                }
                else {
                    if ((this.synchronizeField == null)) {
                        this.synchronizeField = XTypedList<synchronize>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("synchronize", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<synchronize>(this.synchronizeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public comment comment {
            get {
                XElement x = this.GetElement(XName.Get("comment", "urn:nhibernate-mapping-2.2"));
                return ((comment)(x));
            }
            set {
                this.SetElement(XName.Get("comment", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<tuplizer> tuplizer {
            get {
                if ((this.tuplizerField == null)) {
                    this.tuplizerField = new XTypedList<tuplizer>(this, LinqToXsdTypeManager.Instance, XName.Get("tuplizer", "urn:nhibernate-mapping-2.2"));
                }
                return this.tuplizerField;
            }
            set {
                if ((value == null)) {
                    this.tuplizerField = null;
                }
                else {
                    if ((this.tuplizerField == null)) {
                        this.tuplizerField = XTypedList<tuplizer>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("tuplizer", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<tuplizer>(this.tuplizerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public id id {
            get {
                XElement x = this.GetElement(XName.Get("id", "urn:nhibernate-mapping-2.2"));
                return ((id)(x));
            }
            set {
                this.SetElement(XName.Get("id", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public compositeid compositeid {
            get {
                XElement x = this.GetElement(XName.Get("composite-id", "urn:nhibernate-mapping-2.2"));
                return ((compositeid)(x));
            }
            set {
                this.SetElement(XName.Get("composite-id", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public discriminator discriminator {
            get {
                XElement x = this.GetElement(XName.Get("discriminator", "urn:nhibernate-mapping-2.2"));
                return ((discriminator)(x));
            }
            set {
                this.SetElement(XName.Get("discriminator", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public naturalid naturalid {
            get {
                XElement x = this.GetElement(XName.Get("natural-id", "urn:nhibernate-mapping-2.2"));
                return ((naturalid)(x));
            }
            set {
                this.SetElement(XName.Get("natural-id", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public version version {
            get {
                XElement x = this.GetElement(XName.Get("version", "urn:nhibernate-mapping-2.2"));
                return ((version)(x));
            }
            set {
                this.SetElement(XName.Get("version", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public timestamp timestamp {
            get {
                XElement x = this.GetElement(XName.Get("timestamp", "urn:nhibernate-mapping-2.2"));
                return ((timestamp)(x));
            }
            set {
                this.SetElement(XName.Get("timestamp", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<property> property {
            get {
                if ((this.propertyField == null)) {
                    this.propertyField = new XTypedList<property>(this, LinqToXsdTypeManager.Instance, XName.Get("property", "urn:nhibernate-mapping-2.2"));
                }
                return this.propertyField;
            }
            set {
                if ((value == null)) {
                    this.propertyField = null;
                }
                else {
                    if ((this.propertyField == null)) {
                        this.propertyField = XTypedList<property>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("property", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<property>(this.propertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<manytoone> manytoone {
            get {
                if ((this.manytooneField == null)) {
                    this.manytooneField = new XTypedList<manytoone>(this, LinqToXsdTypeManager.Instance, XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"));
                }
                return this.manytooneField;
            }
            set {
                if ((value == null)) {
                    this.manytooneField = null;
                }
                else {
                    if ((this.manytooneField == null)) {
                        this.manytooneField = XTypedList<manytoone>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<manytoone>(this.manytooneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<onetoone> onetoone {
            get {
                if ((this.onetooneField == null)) {
                    this.onetooneField = new XTypedList<onetoone>(this, LinqToXsdTypeManager.Instance, XName.Get("one-to-one", "urn:nhibernate-mapping-2.2"));
                }
                return this.onetooneField;
            }
            set {
                if ((value == null)) {
                    this.onetooneField = null;
                }
                else {
                    if ((this.onetooneField == null)) {
                        this.onetooneField = XTypedList<onetoone>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("one-to-one", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<onetoone>(this.onetooneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<component> component {
            get {
                if ((this.componentField == null)) {
                    this.componentField = new XTypedList<component>(this, LinqToXsdTypeManager.Instance, XName.Get("component", "urn:nhibernate-mapping-2.2"));
                }
                return this.componentField;
            }
            set {
                if ((value == null)) {
                    this.componentField = null;
                }
                else {
                    if ((this.componentField == null)) {
                        this.componentField = XTypedList<component>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("component", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<component>(this.componentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<dynamiccomponent> dynamiccomponent {
            get {
                if ((this.dynamiccomponentField == null)) {
                    this.dynamiccomponentField = new XTypedList<dynamiccomponent>(this, LinqToXsdTypeManager.Instance, XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"));
                }
                return this.dynamiccomponentField;
            }
            set {
                if ((value == null)) {
                    this.dynamiccomponentField = null;
                }
                else {
                    if ((this.dynamiccomponentField == null)) {
                        this.dynamiccomponentField = XTypedList<dynamiccomponent>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<dynamiccomponent>(this.dynamiccomponentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<properties> properties {
            get {
                if ((this.propertiesField == null)) {
                    this.propertiesField = new XTypedList<properties>(this, LinqToXsdTypeManager.Instance, XName.Get("properties", "urn:nhibernate-mapping-2.2"));
                }
                return this.propertiesField;
            }
            set {
                if ((value == null)) {
                    this.propertiesField = null;
                }
                else {
                    if ((this.propertiesField == null)) {
                        this.propertiesField = XTypedList<properties>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("properties", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<properties>(this.propertiesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<any> any {
            get {
                if ((this.anyField == null)) {
                    this.anyField = new XTypedList<any>(this, LinqToXsdTypeManager.Instance, XName.Get("any", "urn:nhibernate-mapping-2.2"));
                }
                return this.anyField;
            }
            set {
                if ((value == null)) {
                    this.anyField = null;
                }
                else {
                    if ((this.anyField == null)) {
                        this.anyField = XTypedList<any>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("any", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<any>(this.anyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<map> map {
            get {
                if ((this.mapField == null)) {
                    this.mapField = new XTypedList<map>(this, LinqToXsdTypeManager.Instance, XName.Get("map", "urn:nhibernate-mapping-2.2"));
                }
                return this.mapField;
            }
            set {
                if ((value == null)) {
                    this.mapField = null;
                }
                else {
                    if ((this.mapField == null)) {
                        this.mapField = XTypedList<map>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("map", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<map>(this.mapField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<set> set {
            get {
                if ((this.setField == null)) {
                    this.setField = new XTypedList<set>(this, LinqToXsdTypeManager.Instance, XName.Get("set", "urn:nhibernate-mapping-2.2"));
                }
                return this.setField;
            }
            set {
                if ((value == null)) {
                    this.setField = null;
                }
                else {
                    if ((this.setField == null)) {
                        this.setField = XTypedList<set>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("set", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<set>(this.setField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, XName.Get("list", "urn:nhibernate-mapping-2.2"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("list", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<bag> bag {
            get {
                if ((this.bagField == null)) {
                    this.bagField = new XTypedList<bag>(this, LinqToXsdTypeManager.Instance, XName.Get("bag", "urn:nhibernate-mapping-2.2"));
                }
                return this.bagField;
            }
            set {
                if ((value == null)) {
                    this.bagField = null;
                }
                else {
                    if ((this.bagField == null)) {
                        this.bagField = XTypedList<bag>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("bag", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<bag>(this.bagField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<idbag> idbag {
            get {
                if ((this.idbagField == null)) {
                    this.idbagField = new XTypedList<idbag>(this, LinqToXsdTypeManager.Instance, XName.Get("idbag", "urn:nhibernate-mapping-2.2"));
                }
                return this.idbagField;
            }
            set {
                if ((value == null)) {
                    this.idbagField = null;
                }
                else {
                    if ((this.idbagField == null)) {
                        this.idbagField = XTypedList<idbag>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("idbag", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<idbag>(this.idbagField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<array> array {
            get {
                if ((this.arrayField == null)) {
                    this.arrayField = new XTypedList<array>(this, LinqToXsdTypeManager.Instance, XName.Get("array", "urn:nhibernate-mapping-2.2"));
                }
                return this.arrayField;
            }
            set {
                if ((value == null)) {
                    this.arrayField = null;
                }
                else {
                    if ((this.arrayField == null)) {
                        this.arrayField = XTypedList<array>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("array", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<array>(this.arrayField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<primitivearray> primitivearray {
            get {
                if ((this.primitivearrayField == null)) {
                    this.primitivearrayField = new XTypedList<primitivearray>(this, LinqToXsdTypeManager.Instance, XName.Get("primitive-array", "urn:nhibernate-mapping-2.2"));
                }
                return this.primitivearrayField;
            }
            set {
                if ((value == null)) {
                    this.primitivearrayField = null;
                }
                else {
                    if ((this.primitivearrayField == null)) {
                        this.primitivearrayField = XTypedList<primitivearray>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("primitive-array", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<primitivearray>(this.primitivearrayField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<join> join {
            get {
                if ((this.joinField == null)) {
                    this.joinField = new XTypedList<join>(this, LinqToXsdTypeManager.Instance, XName.Get("join", "urn:nhibernate-mapping-2.2"));
                }
                return this.joinField;
            }
            set {
                if ((value == null)) {
                    this.joinField = null;
                }
                else {
                    if ((this.joinField == null)) {
                        this.joinField = XTypedList<join>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("join", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<join>(this.joinField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<subclass> subclass {
            get {
                if ((this.subclassField == null)) {
                    this.subclassField = new XTypedList<subclass>(this, LinqToXsdTypeManager.Instance, XName.Get("subclass", "urn:nhibernate-mapping-2.2"));
                }
                return this.subclassField;
            }
            set {
                if ((value == null)) {
                    this.subclassField = null;
                }
                else {
                    if ((this.subclassField == null)) {
                        this.subclassField = XTypedList<subclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("subclass", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<subclass>(this.subclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<joinedsubclass> joinedsubclass {
            get {
                if ((this.joinedsubclassField == null)) {
                    this.joinedsubclassField = new XTypedList<joinedsubclass>(this, LinqToXsdTypeManager.Instance, XName.Get("joined-subclass", "urn:nhibernate-mapping-2.2"));
                }
                return this.joinedsubclassField;
            }
            set {
                if ((value == null)) {
                    this.joinedsubclassField = null;
                }
                else {
                    if ((this.joinedsubclassField == null)) {
                        this.joinedsubclassField = XTypedList<joinedsubclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("joined-subclass", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<joinedsubclass>(this.joinedsubclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<unionsubclass> unionsubclass {
            get {
                if ((this.unionsubclassField == null)) {
                    this.unionsubclassField = new XTypedList<unionsubclass>(this, LinqToXsdTypeManager.Instance, XName.Get("union-subclass", "urn:nhibernate-mapping-2.2"));
                }
                return this.unionsubclassField;
            }
            set {
                if ((value == null)) {
                    this.unionsubclassField = null;
                }
                else {
                    if ((this.unionsubclassField == null)) {
                        this.unionsubclassField = XTypedList<unionsubclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("union-subclass", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<unionsubclass>(this.unionsubclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public loader loader {
            get {
                XElement x = this.GetElement(XName.Get("loader", "urn:nhibernate-mapping-2.2"));
                return ((loader)(x));
            }
            set {
                this.SetElement(XName.Get("loader", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public sqlinsert sqlinsert {
            get {
                XElement x = this.GetElement(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"));
                return ((sqlinsert)(x));
            }
            set {
                this.SetElement(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public sqlupdate sqlupdate {
            get {
                XElement x = this.GetElement(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"));
                return ((sqlupdate)(x));
            }
            set {
                this.SetElement(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public sqldelete sqldelete {
            get {
                XElement x = this.GetElement(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"));
                return ((sqldelete)(x));
            }
            set {
                this.SetElement(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<filter> filter {
            get {
                if ((this.filterField == null)) {
                    this.filterField = new XTypedList<filter>(this, LinqToXsdTypeManager.Instance, XName.Get("filter", "urn:nhibernate-mapping-2.2"));
                }
                return this.filterField;
            }
            set {
                if ((value == null)) {
                    this.filterField = null;
                }
                else {
                    if ((this.filterField == null)) {
                        this.filterField = XTypedList<filter>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("filter", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<filter>(this.filterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<resultset> resultset {
            get {
                if ((this.resultsetField == null)) {
                    this.resultsetField = new XTypedList<resultset>(this, LinqToXsdTypeManager.Instance, XName.Get("resultset", "urn:nhibernate-mapping-2.2"));
                }
                return this.resultsetField;
            }
            set {
                if ((value == null)) {
                    this.resultsetField = null;
                }
                else {
                    if ((this.resultsetField == null)) {
                        this.resultsetField = XTypedList<resultset>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("resultset", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<resultset>(this.resultsetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<query> query {
            get {
                if ((this.queryField == null)) {
                    this.queryField = new XTypedList<query>(this, LinqToXsdTypeManager.Instance, XName.Get("query", "urn:nhibernate-mapping-2.2"));
                }
                return this.queryField;
            }
            set {
                if ((value == null)) {
                    this.queryField = null;
                }
                else {
                    if ((this.queryField == null)) {
                        this.queryField = XTypedList<query>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("query", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<query>(this.queryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, tuplizer*, (id | compositeid), discriminator?, naturalid?, (version | timestamp)?, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, ((join*, subclass*)|joinedsubclass* | unionsubclass*), loader?, sqlinsert?, sqlupdate?, sqldelete?, filter*, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<sqlquery> sqlquery {
            get {
                if ((this.sqlqueryField == null)) {
                    this.sqlqueryField = new XTypedList<sqlquery>(this, LinqToXsdTypeManager.Instance, XName.Get("sql-query", "urn:nhibernate-mapping-2.2"));
                }
                return this.sqlqueryField;
            }
            set {
                if ((value == null)) {
                    this.sqlqueryField = null;
                }
                else {
                    if ((this.sqlqueryField == null)) {
                        this.sqlqueryField = XTypedList<sqlquery>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("sql-query", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<sqlquery>(this.sqlqueryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string entityname {
            get {
                XAttribute x = this.Attribute(XName.Get("entity-name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("entity-name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string proxy {
            get {
                XAttribute x = this.Attribute(XName.Get("proxy", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("proxy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> lazy {
            get {
                XAttribute x = this.Attribute(XName.Get("lazy", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("lazy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string schemaaction {
            get {
                XAttribute x = this.Attribute(XName.Get("schema-action", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("schema-action", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string table {
            get {
                XAttribute x = this.Attribute(XName.Get("table", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("table", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string schema {
            get {
                XAttribute x = this.Attribute(XName.Get("schema", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("schema", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string catalog {
            get {
                XAttribute x = this.Attribute(XName.Get("catalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("catalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string subselect1 {
            get {
                XAttribute x = this.Attribute(XName.Get("subselect", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("subselect", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string discriminatorvalue {
            get {
                XAttribute x = this.Attribute(XName.Get("discriminator-value", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("discriminator-value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool mutable {
            get {
                XAttribute x = this.Attribute(XName.Get("mutable", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, mutableDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("mutable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> @abstract {
            get {
                XAttribute x = this.Attribute(XName.Get("abstract", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("abstract", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string polymorphism {
            get {
                XAttribute x = this.Attribute(XName.Get("polymorphism", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, polymorphismDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("polymorphism", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @where {
            get {
                XAttribute x = this.Attribute(XName.Get("where", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("where", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string persister {
            get {
                XAttribute x = this.Attribute(XName.Get("persister", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("persister", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool dynamicupdate {
            get {
                XAttribute x = this.Attribute(XName.Get("dynamic-update", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, dynamicupdateDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("dynamic-update", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool dynamicinsert {
            get {
                XAttribute x = this.Attribute(XName.Get("dynamic-insert", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, dynamicinsertDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("dynamic-insert", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> batchsize {
            get {
                XAttribute x = this.Attribute(XName.Get("batch-size", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("batch-size", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool selectbeforeupdate {
            get {
                XAttribute x = this.Attribute(XName.Get("select-before-update", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, selectbeforeupdateDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("select-before-update", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string optimisticlock {
            get {
                XAttribute x = this.Attribute(XName.Get("optimistic-lock", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, optimisticlockDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("optimistic-lock", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string check {
            get {
                XAttribute x = this.Attribute(XName.Get("check", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("check", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string rowid {
            get {
                XAttribute x = this.Attribute(XName.Get("rowid", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("rowid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("class", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static @class Load(string xmlFile) {
            return XTypedServices.Load<@class>(xmlFile);
        }
        
        public static @class Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<@class>(xmlFile);
        }
        
        public static @class Parse(string xml) {
            return XTypedServices.Parse<@class>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<@class>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(meta));
            localElementDictionary.Add(XName.Get("subselect", "urn:nhibernate-mapping-2.2"), typeof(subselect));
            localElementDictionary.Add(XName.Get("cache", "urn:nhibernate-mapping-2.2"), typeof(cache));
            localElementDictionary.Add(XName.Get("synchronize", "urn:nhibernate-mapping-2.2"), typeof(synchronize));
            localElementDictionary.Add(XName.Get("comment", "urn:nhibernate-mapping-2.2"), typeof(comment));
            localElementDictionary.Add(XName.Get("tuplizer", "urn:nhibernate-mapping-2.2"), typeof(tuplizer));
            localElementDictionary.Add(XName.Get("id", "urn:nhibernate-mapping-2.2"), typeof(id));
            localElementDictionary.Add(XName.Get("composite-id", "urn:nhibernate-mapping-2.2"), typeof(compositeid));
            localElementDictionary.Add(XName.Get("discriminator", "urn:nhibernate-mapping-2.2"), typeof(discriminator));
            localElementDictionary.Add(XName.Get("natural-id", "urn:nhibernate-mapping-2.2"), typeof(naturalid));
            localElementDictionary.Add(XName.Get("version", "urn:nhibernate-mapping-2.2"), typeof(version));
            localElementDictionary.Add(XName.Get("timestamp", "urn:nhibernate-mapping-2.2"), typeof(timestamp));
            localElementDictionary.Add(XName.Get("property", "urn:nhibernate-mapping-2.2"), typeof(property));
            localElementDictionary.Add(XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"), typeof(manytoone));
            localElementDictionary.Add(XName.Get("one-to-one", "urn:nhibernate-mapping-2.2"), typeof(onetoone));
            localElementDictionary.Add(XName.Get("component", "urn:nhibernate-mapping-2.2"), typeof(component));
            localElementDictionary.Add(XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"), typeof(dynamiccomponent));
            localElementDictionary.Add(XName.Get("properties", "urn:nhibernate-mapping-2.2"), typeof(properties));
            localElementDictionary.Add(XName.Get("any", "urn:nhibernate-mapping-2.2"), typeof(any));
            localElementDictionary.Add(XName.Get("map", "urn:nhibernate-mapping-2.2"), typeof(map));
            localElementDictionary.Add(XName.Get("set", "urn:nhibernate-mapping-2.2"), typeof(set));
            localElementDictionary.Add(XName.Get("list", "urn:nhibernate-mapping-2.2"), typeof(list));
            localElementDictionary.Add(XName.Get("bag", "urn:nhibernate-mapping-2.2"), typeof(bag));
            localElementDictionary.Add(XName.Get("idbag", "urn:nhibernate-mapping-2.2"), typeof(idbag));
            localElementDictionary.Add(XName.Get("array", "urn:nhibernate-mapping-2.2"), typeof(array));
            localElementDictionary.Add(XName.Get("primitive-array", "urn:nhibernate-mapping-2.2"), typeof(primitivearray));
            localElementDictionary.Add(XName.Get("join", "urn:nhibernate-mapping-2.2"), typeof(join));
            localElementDictionary.Add(XName.Get("subclass", "urn:nhibernate-mapping-2.2"), typeof(subclass));
            localElementDictionary.Add(XName.Get("joined-subclass", "urn:nhibernate-mapping-2.2"), typeof(joinedsubclass));
            localElementDictionary.Add(XName.Get("union-subclass", "urn:nhibernate-mapping-2.2"), typeof(unionsubclass));
            localElementDictionary.Add(XName.Get("loader", "urn:nhibernate-mapping-2.2"), typeof(loader));
            localElementDictionary.Add(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"), typeof(sqlinsert));
            localElementDictionary.Add(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"), typeof(sqlupdate));
            localElementDictionary.Add(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"), typeof(sqldelete));
            localElementDictionary.Add(XName.Get("filter", "urn:nhibernate-mapping-2.2"), typeof(filter));
            localElementDictionary.Add(XName.Get("resultset", "urn:nhibernate-mapping-2.2"), typeof(resultset));
            localElementDictionary.Add(XName.Get("query", "urn:nhibernate-mapping-2.2"), typeof(query));
            localElementDictionary.Add(XName.Get("sql-query", "urn:nhibernate-mapping-2.2"), typeof(sqlquery));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (meta*, column*, generator)
    /// </para>
    /// </summary>
    public partial class collectionid : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<meta> metaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<column> columnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator collectionid(XElement xe) { return XTypedServices.ToXTypedElement<collectionid>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static collectionid() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("meta", "urn:nhibernate-mapping-2.2")), new NamedContentModelEntity(XName.Get("column", "urn:nhibernate-mapping-2.2")), new NamedContentModelEntity(XName.Get("generator", "urn:nhibernate-mapping-2.2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (meta*, column*, generator)
        /// </para>
        /// </summary>
        public collectionid() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, column*, generator)
        /// </para>
        /// </summary>
        public IList<meta> meta {
            get {
                if ((this.metaField == null)) {
                    this.metaField = new XTypedList<meta>(this, LinqToXsdTypeManager.Instance, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                }
                return this.metaField;
            }
            set {
                if ((value == null)) {
                    this.metaField = null;
                }
                else {
                    if ((this.metaField == null)) {
                        this.metaField = XTypedList<meta>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<meta>(this.metaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, column*, generator)
        /// </para>
        /// </summary>
        public IList<column> column {
            get {
                if ((this.columnField == null)) {
                    this.columnField = new XTypedList<column>(this, LinqToXsdTypeManager.Instance, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                }
                return this.columnField;
            }
            set {
                if ((value == null)) {
                    this.columnField = null;
                }
                else {
                    if ((this.columnField == null)) {
                        this.columnField = XTypedList<column>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<column>(this.columnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (meta*, column*, generator)
        /// </para>
        /// </summary>
        public generator generator {
            get {
                XElement x = this.GetElement(XName.Get("generator", "urn:nhibernate-mapping-2.2"));
                return ((generator)(x));
            }
            set {
                this.SetElement(XName.Get("generator", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string column1 {
            get {
                XAttribute x = this.Attribute(XName.Get("column", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("column", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string type {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> length {
            get {
                XAttribute x = this.Attribute(XName.Get("length", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("length", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("collection-id", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static collectionid Load(string xmlFile) {
            return XTypedServices.Load<collectionid>(xmlFile);
        }
        
        public static collectionid Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<collectionid>(xmlFile);
        }
        
        public static collectionid Parse(string xml) {
            return XTypedServices.Parse<collectionid>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<collectionid>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(meta));
            localElementDictionary.Add(XName.Get("column", "urn:nhibernate-mapping-2.2"), typeof(column));
            localElementDictionary.Add(XName.Get("generator", "urn:nhibernate-mapping-2.2"), typeof(generator));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (comment?)
    /// </para>
    /// </summary>
    public partial class column : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator column(XElement xe) { return XTypedServices.ToXTypedElement<column>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static column() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("comment", "urn:nhibernate-mapping-2.2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (comment?)
        /// </para>
        /// </summary>
        public column() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (comment?)
        /// </para>
        /// </summary>
        public comment comment {
            get {
                XElement x = this.GetElement(XName.Get("comment", "urn:nhibernate-mapping-2.2"));
                return ((comment)(x));
            }
            set {
                this.SetElement(XName.Get("comment", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> length {
            get {
                XAttribute x = this.Attribute(XName.Get("length", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("length", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> precision {
            get {
                XAttribute x = this.Attribute(XName.Get("precision", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("precision", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> scale {
            get {
                XAttribute x = this.Attribute(XName.Get("scale", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("scale", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> notnull {
            get {
                XAttribute x = this.Attribute(XName.Get("not-null", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("not-null", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> unique {
            get {
                XAttribute x = this.Attribute(XName.Get("unique", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("unique", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string uniquekey {
            get {
                XAttribute x = this.Attribute(XName.Get("unique-key", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("unique-key", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string sqltype {
            get {
                XAttribute x = this.Attribute(XName.Get("sql-type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("sql-type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string index {
            get {
                XAttribute x = this.Attribute(XName.Get("index", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("index", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string check {
            get {
                XAttribute x = this.Attribute(XName.Get("check", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("check", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @default {
            get {
                XAttribute x = this.Attribute(XName.Get("default", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("default", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("column", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static column Load(string xmlFile) {
            return XTypedServices.Load<column>(xmlFile);
        }
        
        public static column Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<column>(xmlFile);
        }
        
        public static column Parse(string xml) {
            return XTypedServices.Parse<column>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<column>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("comment", "urn:nhibernate-mapping-2.2"), typeof(comment));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class comment : XTypedElement, IXMetaData {
        
         public static explicit operator comment(XElement xe) { return XTypedServices.ToXTypedElement<comment>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public comment() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("comment", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static comment Load(string xmlFile) {
            return XTypedServices.Load<comment>(xmlFile);
        }
        
        public static comment Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<comment>(xmlFile);
        }
        
        public static comment Parse(string xml) {
            return XTypedServices.Parse<comment>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<comment>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (meta*, tuplizer*, parent?, (property | manytoone | onetoone | component1 | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*)
    /// </para>
    /// </summary>
    public partial class component : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<meta> metaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tuplizer> tuplizerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<property> propertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<manytoone> manytooneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<onetoone> onetooneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<component> component1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dynamiccomponent> dynamiccomponentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<any> anyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<map> mapField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<set> setField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bag> bagField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<idbag> idbagField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<array> arrayField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<primitivearray> primitivearrayField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool uniqueDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool updateDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool insertDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool lazyDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool optimisticlockDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator component(XElement xe) { return XTypedServices.ToXTypedElement<component>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static component() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, parent?, (property | manytoone | onetoone | component1 | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public component() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, parent?, (property | manytoone | onetoone | component1 | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<meta> meta {
            get {
                if ((this.metaField == null)) {
                    this.metaField = new XTypedList<meta>(this, LinqToXsdTypeManager.Instance, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                }
                return this.metaField;
            }
            set {
                if ((value == null)) {
                    this.metaField = null;
                }
                else {
                    if ((this.metaField == null)) {
                        this.metaField = XTypedList<meta>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<meta>(this.metaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, parent?, (property | manytoone | onetoone | component1 | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<tuplizer> tuplizer {
            get {
                if ((this.tuplizerField == null)) {
                    this.tuplizerField = new XTypedList<tuplizer>(this, LinqToXsdTypeManager.Instance, XName.Get("tuplizer", "urn:nhibernate-mapping-2.2"));
                }
                return this.tuplizerField;
            }
            set {
                if ((value == null)) {
                    this.tuplizerField = null;
                }
                else {
                    if ((this.tuplizerField == null)) {
                        this.tuplizerField = XTypedList<tuplizer>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("tuplizer", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<tuplizer>(this.tuplizerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, parent?, (property | manytoone | onetoone | component1 | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public parent parent {
            get {
                XElement x = this.GetElement(XName.Get("parent", "urn:nhibernate-mapping-2.2"));
                return ((parent)(x));
            }
            set {
                this.SetElement(XName.Get("parent", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, parent?, (property | manytoone | onetoone | component1 | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<property> property {
            get {
                if ((this.propertyField == null)) {
                    this.propertyField = new XTypedList<property>(this, LinqToXsdTypeManager.Instance, XName.Get("property", "urn:nhibernate-mapping-2.2"));
                }
                return this.propertyField;
            }
            set {
                if ((value == null)) {
                    this.propertyField = null;
                }
                else {
                    if ((this.propertyField == null)) {
                        this.propertyField = XTypedList<property>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("property", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<property>(this.propertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, parent?, (property | manytoone | onetoone | component1 | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<manytoone> manytoone {
            get {
                if ((this.manytooneField == null)) {
                    this.manytooneField = new XTypedList<manytoone>(this, LinqToXsdTypeManager.Instance, XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"));
                }
                return this.manytooneField;
            }
            set {
                if ((value == null)) {
                    this.manytooneField = null;
                }
                else {
                    if ((this.manytooneField == null)) {
                        this.manytooneField = XTypedList<manytoone>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<manytoone>(this.manytooneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, parent?, (property | manytoone | onetoone | component1 | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<onetoone> onetoone {
            get {
                if ((this.onetooneField == null)) {
                    this.onetooneField = new XTypedList<onetoone>(this, LinqToXsdTypeManager.Instance, XName.Get("one-to-one", "urn:nhibernate-mapping-2.2"));
                }
                return this.onetooneField;
            }
            set {
                if ((value == null)) {
                    this.onetooneField = null;
                }
                else {
                    if ((this.onetooneField == null)) {
                        this.onetooneField = XTypedList<onetoone>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("one-to-one", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<onetoone>(this.onetooneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, parent?, (property | manytoone | onetoone | component1 | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<component> component1 {
            get {
                if ((this.component1Field == null)) {
                    this.component1Field = new XTypedList<component>(this, LinqToXsdTypeManager.Instance, XName.Get("component", "urn:nhibernate-mapping-2.2"));
                }
                return this.component1Field;
            }
            set {
                if ((value == null)) {
                    this.component1Field = null;
                }
                else {
                    if ((this.component1Field == null)) {
                        this.component1Field = XTypedList<component>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("component", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<component>(this.component1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, parent?, (property | manytoone | onetoone | component1 | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<dynamiccomponent> dynamiccomponent {
            get {
                if ((this.dynamiccomponentField == null)) {
                    this.dynamiccomponentField = new XTypedList<dynamiccomponent>(this, LinqToXsdTypeManager.Instance, XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"));
                }
                return this.dynamiccomponentField;
            }
            set {
                if ((value == null)) {
                    this.dynamiccomponentField = null;
                }
                else {
                    if ((this.dynamiccomponentField == null)) {
                        this.dynamiccomponentField = XTypedList<dynamiccomponent>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<dynamiccomponent>(this.dynamiccomponentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, parent?, (property | manytoone | onetoone | component1 | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<any> any {
            get {
                if ((this.anyField == null)) {
                    this.anyField = new XTypedList<any>(this, LinqToXsdTypeManager.Instance, XName.Get("any", "urn:nhibernate-mapping-2.2"));
                }
                return this.anyField;
            }
            set {
                if ((value == null)) {
                    this.anyField = null;
                }
                else {
                    if ((this.anyField == null)) {
                        this.anyField = XTypedList<any>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("any", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<any>(this.anyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, parent?, (property | manytoone | onetoone | component1 | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<map> map {
            get {
                if ((this.mapField == null)) {
                    this.mapField = new XTypedList<map>(this, LinqToXsdTypeManager.Instance, XName.Get("map", "urn:nhibernate-mapping-2.2"));
                }
                return this.mapField;
            }
            set {
                if ((value == null)) {
                    this.mapField = null;
                }
                else {
                    if ((this.mapField == null)) {
                        this.mapField = XTypedList<map>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("map", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<map>(this.mapField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, parent?, (property | manytoone | onetoone | component1 | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<set> set {
            get {
                if ((this.setField == null)) {
                    this.setField = new XTypedList<set>(this, LinqToXsdTypeManager.Instance, XName.Get("set", "urn:nhibernate-mapping-2.2"));
                }
                return this.setField;
            }
            set {
                if ((value == null)) {
                    this.setField = null;
                }
                else {
                    if ((this.setField == null)) {
                        this.setField = XTypedList<set>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("set", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<set>(this.setField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, parent?, (property | manytoone | onetoone | component1 | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, XName.Get("list", "urn:nhibernate-mapping-2.2"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("list", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, parent?, (property | manytoone | onetoone | component1 | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<bag> bag {
            get {
                if ((this.bagField == null)) {
                    this.bagField = new XTypedList<bag>(this, LinqToXsdTypeManager.Instance, XName.Get("bag", "urn:nhibernate-mapping-2.2"));
                }
                return this.bagField;
            }
            set {
                if ((value == null)) {
                    this.bagField = null;
                }
                else {
                    if ((this.bagField == null)) {
                        this.bagField = XTypedList<bag>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("bag", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<bag>(this.bagField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, parent?, (property | manytoone | onetoone | component1 | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<idbag> idbag {
            get {
                if ((this.idbagField == null)) {
                    this.idbagField = new XTypedList<idbag>(this, LinqToXsdTypeManager.Instance, XName.Get("idbag", "urn:nhibernate-mapping-2.2"));
                }
                return this.idbagField;
            }
            set {
                if ((value == null)) {
                    this.idbagField = null;
                }
                else {
                    if ((this.idbagField == null)) {
                        this.idbagField = XTypedList<idbag>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("idbag", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<idbag>(this.idbagField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, parent?, (property | manytoone | onetoone | component1 | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<array> array {
            get {
                if ((this.arrayField == null)) {
                    this.arrayField = new XTypedList<array>(this, LinqToXsdTypeManager.Instance, XName.Get("array", "urn:nhibernate-mapping-2.2"));
                }
                return this.arrayField;
            }
            set {
                if ((value == null)) {
                    this.arrayField = null;
                }
                else {
                    if ((this.arrayField == null)) {
                        this.arrayField = XTypedList<array>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("array", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<array>(this.arrayField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, parent?, (property | manytoone | onetoone | component1 | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<primitivearray> primitivearray {
            get {
                if ((this.primitivearrayField == null)) {
                    this.primitivearrayField = new XTypedList<primitivearray>(this, LinqToXsdTypeManager.Instance, XName.Get("primitive-array", "urn:nhibernate-mapping-2.2"));
                }
                return this.primitivearrayField;
            }
            set {
                if ((value == null)) {
                    this.primitivearrayField = null;
                }
                else {
                    if ((this.primitivearrayField == null)) {
                        this.primitivearrayField = XTypedList<primitivearray>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("primitive-array", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<primitivearray>(this.primitivearrayField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @class {
            get {
                XAttribute x = this.Attribute(XName.Get("class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string access {
            get {
                XAttribute x = this.Attribute(XName.Get("access", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("access", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool unique {
            get {
                XAttribute x = this.Attribute(XName.Get("unique", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, uniqueDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("unique", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool update {
            get {
                XAttribute x = this.Attribute(XName.Get("update", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, updateDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("update", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool insert {
            get {
                XAttribute x = this.Attribute(XName.Get("insert", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, insertDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("insert", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool lazy {
            get {
                XAttribute x = this.Attribute(XName.Get("lazy", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, lazyDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("lazy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool optimisticlock {
            get {
                XAttribute x = this.Attribute(XName.Get("optimistic-lock", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, optimisticlockDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("optimistic-lock", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("component", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static component Load(string xmlFile) {
            return XTypedServices.Load<component>(xmlFile);
        }
        
        public static component Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<component>(xmlFile);
        }
        
        public static component Parse(string xml) {
            return XTypedServices.Parse<component>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<component>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(meta));
            localElementDictionary.Add(XName.Get("tuplizer", "urn:nhibernate-mapping-2.2"), typeof(tuplizer));
            localElementDictionary.Add(XName.Get("parent", "urn:nhibernate-mapping-2.2"), typeof(parent));
            localElementDictionary.Add(XName.Get("property", "urn:nhibernate-mapping-2.2"), typeof(property));
            localElementDictionary.Add(XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"), typeof(manytoone));
            localElementDictionary.Add(XName.Get("one-to-one", "urn:nhibernate-mapping-2.2"), typeof(onetoone));
            localElementDictionary.Add(XName.Get("component", "urn:nhibernate-mapping-2.2"), typeof(component));
            localElementDictionary.Add(XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"), typeof(dynamiccomponent));
            localElementDictionary.Add(XName.Get("any", "urn:nhibernate-mapping-2.2"), typeof(any));
            localElementDictionary.Add(XName.Get("map", "urn:nhibernate-mapping-2.2"), typeof(map));
            localElementDictionary.Add(XName.Get("set", "urn:nhibernate-mapping-2.2"), typeof(set));
            localElementDictionary.Add(XName.Get("list", "urn:nhibernate-mapping-2.2"), typeof(list));
            localElementDictionary.Add(XName.Get("bag", "urn:nhibernate-mapping-2.2"), typeof(bag));
            localElementDictionary.Add(XName.Get("idbag", "urn:nhibernate-mapping-2.2"), typeof(idbag));
            localElementDictionary.Add(XName.Get("array", "urn:nhibernate-mapping-2.2"), typeof(array));
            localElementDictionary.Add(XName.Get("primitive-array", "urn:nhibernate-mapping-2.2"), typeof(primitivearray));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (meta*, parent?, (property | manytoone | any | nestedcompositeelement)*)
    /// </para>
    /// </summary>
    public partial class compositeelement : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<meta> metaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<property> propertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<manytoone> manytooneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<any> anyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<nestedcompositeelement> nestedcompositeelementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator compositeelement(XElement xe) { return XTypedServices.ToXTypedElement<compositeelement>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static compositeelement() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (meta*, parent?, (property | manytoone | any | nestedcompositeelement)*)
        /// </para>
        /// </summary>
        public compositeelement() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, parent?, (property | manytoone | any | nestedcompositeelement)*)
        /// </para>
        /// </summary>
        public IList<meta> meta {
            get {
                if ((this.metaField == null)) {
                    this.metaField = new XTypedList<meta>(this, LinqToXsdTypeManager.Instance, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                }
                return this.metaField;
            }
            set {
                if ((value == null)) {
                    this.metaField = null;
                }
                else {
                    if ((this.metaField == null)) {
                        this.metaField = XTypedList<meta>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<meta>(this.metaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, parent?, (property | manytoone | any | nestedcompositeelement)*)
        /// </para>
        /// </summary>
        public parent parent {
            get {
                XElement x = this.GetElement(XName.Get("parent", "urn:nhibernate-mapping-2.2"));
                return ((parent)(x));
            }
            set {
                this.SetElement(XName.Get("parent", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, parent?, (property | manytoone | any | nestedcompositeelement)*)
        /// </para>
        /// </summary>
        public IList<property> property {
            get {
                if ((this.propertyField == null)) {
                    this.propertyField = new XTypedList<property>(this, LinqToXsdTypeManager.Instance, XName.Get("property", "urn:nhibernate-mapping-2.2"));
                }
                return this.propertyField;
            }
            set {
                if ((value == null)) {
                    this.propertyField = null;
                }
                else {
                    if ((this.propertyField == null)) {
                        this.propertyField = XTypedList<property>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("property", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<property>(this.propertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, parent?, (property | manytoone | any | nestedcompositeelement)*)
        /// </para>
        /// </summary>
        public IList<manytoone> manytoone {
            get {
                if ((this.manytooneField == null)) {
                    this.manytooneField = new XTypedList<manytoone>(this, LinqToXsdTypeManager.Instance, XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"));
                }
                return this.manytooneField;
            }
            set {
                if ((value == null)) {
                    this.manytooneField = null;
                }
                else {
                    if ((this.manytooneField == null)) {
                        this.manytooneField = XTypedList<manytoone>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<manytoone>(this.manytooneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, parent?, (property | manytoone | any | nestedcompositeelement)*)
        /// </para>
        /// </summary>
        public IList<any> any {
            get {
                if ((this.anyField == null)) {
                    this.anyField = new XTypedList<any>(this, LinqToXsdTypeManager.Instance, XName.Get("any", "urn:nhibernate-mapping-2.2"));
                }
                return this.anyField;
            }
            set {
                if ((value == null)) {
                    this.anyField = null;
                }
                else {
                    if ((this.anyField == null)) {
                        this.anyField = XTypedList<any>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("any", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<any>(this.anyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, parent?, (property | manytoone | any | nestedcompositeelement)*)
        /// </para>
        /// </summary>
        public IList<nestedcompositeelement> nestedcompositeelement {
            get {
                if ((this.nestedcompositeelementField == null)) {
                    this.nestedcompositeelementField = new XTypedList<nestedcompositeelement>(this, LinqToXsdTypeManager.Instance, XName.Get("nested-composite-element", "urn:nhibernate-mapping-2.2"));
                }
                return this.nestedcompositeelementField;
            }
            set {
                if ((value == null)) {
                    this.nestedcompositeelementField = null;
                }
                else {
                    if ((this.nestedcompositeelementField == null)) {
                        this.nestedcompositeelementField = XTypedList<nestedcompositeelement>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("nested-composite-element", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<nestedcompositeelement>(this.nestedcompositeelementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string @class {
            get {
                XAttribute x = this.Attribute(XName.Get("class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("composite-element", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static compositeelement Load(string xmlFile) {
            return XTypedServices.Load<compositeelement>(xmlFile);
        }
        
        public static compositeelement Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<compositeelement>(xmlFile);
        }
        
        public static compositeelement Parse(string xml) {
            return XTypedServices.Parse<compositeelement>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<compositeelement>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(meta));
            localElementDictionary.Add(XName.Get("parent", "urn:nhibernate-mapping-2.2"), typeof(parent));
            localElementDictionary.Add(XName.Get("property", "urn:nhibernate-mapping-2.2"), typeof(property));
            localElementDictionary.Add(XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"), typeof(manytoone));
            localElementDictionary.Add(XName.Get("any", "urn:nhibernate-mapping-2.2"), typeof(any));
            localElementDictionary.Add(XName.Get("nested-composite-element", "urn:nhibernate-mapping-2.2"), typeof(nestedcompositeelement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (meta*, (keyproperty | keymanytoone)+)
    /// </para>
    /// </summary>
    public partial class compositeid : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<meta> metaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<keyproperty> keypropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<keymanytoone> keymanytooneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool mappedDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string unsavedvalueDefaultValue = "undefined";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator compositeid(XElement xe) { return XTypedServices.ToXTypedElement<compositeid>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static compositeid() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (meta*, (keyproperty | keymanytoone)+)
        /// </para>
        /// </summary>
        public compositeid() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, (keyproperty | keymanytoone)+)
        /// </para>
        /// </summary>
        public IList<meta> meta {
            get {
                if ((this.metaField == null)) {
                    this.metaField = new XTypedList<meta>(this, LinqToXsdTypeManager.Instance, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                }
                return this.metaField;
            }
            set {
                if ((value == null)) {
                    this.metaField = null;
                }
                else {
                    if ((this.metaField == null)) {
                        this.metaField = XTypedList<meta>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<meta>(this.metaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, (keyproperty | keymanytoone)+)
        /// </para>
        /// </summary>
        public IList<keyproperty> keyproperty {
            get {
                if ((this.keypropertyField == null)) {
                    this.keypropertyField = new XTypedList<keyproperty>(this, LinqToXsdTypeManager.Instance, XName.Get("key-property", "urn:nhibernate-mapping-2.2"));
                }
                return this.keypropertyField;
            }
            set {
                if ((value == null)) {
                    this.keypropertyField = null;
                }
                else {
                    if ((this.keypropertyField == null)) {
                        this.keypropertyField = XTypedList<keyproperty>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("key-property", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<keyproperty>(this.keypropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, (keyproperty | keymanytoone)+)
        /// </para>
        /// </summary>
        public IList<keymanytoone> keymanytoone {
            get {
                if ((this.keymanytooneField == null)) {
                    this.keymanytooneField = new XTypedList<keymanytoone>(this, LinqToXsdTypeManager.Instance, XName.Get("key-many-to-one", "urn:nhibernate-mapping-2.2"));
                }
                return this.keymanytooneField;
            }
            set {
                if ((value == null)) {
                    this.keymanytooneField = null;
                }
                else {
                    if ((this.keymanytooneField == null)) {
                        this.keymanytooneField = XTypedList<keymanytoone>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("key-many-to-one", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<keymanytoone>(this.keymanytooneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @class {
            get {
                XAttribute x = this.Attribute(XName.Get("class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool mapped {
            get {
                XAttribute x = this.Attribute(XName.Get("mapped", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, mappedDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("mapped", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string access {
            get {
                XAttribute x = this.Attribute(XName.Get("access", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("access", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string unsavedvalue {
            get {
                XAttribute x = this.Attribute(XName.Get("unsaved-value", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, unsavedvalueDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("unsaved-value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("composite-id", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static compositeid Load(string xmlFile) {
            return XTypedServices.Load<compositeid>(xmlFile);
        }
        
        public static compositeid Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<compositeid>(xmlFile);
        }
        
        public static compositeid Parse(string xml) {
            return XTypedServices.Parse<compositeid>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<compositeid>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(meta));
            localElementDictionary.Add(XName.Get("key-property", "urn:nhibernate-mapping-2.2"), typeof(keyproperty));
            localElementDictionary.Add(XName.Get("key-many-to-one", "urn:nhibernate-mapping-2.2"), typeof(keymanytoone));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((keyproperty | keymanytoone)+)
    /// </para>
    /// </summary>
    public partial class compositeindex : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<keyproperty> keypropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<keymanytoone> keymanytooneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator compositeindex(XElement xe) { return XTypedServices.ToXTypedElement<compositeindex>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static compositeindex() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((keyproperty | keymanytoone)+)
        /// </para>
        /// </summary>
        public compositeindex() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((keyproperty | keymanytoone)+)
        /// </para>
        /// </summary>
        public IList<keyproperty> keyproperty {
            get {
                if ((this.keypropertyField == null)) {
                    this.keypropertyField = new XTypedList<keyproperty>(this, LinqToXsdTypeManager.Instance, XName.Get("key-property", "urn:nhibernate-mapping-2.2"));
                }
                return this.keypropertyField;
            }
            set {
                if ((value == null)) {
                    this.keypropertyField = null;
                }
                else {
                    if ((this.keypropertyField == null)) {
                        this.keypropertyField = XTypedList<keyproperty>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("key-property", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<keyproperty>(this.keypropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((keyproperty | keymanytoone)+)
        /// </para>
        /// </summary>
        public IList<keymanytoone> keymanytoone {
            get {
                if ((this.keymanytooneField == null)) {
                    this.keymanytooneField = new XTypedList<keymanytoone>(this, LinqToXsdTypeManager.Instance, XName.Get("key-many-to-one", "urn:nhibernate-mapping-2.2"));
                }
                return this.keymanytooneField;
            }
            set {
                if ((value == null)) {
                    this.keymanytooneField = null;
                }
                else {
                    if ((this.keymanytooneField == null)) {
                        this.keymanytooneField = XTypedList<keymanytoone>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("key-many-to-one", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<keymanytoone>(this.keymanytooneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string @class {
            get {
                XAttribute x = this.Attribute(XName.Get("class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("composite-index", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static compositeindex Load(string xmlFile) {
            return XTypedServices.Load<compositeindex>(xmlFile);
        }
        
        public static compositeindex Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<compositeindex>(xmlFile);
        }
        
        public static compositeindex Parse(string xml) {
            return XTypedServices.Parse<compositeindex>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<compositeindex>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("key-property", "urn:nhibernate-mapping-2.2"), typeof(keyproperty));
            localElementDictionary.Add(XName.Get("key-many-to-one", "urn:nhibernate-mapping-2.2"), typeof(keymanytoone));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((keyproperty | keymanytoone)+)
    /// </para>
    /// </summary>
    public partial class compositemapkey : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<keyproperty> keypropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<keymanytoone> keymanytooneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator compositemapkey(XElement xe) { return XTypedServices.ToXTypedElement<compositemapkey>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static compositemapkey() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((keyproperty | keymanytoone)+)
        /// </para>
        /// </summary>
        public compositemapkey() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((keyproperty | keymanytoone)+)
        /// </para>
        /// </summary>
        public IList<keyproperty> keyproperty {
            get {
                if ((this.keypropertyField == null)) {
                    this.keypropertyField = new XTypedList<keyproperty>(this, LinqToXsdTypeManager.Instance, XName.Get("key-property", "urn:nhibernate-mapping-2.2"));
                }
                return this.keypropertyField;
            }
            set {
                if ((value == null)) {
                    this.keypropertyField = null;
                }
                else {
                    if ((this.keypropertyField == null)) {
                        this.keypropertyField = XTypedList<keyproperty>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("key-property", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<keyproperty>(this.keypropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((keyproperty | keymanytoone)+)
        /// </para>
        /// </summary>
        public IList<keymanytoone> keymanytoone {
            get {
                if ((this.keymanytooneField == null)) {
                    this.keymanytooneField = new XTypedList<keymanytoone>(this, LinqToXsdTypeManager.Instance, XName.Get("key-many-to-one", "urn:nhibernate-mapping-2.2"));
                }
                return this.keymanytooneField;
            }
            set {
                if ((value == null)) {
                    this.keymanytooneField = null;
                }
                else {
                    if ((this.keymanytooneField == null)) {
                        this.keymanytooneField = XTypedList<keymanytoone>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("key-many-to-one", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<keymanytoone>(this.keymanytooneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string @class {
            get {
                XAttribute x = this.Attribute(XName.Get("class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("composite-map-key", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static compositemapkey Load(string xmlFile) {
            return XTypedServices.Load<compositemapkey>(xmlFile);
        }
        
        public static compositemapkey Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<compositemapkey>(xmlFile);
        }
        
        public static compositemapkey Parse(string xml) {
            return XTypedServices.Parse<compositemapkey>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<compositemapkey>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("key-property", "urn:nhibernate-mapping-2.2"), typeof(keyproperty));
            localElementDictionary.Add(XName.Get("key-many-to-one", "urn:nhibernate-mapping-2.2"), typeof(keymanytoone));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class create : XTypedElement, IXMetaData {
        
         public static explicit operator create(XElement xe) { return XTypedServices.ToXTypedElement<create>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public create() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("create", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static create Load(string xmlFile) {
            return XTypedServices.Load<create>(xmlFile);
        }
        
        public static create Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<create>(xmlFile);
        }
        
        public static create Parse(string xml) {
            return XTypedServices.Parse<create>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<create>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((definition | (create, drop)), dialectscope*)
    /// </para>
    /// </summary>
    public partial class databaseobject : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dialectscope> dialectscopeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator databaseobject(XElement xe) { return XTypedServices.ToXTypedElement<databaseobject>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static databaseobject() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((definition | (create, drop)), dialectscope*)
        /// </para>
        /// </summary>
        public databaseobject() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((definition | (create, drop)), dialectscope*)
        /// </para>
        /// </summary>
        public definition definition {
            get {
                XElement x = this.GetElement(XName.Get("definition", "urn:nhibernate-mapping-2.2"));
                return ((definition)(x));
            }
            set {
                this.SetElement(XName.Get("definition", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((definition | (create, drop)), dialectscope*)
        /// </para>
        /// </summary>
        public create create {
            get {
                XElement x = this.GetElement(XName.Get("create", "urn:nhibernate-mapping-2.2"));
                return ((create)(x));
            }
            set {
                this.SetElement(XName.Get("create", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((definition | (create, drop)), dialectscope*)
        /// </para>
        /// </summary>
        public drop drop {
            get {
                XElement x = this.GetElement(XName.Get("drop", "urn:nhibernate-mapping-2.2"));
                return ((drop)(x));
            }
            set {
                this.SetElement(XName.Get("drop", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((definition | (create, drop)), dialectscope*)
        /// </para>
        /// </summary>
        public IList<dialectscope> dialectscope {
            get {
                if ((this.dialectscopeField == null)) {
                    this.dialectscopeField = new XTypedList<dialectscope>(this, LinqToXsdTypeManager.Instance, XName.Get("dialect-scope", "urn:nhibernate-mapping-2.2"));
                }
                return this.dialectscopeField;
            }
            set {
                if ((value == null)) {
                    this.dialectscopeField = null;
                }
                else {
                    if ((this.dialectscopeField == null)) {
                        this.dialectscopeField = XTypedList<dialectscope>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("dialect-scope", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<dialectscope>(this.dialectscopeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("database-object", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static databaseobject Load(string xmlFile) {
            return XTypedServices.Load<databaseobject>(xmlFile);
        }
        
        public static databaseobject Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<databaseobject>(xmlFile);
        }
        
        public static databaseobject Parse(string xml) {
            return XTypedServices.Parse<databaseobject>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<databaseobject>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("definition", "urn:nhibernate-mapping-2.2"), typeof(definition));
            localElementDictionary.Add(XName.Get("create", "urn:nhibernate-mapping-2.2"), typeof(create));
            localElementDictionary.Add(XName.Get("drop", "urn:nhibernate-mapping-2.2"), typeof(drop));
            localElementDictionary.Add(XName.Get("dialect-scope", "urn:nhibernate-mapping-2.2"), typeof(dialectscope));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (param*)
    /// </para>
    /// </summary>
    public partial class definition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<param> paramField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator definition(XElement xe) { return XTypedServices.ToXTypedElement<definition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static definition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("param", "urn:nhibernate-mapping-2.2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (param*)
        /// </para>
        /// </summary>
        public definition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (param*)
        /// </para>
        /// </summary>
        public IList<param> param {
            get {
                if ((this.paramField == null)) {
                    this.paramField = new XTypedList<param>(this, LinqToXsdTypeManager.Instance, XName.Get("param", "urn:nhibernate-mapping-2.2"));
                }
                return this.paramField;
            }
            set {
                if ((value == null)) {
                    this.paramField = null;
                }
                else {
                    if ((this.paramField == null)) {
                        this.paramField = XTypedList<param>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("param", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<param>(this.paramField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string @class {
            get {
                XAttribute x = this.Attribute(XName.Get("class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("definition", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static definition Load(string xmlFile) {
            return XTypedServices.Load<definition>(xmlFile);
        }
        
        public static definition Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<definition>(xmlFile);
        }
        
        public static definition Parse(string xml) {
            return XTypedServices.Parse<definition>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<definition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("param", "urn:nhibernate-mapping-2.2"), typeof(param));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class dialectscope : XTypedElement, IXMetaData {
        
         public static explicit operator dialectscope(XElement xe) { return XTypedServices.ToXTypedElement<dialectscope>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public dialectscope() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("dialect-scope", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static dialectscope Load(string xmlFile) {
            return XTypedServices.Load<dialectscope>(xmlFile);
        }
        
        public static dialectscope Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<dialectscope>(xmlFile);
        }
        
        public static dialectscope Parse(string xml) {
            return XTypedServices.Parse<dialectscope>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<dialectscope>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((column | formula)?)
    /// </para>
    /// </summary>
    public partial class discriminator : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeDefaultValue = "string";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool notnullDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool forceDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool insertDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator discriminator(XElement xe) { return XTypedServices.ToXTypedElement<discriminator>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static discriminator() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((column | formula)?)
        /// </para>
        /// </summary>
        public discriminator() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((column | formula)?)
        /// </para>
        /// </summary>
        public column column {
            get {
                XElement x = this.GetElement(XName.Get("column", "urn:nhibernate-mapping-2.2"));
                return ((column)(x));
            }
            set {
                this.SetElement(XName.Get("column", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((column | formula)?)
        /// </para>
        /// </summary>
        public formula formula {
            get {
                XElement x = this.GetElement(XName.Get("formula", "urn:nhibernate-mapping-2.2"));
                return ((formula)(x));
            }
            set {
                this.SetElement(XName.Get("formula", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string column1 {
            get {
                XAttribute x = this.Attribute(XName.Get("column", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("column", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string formula1 {
            get {
                XAttribute x = this.Attribute(XName.Get("formula", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("formula", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string type {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, typeDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool notnull {
            get {
                XAttribute x = this.Attribute(XName.Get("not-null", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, notnullDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("not-null", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> length {
            get {
                XAttribute x = this.Attribute(XName.Get("length", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("length", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool force {
            get {
                XAttribute x = this.Attribute(XName.Get("force", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, forceDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("force", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool insert {
            get {
                XAttribute x = this.Attribute(XName.Get("insert", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, insertDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("insert", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("discriminator", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static discriminator Load(string xmlFile) {
            return XTypedServices.Load<discriminator>(xmlFile);
        }
        
        public static discriminator Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<discriminator>(xmlFile);
        }
        
        public static discriminator Parse(string xml) {
            return XTypedServices.Parse<discriminator>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<discriminator>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("column", "urn:nhibernate-mapping-2.2"), typeof(column));
            localElementDictionary.Add(XName.Get("formula", "urn:nhibernate-mapping-2.2"), typeof(formula));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class drop : XTypedElement, IXMetaData {
        
         public static explicit operator drop(XElement xe) { return XTypedServices.ToXTypedElement<drop>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public drop() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("drop", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static drop Load(string xmlFile) {
            return XTypedServices.Load<drop>(xmlFile);
        }
        
        public static drop Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<drop>(xmlFile);
        }
        
        public static drop Parse(string xml) {
            return XTypedServices.Parse<drop>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<drop>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((property | manytoone | onetoone | component | dynamiccomponent1 | any | map | set | list | bag | array | primitivearray)*)
    /// </para>
    /// </summary>
    public partial class dynamiccomponent : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<property> propertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<manytoone> manytooneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<onetoone> onetooneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<component> componentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dynamiccomponent> dynamiccomponent1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<any> anyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<map> mapField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<set> setField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bag> bagField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<array> arrayField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<primitivearray> primitivearrayField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool uniqueDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool updateDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool insertDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool optimisticlockDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator dynamiccomponent(XElement xe) { return XTypedServices.ToXTypedElement<dynamiccomponent>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static dynamiccomponent() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((property | manytoone | onetoone | component | dynamiccomponent1 | any | map | set | list | bag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public dynamiccomponent() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((property | manytoone | onetoone | component | dynamiccomponent1 | any | map | set | list | bag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<property> property {
            get {
                if ((this.propertyField == null)) {
                    this.propertyField = new XTypedList<property>(this, LinqToXsdTypeManager.Instance, XName.Get("property", "urn:nhibernate-mapping-2.2"));
                }
                return this.propertyField;
            }
            set {
                if ((value == null)) {
                    this.propertyField = null;
                }
                else {
                    if ((this.propertyField == null)) {
                        this.propertyField = XTypedList<property>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("property", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<property>(this.propertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((property | manytoone | onetoone | component | dynamiccomponent1 | any | map | set | list | bag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<manytoone> manytoone {
            get {
                if ((this.manytooneField == null)) {
                    this.manytooneField = new XTypedList<manytoone>(this, LinqToXsdTypeManager.Instance, XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"));
                }
                return this.manytooneField;
            }
            set {
                if ((value == null)) {
                    this.manytooneField = null;
                }
                else {
                    if ((this.manytooneField == null)) {
                        this.manytooneField = XTypedList<manytoone>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<manytoone>(this.manytooneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((property | manytoone | onetoone | component | dynamiccomponent1 | any | map | set | list | bag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<onetoone> onetoone {
            get {
                if ((this.onetooneField == null)) {
                    this.onetooneField = new XTypedList<onetoone>(this, LinqToXsdTypeManager.Instance, XName.Get("one-to-one", "urn:nhibernate-mapping-2.2"));
                }
                return this.onetooneField;
            }
            set {
                if ((value == null)) {
                    this.onetooneField = null;
                }
                else {
                    if ((this.onetooneField == null)) {
                        this.onetooneField = XTypedList<onetoone>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("one-to-one", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<onetoone>(this.onetooneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((property | manytoone | onetoone | component | dynamiccomponent1 | any | map | set | list | bag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<component> component {
            get {
                if ((this.componentField == null)) {
                    this.componentField = new XTypedList<component>(this, LinqToXsdTypeManager.Instance, XName.Get("component", "urn:nhibernate-mapping-2.2"));
                }
                return this.componentField;
            }
            set {
                if ((value == null)) {
                    this.componentField = null;
                }
                else {
                    if ((this.componentField == null)) {
                        this.componentField = XTypedList<component>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("component", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<component>(this.componentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((property | manytoone | onetoone | component | dynamiccomponent1 | any | map | set | list | bag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<dynamiccomponent> dynamiccomponent1 {
            get {
                if ((this.dynamiccomponent1Field == null)) {
                    this.dynamiccomponent1Field = new XTypedList<dynamiccomponent>(this, LinqToXsdTypeManager.Instance, XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"));
                }
                return this.dynamiccomponent1Field;
            }
            set {
                if ((value == null)) {
                    this.dynamiccomponent1Field = null;
                }
                else {
                    if ((this.dynamiccomponent1Field == null)) {
                        this.dynamiccomponent1Field = XTypedList<dynamiccomponent>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<dynamiccomponent>(this.dynamiccomponent1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((property | manytoone | onetoone | component | dynamiccomponent1 | any | map | set | list | bag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<any> any {
            get {
                if ((this.anyField == null)) {
                    this.anyField = new XTypedList<any>(this, LinqToXsdTypeManager.Instance, XName.Get("any", "urn:nhibernate-mapping-2.2"));
                }
                return this.anyField;
            }
            set {
                if ((value == null)) {
                    this.anyField = null;
                }
                else {
                    if ((this.anyField == null)) {
                        this.anyField = XTypedList<any>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("any", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<any>(this.anyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((property | manytoone | onetoone | component | dynamiccomponent1 | any | map | set | list | bag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<map> map {
            get {
                if ((this.mapField == null)) {
                    this.mapField = new XTypedList<map>(this, LinqToXsdTypeManager.Instance, XName.Get("map", "urn:nhibernate-mapping-2.2"));
                }
                return this.mapField;
            }
            set {
                if ((value == null)) {
                    this.mapField = null;
                }
                else {
                    if ((this.mapField == null)) {
                        this.mapField = XTypedList<map>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("map", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<map>(this.mapField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((property | manytoone | onetoone | component | dynamiccomponent1 | any | map | set | list | bag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<set> set {
            get {
                if ((this.setField == null)) {
                    this.setField = new XTypedList<set>(this, LinqToXsdTypeManager.Instance, XName.Get("set", "urn:nhibernate-mapping-2.2"));
                }
                return this.setField;
            }
            set {
                if ((value == null)) {
                    this.setField = null;
                }
                else {
                    if ((this.setField == null)) {
                        this.setField = XTypedList<set>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("set", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<set>(this.setField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((property | manytoone | onetoone | component | dynamiccomponent1 | any | map | set | list | bag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, XName.Get("list", "urn:nhibernate-mapping-2.2"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("list", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((property | manytoone | onetoone | component | dynamiccomponent1 | any | map | set | list | bag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<bag> bag {
            get {
                if ((this.bagField == null)) {
                    this.bagField = new XTypedList<bag>(this, LinqToXsdTypeManager.Instance, XName.Get("bag", "urn:nhibernate-mapping-2.2"));
                }
                return this.bagField;
            }
            set {
                if ((value == null)) {
                    this.bagField = null;
                }
                else {
                    if ((this.bagField == null)) {
                        this.bagField = XTypedList<bag>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("bag", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<bag>(this.bagField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((property | manytoone | onetoone | component | dynamiccomponent1 | any | map | set | list | bag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<array> array {
            get {
                if ((this.arrayField == null)) {
                    this.arrayField = new XTypedList<array>(this, LinqToXsdTypeManager.Instance, XName.Get("array", "urn:nhibernate-mapping-2.2"));
                }
                return this.arrayField;
            }
            set {
                if ((value == null)) {
                    this.arrayField = null;
                }
                else {
                    if ((this.arrayField == null)) {
                        this.arrayField = XTypedList<array>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("array", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<array>(this.arrayField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((property | manytoone | onetoone | component | dynamiccomponent1 | any | map | set | list | bag | array | primitivearray)*)
        /// </para>
        /// </summary>
        public IList<primitivearray> primitivearray {
            get {
                if ((this.primitivearrayField == null)) {
                    this.primitivearrayField = new XTypedList<primitivearray>(this, LinqToXsdTypeManager.Instance, XName.Get("primitive-array", "urn:nhibernate-mapping-2.2"));
                }
                return this.primitivearrayField;
            }
            set {
                if ((value == null)) {
                    this.primitivearrayField = null;
                }
                else {
                    if ((this.primitivearrayField == null)) {
                        this.primitivearrayField = XTypedList<primitivearray>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("primitive-array", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<primitivearray>(this.primitivearrayField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string access {
            get {
                XAttribute x = this.Attribute(XName.Get("access", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("access", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool unique {
            get {
                XAttribute x = this.Attribute(XName.Get("unique", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, uniqueDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("unique", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool update {
            get {
                XAttribute x = this.Attribute(XName.Get("update", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, updateDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("update", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool insert {
            get {
                XAttribute x = this.Attribute(XName.Get("insert", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, insertDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("insert", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool optimisticlock {
            get {
                XAttribute x = this.Attribute(XName.Get("optimistic-lock", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, optimisticlockDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("optimistic-lock", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static dynamiccomponent Load(string xmlFile) {
            return XTypedServices.Load<dynamiccomponent>(xmlFile);
        }
        
        public static dynamiccomponent Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<dynamiccomponent>(xmlFile);
        }
        
        public static dynamiccomponent Parse(string xml) {
            return XTypedServices.Parse<dynamiccomponent>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<dynamiccomponent>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("property", "urn:nhibernate-mapping-2.2"), typeof(property));
            localElementDictionary.Add(XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"), typeof(manytoone));
            localElementDictionary.Add(XName.Get("one-to-one", "urn:nhibernate-mapping-2.2"), typeof(onetoone));
            localElementDictionary.Add(XName.Get("component", "urn:nhibernate-mapping-2.2"), typeof(component));
            localElementDictionary.Add(XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"), typeof(dynamiccomponent));
            localElementDictionary.Add(XName.Get("any", "urn:nhibernate-mapping-2.2"), typeof(any));
            localElementDictionary.Add(XName.Get("map", "urn:nhibernate-mapping-2.2"), typeof(map));
            localElementDictionary.Add(XName.Get("set", "urn:nhibernate-mapping-2.2"), typeof(set));
            localElementDictionary.Add(XName.Get("list", "urn:nhibernate-mapping-2.2"), typeof(list));
            localElementDictionary.Add(XName.Get("bag", "urn:nhibernate-mapping-2.2"), typeof(bag));
            localElementDictionary.Add(XName.Get("array", "urn:nhibernate-mapping-2.2"), typeof(array));
            localElementDictionary.Add(XName.Get("primitive-array", "urn:nhibernate-mapping-2.2"), typeof(primitivearray));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((column | formula)*, type?)
    /// </para>
    /// </summary>
    public partial class element : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<column> columnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<formula> formulaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool notnullDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool uniqueDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator element(XElement xe) { return XTypedServices.ToXTypedElement<element>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static element() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((column | formula)*, type?)
        /// </para>
        /// </summary>
        public element() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((column | formula)*, type?)
        /// </para>
        /// </summary>
        public IList<column> column {
            get {
                if ((this.columnField == null)) {
                    this.columnField = new XTypedList<column>(this, LinqToXsdTypeManager.Instance, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                }
                return this.columnField;
            }
            set {
                if ((value == null)) {
                    this.columnField = null;
                }
                else {
                    if ((this.columnField == null)) {
                        this.columnField = XTypedList<column>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<column>(this.columnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((column | formula)*, type?)
        /// </para>
        /// </summary>
        public IList<formula> formula {
            get {
                if ((this.formulaField == null)) {
                    this.formulaField = new XTypedList<formula>(this, LinqToXsdTypeManager.Instance, XName.Get("formula", "urn:nhibernate-mapping-2.2"));
                }
                return this.formulaField;
            }
            set {
                if ((value == null)) {
                    this.formulaField = null;
                }
                else {
                    if ((this.formulaField == null)) {
                        this.formulaField = XTypedList<formula>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("formula", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<formula>(this.formulaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((column | formula)*, type?)
        /// </para>
        /// </summary>
        public type type {
            get {
                XElement x = this.GetElement(XName.Get("type", "urn:nhibernate-mapping-2.2"));
                return ((type)(x));
            }
            set {
                this.SetElement(XName.Get("type", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string column1 {
            get {
                XAttribute x = this.Attribute(XName.Get("column", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("column", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string formula1 {
            get {
                XAttribute x = this.Attribute(XName.Get("formula", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("formula", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string type1 {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> length {
            get {
                XAttribute x = this.Attribute(XName.Get("length", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("length", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> precision {
            get {
                XAttribute x = this.Attribute(XName.Get("precision", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("precision", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> scale {
            get {
                XAttribute x = this.Attribute(XName.Get("scale", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("scale", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool notnull {
            get {
                XAttribute x = this.Attribute(XName.Get("not-null", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, notnullDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("not-null", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool unique {
            get {
                XAttribute x = this.Attribute(XName.Get("unique", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, uniqueDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("unique", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("element", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static element Load(string xmlFile) {
            return XTypedServices.Load<element>(xmlFile);
        }
        
        public static element Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<element>(xmlFile);
        }
        
        public static element Parse(string xml) {
            return XTypedServices.Parse<element>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<element>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("column", "urn:nhibernate-mapping-2.2"), typeof(column));
            localElementDictionary.Add(XName.Get("formula", "urn:nhibernate-mapping-2.2"), typeof(formula));
            localElementDictionary.Add(XName.Get("type", "urn:nhibernate-mapping-2.2"), typeof(type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class filter : XTypedElement, IXMetaData {
        
         public static explicit operator filter(XElement xe) { return XTypedServices.ToXTypedElement<filter>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public filter() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string condition {
            get {
                XAttribute x = this.Attribute(XName.Get("condition", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("condition", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("filter", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static filter Load(string xmlFile) {
            return XTypedServices.Load<filter>(xmlFile);
        }
        
        public static filter Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<filter>(xmlFile);
        }
        
        public static filter Parse(string xml) {
            return XTypedServices.Parse<filter>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<filter>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (filterparam)*
    /// </para>
    /// </summary>
    public partial class filterdef : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<filterparam> filterparamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool usemanytooneDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator filterdef(XElement xe) { return XTypedServices.ToXTypedElement<filterdef>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static filterdef() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (filterparam)*
        /// </para>
        /// </summary>
        public filterdef() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (filterparam)*
        /// </para>
        /// </summary>
        public IList<filterparam> filterparam {
            get {
                if ((this.filterparamField == null)) {
                    this.filterparamField = new XTypedList<filterparam>(this, LinqToXsdTypeManager.Instance, XName.Get("filter-param", "urn:nhibernate-mapping-2.2"));
                }
                return this.filterparamField;
            }
            set {
                if ((value == null)) {
                    this.filterparamField = null;
                }
                else {
                    if ((this.filterparamField == null)) {
                        this.filterparamField = XTypedList<filterparam>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("filter-param", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<filterparam>(this.filterparamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string condition {
            get {
                XAttribute x = this.Attribute(XName.Get("condition", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("condition", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool usemanytoone {
            get {
                XAttribute x = this.Attribute(XName.Get("use-many-to-one", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, usemanytooneDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("use-many-to-one", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("filter-def", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static filterdef Load(string xmlFile) {
            return XTypedServices.Load<filterdef>(xmlFile);
        }
        
        public static filterdef Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<filterdef>(xmlFile);
        }
        
        public static filterdef Parse(string xml) {
            return XTypedServices.Parse<filterdef>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<filterdef>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("filter-param", "urn:nhibernate-mapping-2.2"), typeof(filterparam));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class filterparam : XTypedElement, IXMetaData {
        
         public static explicit operator filterparam(XElement xe) { return XTypedServices.ToXTypedElement<filterparam>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public filterparam() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string type {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("filter-param", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static filterparam Load(string xmlFile) {
            return XTypedServices.Load<filterparam>(xmlFile);
        }
        
        public static filterparam Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<filterparam>(xmlFile);
        }
        
        public static filterparam Parse(string xml) {
            return XTypedServices.Parse<filterparam>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<filterparam>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class formula : XTypedElement, IXMetaData {
        
         public static explicit operator formula(XElement xe) { return XTypedServices.ToXTypedElement<formula>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public formula() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("formula", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static formula Load(string xmlFile) {
            return XTypedServices.Load<formula>(xmlFile);
        }
        
        public static formula Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<formula>(xmlFile);
        }
        
        public static formula Parse(string xml) {
            return XTypedServices.Parse<formula>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<formula>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (param*)
    /// </para>
    /// </summary>
    public partial class generator : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<param> paramField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator generator(XElement xe) { return XTypedServices.ToXTypedElement<generator>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static generator() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("param", "urn:nhibernate-mapping-2.2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (param*)
        /// </para>
        /// </summary>
        public generator() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (param*)
        /// </para>
        /// </summary>
        public IList<param> param {
            get {
                if ((this.paramField == null)) {
                    this.paramField = new XTypedList<param>(this, LinqToXsdTypeManager.Instance, XName.Get("param", "urn:nhibernate-mapping-2.2"));
                }
                return this.paramField;
            }
            set {
                if ((value == null)) {
                    this.paramField = null;
                }
                else {
                    if ((this.paramField == null)) {
                        this.paramField = XTypedList<param>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("param", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<param>(this.paramField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string @class {
            get {
                XAttribute x = this.Attribute(XName.Get("class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("generator", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static generator Load(string xmlFile) {
            return XTypedServices.Load<generator>(xmlFile);
        }
        
        public static generator Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<generator>(xmlFile);
        }
        
        public static generator Parse(string xml) {
            return XTypedServices.Parse<generator>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<generator>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("param", "urn:nhibernate-mapping-2.2"), typeof(param));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (meta*, typedef*, import*, (@class | subclass | joinedsubclass | unionsubclass)*, resultset*, (query | sqlquery)*, filterdef*, databaseobject*)
    /// </para>
    /// </summary>
    public partial class hibernatemapping : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<meta> metaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<typedef> typedefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<import> importField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@class> @classField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subclass> subclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<joinedsubclass> joinedsubclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unionsubclass> unionsubclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<resultset> resultsetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<query> queryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<sqlquery> sqlqueryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<filterdef> filterdefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<databaseobject> databaseobjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string defaultcascadeDefaultValue = "none";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string defaultaccessDefaultValue = "property";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool defaultlazyDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool autoimportDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator hibernatemapping(XElement xe) { return XTypedServices.ToXTypedElement<hibernatemapping>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static hibernatemapping() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (meta*, typedef*, import*, (@class | subclass | joinedsubclass | unionsubclass)*, resultset*, (query | sqlquery)*, filterdef*, databaseobject*)
        /// </para>
        /// </summary>
        public hibernatemapping() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, typedef*, import*, (@class | subclass | joinedsubclass | unionsubclass)*, resultset*, (query | sqlquery)*, filterdef*, databaseobject*)
        /// </para>
        /// </summary>
        public IList<meta> meta {
            get {
                if ((this.metaField == null)) {
                    this.metaField = new XTypedList<meta>(this, LinqToXsdTypeManager.Instance, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                }
                return this.metaField;
            }
            set {
                if ((value == null)) {
                    this.metaField = null;
                }
                else {
                    if ((this.metaField == null)) {
                        this.metaField = XTypedList<meta>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<meta>(this.metaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, typedef*, import*, (@class | subclass | joinedsubclass | unionsubclass)*, resultset*, (query | sqlquery)*, filterdef*, databaseobject*)
        /// </para>
        /// </summary>
        public IList<typedef> typedef {
            get {
                if ((this.typedefField == null)) {
                    this.typedefField = new XTypedList<typedef>(this, LinqToXsdTypeManager.Instance, XName.Get("typedef", "urn:nhibernate-mapping-2.2"));
                }
                return this.typedefField;
            }
            set {
                if ((value == null)) {
                    this.typedefField = null;
                }
                else {
                    if ((this.typedefField == null)) {
                        this.typedefField = XTypedList<typedef>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("typedef", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<typedef>(this.typedefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, typedef*, import*, (@class | subclass | joinedsubclass | unionsubclass)*, resultset*, (query | sqlquery)*, filterdef*, databaseobject*)
        /// </para>
        /// </summary>
        public IList<import> import {
            get {
                if ((this.importField == null)) {
                    this.importField = new XTypedList<import>(this, LinqToXsdTypeManager.Instance, XName.Get("import", "urn:nhibernate-mapping-2.2"));
                }
                return this.importField;
            }
            set {
                if ((value == null)) {
                    this.importField = null;
                }
                else {
                    if ((this.importField == null)) {
                        this.importField = XTypedList<import>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("import", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<import>(this.importField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, typedef*, import*, (@class | subclass | joinedsubclass | unionsubclass)*, resultset*, (query | sqlquery)*, filterdef*, databaseobject*)
        /// </para>
        /// </summary>
        public IList<@class> @class {
            get {
                if ((this.@classField == null)) {
                    this.@classField = new XTypedList<@class>(this, LinqToXsdTypeManager.Instance, XName.Get("class", "urn:nhibernate-mapping-2.2"));
                }
                return this.@classField;
            }
            set {
                if ((value == null)) {
                    this.@classField = null;
                }
                else {
                    if ((this.@classField == null)) {
                        this.@classField = XTypedList<@class>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("class", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<@class>(this.@classField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, typedef*, import*, (@class | subclass | joinedsubclass | unionsubclass)*, resultset*, (query | sqlquery)*, filterdef*, databaseobject*)
        /// </para>
        /// </summary>
        public IList<subclass> subclass {
            get {
                if ((this.subclassField == null)) {
                    this.subclassField = new XTypedList<subclass>(this, LinqToXsdTypeManager.Instance, XName.Get("subclass", "urn:nhibernate-mapping-2.2"));
                }
                return this.subclassField;
            }
            set {
                if ((value == null)) {
                    this.subclassField = null;
                }
                else {
                    if ((this.subclassField == null)) {
                        this.subclassField = XTypedList<subclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("subclass", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<subclass>(this.subclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, typedef*, import*, (@class | subclass | joinedsubclass | unionsubclass)*, resultset*, (query | sqlquery)*, filterdef*, databaseobject*)
        /// </para>
        /// </summary>
        public IList<joinedsubclass> joinedsubclass {
            get {
                if ((this.joinedsubclassField == null)) {
                    this.joinedsubclassField = new XTypedList<joinedsubclass>(this, LinqToXsdTypeManager.Instance, XName.Get("joined-subclass", "urn:nhibernate-mapping-2.2"));
                }
                return this.joinedsubclassField;
            }
            set {
                if ((value == null)) {
                    this.joinedsubclassField = null;
                }
                else {
                    if ((this.joinedsubclassField == null)) {
                        this.joinedsubclassField = XTypedList<joinedsubclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("joined-subclass", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<joinedsubclass>(this.joinedsubclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, typedef*, import*, (@class | subclass | joinedsubclass | unionsubclass)*, resultset*, (query | sqlquery)*, filterdef*, databaseobject*)
        /// </para>
        /// </summary>
        public IList<unionsubclass> unionsubclass {
            get {
                if ((this.unionsubclassField == null)) {
                    this.unionsubclassField = new XTypedList<unionsubclass>(this, LinqToXsdTypeManager.Instance, XName.Get("union-subclass", "urn:nhibernate-mapping-2.2"));
                }
                return this.unionsubclassField;
            }
            set {
                if ((value == null)) {
                    this.unionsubclassField = null;
                }
                else {
                    if ((this.unionsubclassField == null)) {
                        this.unionsubclassField = XTypedList<unionsubclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("union-subclass", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<unionsubclass>(this.unionsubclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, typedef*, import*, (@class | subclass | joinedsubclass | unionsubclass)*, resultset*, (query | sqlquery)*, filterdef*, databaseobject*)
        /// </para>
        /// </summary>
        public IList<resultset> resultset {
            get {
                if ((this.resultsetField == null)) {
                    this.resultsetField = new XTypedList<resultset>(this, LinqToXsdTypeManager.Instance, XName.Get("resultset", "urn:nhibernate-mapping-2.2"));
                }
                return this.resultsetField;
            }
            set {
                if ((value == null)) {
                    this.resultsetField = null;
                }
                else {
                    if ((this.resultsetField == null)) {
                        this.resultsetField = XTypedList<resultset>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("resultset", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<resultset>(this.resultsetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, typedef*, import*, (@class | subclass | joinedsubclass | unionsubclass)*, resultset*, (query | sqlquery)*, filterdef*, databaseobject*)
        /// </para>
        /// </summary>
        public IList<query> query {
            get {
                if ((this.queryField == null)) {
                    this.queryField = new XTypedList<query>(this, LinqToXsdTypeManager.Instance, XName.Get("query", "urn:nhibernate-mapping-2.2"));
                }
                return this.queryField;
            }
            set {
                if ((value == null)) {
                    this.queryField = null;
                }
                else {
                    if ((this.queryField == null)) {
                        this.queryField = XTypedList<query>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("query", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<query>(this.queryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, typedef*, import*, (@class | subclass | joinedsubclass | unionsubclass)*, resultset*, (query | sqlquery)*, filterdef*, databaseobject*)
        /// </para>
        /// </summary>
        public IList<sqlquery> sqlquery {
            get {
                if ((this.sqlqueryField == null)) {
                    this.sqlqueryField = new XTypedList<sqlquery>(this, LinqToXsdTypeManager.Instance, XName.Get("sql-query", "urn:nhibernate-mapping-2.2"));
                }
                return this.sqlqueryField;
            }
            set {
                if ((value == null)) {
                    this.sqlqueryField = null;
                }
                else {
                    if ((this.sqlqueryField == null)) {
                        this.sqlqueryField = XTypedList<sqlquery>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("sql-query", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<sqlquery>(this.sqlqueryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, typedef*, import*, (@class | subclass | joinedsubclass | unionsubclass)*, resultset*, (query | sqlquery)*, filterdef*, databaseobject*)
        /// </para>
        /// </summary>
        public IList<filterdef> filterdef {
            get {
                if ((this.filterdefField == null)) {
                    this.filterdefField = new XTypedList<filterdef>(this, LinqToXsdTypeManager.Instance, XName.Get("filter-def", "urn:nhibernate-mapping-2.2"));
                }
                return this.filterdefField;
            }
            set {
                if ((value == null)) {
                    this.filterdefField = null;
                }
                else {
                    if ((this.filterdefField == null)) {
                        this.filterdefField = XTypedList<filterdef>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("filter-def", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<filterdef>(this.filterdefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, typedef*, import*, (@class | subclass | joinedsubclass | unionsubclass)*, resultset*, (query | sqlquery)*, filterdef*, databaseobject*)
        /// </para>
        /// </summary>
        public IList<databaseobject> databaseobject {
            get {
                if ((this.databaseobjectField == null)) {
                    this.databaseobjectField = new XTypedList<databaseobject>(this, LinqToXsdTypeManager.Instance, XName.Get("database-object", "urn:nhibernate-mapping-2.2"));
                }
                return this.databaseobjectField;
            }
            set {
                if ((value == null)) {
                    this.databaseobjectField = null;
                }
                else {
                    if ((this.databaseobjectField == null)) {
                        this.databaseobjectField = XTypedList<databaseobject>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("database-object", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<databaseobject>(this.databaseobjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string schema {
            get {
                XAttribute x = this.Attribute(XName.Get("schema", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("schema", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string catalog {
            get {
                XAttribute x = this.Attribute(XName.Get("catalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("catalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string defaultcascade {
            get {
                XAttribute x = this.Attribute(XName.Get("default-cascade", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, defaultcascadeDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("default-cascade", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string defaultaccess {
            get {
                XAttribute x = this.Attribute(XName.Get("default-access", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, defaultaccessDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("default-access", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool defaultlazy {
            get {
                XAttribute x = this.Attribute(XName.Get("default-lazy", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, defaultlazyDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("default-lazy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool autoimport {
            get {
                XAttribute x = this.Attribute(XName.Get("auto-import", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, autoimportDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("auto-import", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Namespace used to find not-Fully Qualified Type Names
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Assembly used to find not-Fully Qualified Type Names
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string assembly {
            get {
                XAttribute x = this.Attribute(XName.Get("assembly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("assembly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("hibernate-mapping", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static hibernatemapping Load(string xmlFile) {
            return XTypedServices.Load<hibernatemapping>(xmlFile);
        }
        
        public static hibernatemapping Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<hibernatemapping>(xmlFile);
        }
        
        public static hibernatemapping Parse(string xml) {
            return XTypedServices.Parse<hibernatemapping>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<hibernatemapping>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(meta));
            localElementDictionary.Add(XName.Get("typedef", "urn:nhibernate-mapping-2.2"), typeof(typedef));
            localElementDictionary.Add(XName.Get("import", "urn:nhibernate-mapping-2.2"), typeof(import));
            localElementDictionary.Add(XName.Get("class", "urn:nhibernate-mapping-2.2"), typeof(@class));
            localElementDictionary.Add(XName.Get("subclass", "urn:nhibernate-mapping-2.2"), typeof(subclass));
            localElementDictionary.Add(XName.Get("joined-subclass", "urn:nhibernate-mapping-2.2"), typeof(joinedsubclass));
            localElementDictionary.Add(XName.Get("union-subclass", "urn:nhibernate-mapping-2.2"), typeof(unionsubclass));
            localElementDictionary.Add(XName.Get("resultset", "urn:nhibernate-mapping-2.2"), typeof(resultset));
            localElementDictionary.Add(XName.Get("query", "urn:nhibernate-mapping-2.2"), typeof(query));
            localElementDictionary.Add(XName.Get("sql-query", "urn:nhibernate-mapping-2.2"), typeof(sqlquery));
            localElementDictionary.Add(XName.Get("filter-def", "urn:nhibernate-mapping-2.2"), typeof(filterdef));
            localElementDictionary.Add(XName.Get("database-object", "urn:nhibernate-mapping-2.2"), typeof(databaseobject));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (meta*, column*, type?, generator?)
    /// </para>
    /// </summary>
    public partial class id : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<meta> metaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<column> columnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator id(XElement xe) { return XTypedServices.ToXTypedElement<id>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static id() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("meta", "urn:nhibernate-mapping-2.2")), new NamedContentModelEntity(XName.Get("column", "urn:nhibernate-mapping-2.2")), new NamedContentModelEntity(XName.Get("type", "urn:nhibernate-mapping-2.2")), new NamedContentModelEntity(XName.Get("generator", "urn:nhibernate-mapping-2.2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (meta*, column*, type?, generator?)
        /// </para>
        /// </summary>
        public id() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, column*, type?, generator?)
        /// </para>
        /// </summary>
        public IList<meta> meta {
            get {
                if ((this.metaField == null)) {
                    this.metaField = new XTypedList<meta>(this, LinqToXsdTypeManager.Instance, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                }
                return this.metaField;
            }
            set {
                if ((value == null)) {
                    this.metaField = null;
                }
                else {
                    if ((this.metaField == null)) {
                        this.metaField = XTypedList<meta>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<meta>(this.metaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, column*, type?, generator?)
        /// </para>
        /// </summary>
        public IList<column> column {
            get {
                if ((this.columnField == null)) {
                    this.columnField = new XTypedList<column>(this, LinqToXsdTypeManager.Instance, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                }
                return this.columnField;
            }
            set {
                if ((value == null)) {
                    this.columnField = null;
                }
                else {
                    if ((this.columnField == null)) {
                        this.columnField = XTypedList<column>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<column>(this.columnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, column*, type?, generator?)
        /// </para>
        /// </summary>
        public type type {
            get {
                XElement x = this.GetElement(XName.Get("type", "urn:nhibernate-mapping-2.2"));
                return ((type)(x));
            }
            set {
                this.SetElement(XName.Get("type", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, column*, type?, generator?)
        /// </para>
        /// </summary>
        public generator generator {
            get {
                XElement x = this.GetElement(XName.Get("generator", "urn:nhibernate-mapping-2.2"));
                return ((generator)(x));
            }
            set {
                this.SetElement(XName.Get("generator", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string access {
            get {
                XAttribute x = this.Attribute(XName.Get("access", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("access", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string column1 {
            get {
                XAttribute x = this.Attribute(XName.Get("column", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("column", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string type1 {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> length {
            get {
                XAttribute x = this.Attribute(XName.Get("length", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("length", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string unsavedvalue {
            get {
                XAttribute x = this.Attribute(XName.Get("unsaved-value", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("unsaved-value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("id", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static id Load(string xmlFile) {
            return XTypedServices.Load<id>(xmlFile);
        }
        
        public static id Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<id>(xmlFile);
        }
        
        public static id Parse(string xml) {
            return XTypedServices.Parse<id>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<id>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(meta));
            localElementDictionary.Add(XName.Get("column", "urn:nhibernate-mapping-2.2"), typeof(column));
            localElementDictionary.Add(XName.Get("type", "urn:nhibernate-mapping-2.2"), typeof(type));
            localElementDictionary.Add(XName.Get("generator", "urn:nhibernate-mapping-2.2"), typeof(generator));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, collectionid, key, (element | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
    /// </para>
    /// </summary>
    public partial class idbag : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<meta> metaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<synchronize> synchronizeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<filter> filterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool inverseDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool mutableDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool optimisticlockDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool embedxmlDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator idbag(XElement xe) { return XTypedServices.ToXTypedElement<idbag>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static idbag() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, collectionid, key, (element | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public idbag() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, collectionid, key, (element | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public IList<meta> meta {
            get {
                if ((this.metaField == null)) {
                    this.metaField = new XTypedList<meta>(this, LinqToXsdTypeManager.Instance, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                }
                return this.metaField;
            }
            set {
                if ((value == null)) {
                    this.metaField = null;
                }
                else {
                    if ((this.metaField == null)) {
                        this.metaField = XTypedList<meta>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<meta>(this.metaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, collectionid, key, (element | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public subselect subselect {
            get {
                XElement x = this.GetElement(XName.Get("subselect", "urn:nhibernate-mapping-2.2"));
                return ((subselect)(x));
            }
            set {
                this.SetElement(XName.Get("subselect", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, collectionid, key, (element | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public cache cache {
            get {
                XElement x = this.GetElement(XName.Get("cache", "urn:nhibernate-mapping-2.2"));
                return ((cache)(x));
            }
            set {
                this.SetElement(XName.Get("cache", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, collectionid, key, (element | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public IList<synchronize> synchronize {
            get {
                if ((this.synchronizeField == null)) {
                    this.synchronizeField = new XTypedList<synchronize>(this, LinqToXsdTypeManager.Instance, XName.Get("synchronize", "urn:nhibernate-mapping-2.2"));
                }
                return this.synchronizeField;
            }
            set {
                if ((value == null)) {
                    this.synchronizeField = null;
                }
                else {
                    if ((this.synchronizeField == null)) {
                        this.synchronizeField = XTypedList<synchronize>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("synchronize", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<synchronize>(this.synchronizeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, collectionid, key, (element | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public comment comment {
            get {
                XElement x = this.GetElement(XName.Get("comment", "urn:nhibernate-mapping-2.2"));
                return ((comment)(x));
            }
            set {
                this.SetElement(XName.Get("comment", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, collectionid, key, (element | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public collectionid collectionid {
            get {
                XElement x = this.GetElement(XName.Get("collection-id", "urn:nhibernate-mapping-2.2"));
                return ((collectionid)(x));
            }
            set {
                this.SetElement(XName.Get("collection-id", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, collectionid, key, (element | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public key key {
            get {
                XElement x = this.GetElement(XName.Get("key", "urn:nhibernate-mapping-2.2"));
                return ((key)(x));
            }
            set {
                this.SetElement(XName.Get("key", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, collectionid, key, (element | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public element element {
            get {
                XElement x = this.GetElement(XName.Get("element", "urn:nhibernate-mapping-2.2"));
                return ((element)(x));
            }
            set {
                this.SetElement(XName.Get("element", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, collectionid, key, (element | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public manytomany manytomany {
            get {
                XElement x = this.GetElement(XName.Get("many-to-many", "urn:nhibernate-mapping-2.2"));
                return ((manytomany)(x));
            }
            set {
                this.SetElement(XName.Get("many-to-many", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, collectionid, key, (element | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public compositeelement compositeelement {
            get {
                XElement x = this.GetElement(XName.Get("composite-element", "urn:nhibernate-mapping-2.2"));
                return ((compositeelement)(x));
            }
            set {
                this.SetElement(XName.Get("composite-element", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, collectionid, key, (element | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public manytoany manytoany {
            get {
                XElement x = this.GetElement(XName.Get("many-to-any", "urn:nhibernate-mapping-2.2"));
                return ((manytoany)(x));
            }
            set {
                this.SetElement(XName.Get("many-to-any", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, collectionid, key, (element | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public loader loader {
            get {
                XElement x = this.GetElement(XName.Get("loader", "urn:nhibernate-mapping-2.2"));
                return ((loader)(x));
            }
            set {
                this.SetElement(XName.Get("loader", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, collectionid, key, (element | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public sqlinsert sqlinsert {
            get {
                XElement x = this.GetElement(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"));
                return ((sqlinsert)(x));
            }
            set {
                this.SetElement(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, collectionid, key, (element | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public sqlupdate sqlupdate {
            get {
                XElement x = this.GetElement(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"));
                return ((sqlupdate)(x));
            }
            set {
                this.SetElement(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, collectionid, key, (element | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public sqldelete sqldelete {
            get {
                XElement x = this.GetElement(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"));
                return ((sqldelete)(x));
            }
            set {
                this.SetElement(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, collectionid, key, (element | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public sqldeleteall sqldeleteall {
            get {
                XElement x = this.GetElement(XName.Get("sql-delete-all", "urn:nhibernate-mapping-2.2"));
                return ((sqldeleteall)(x));
            }
            set {
                this.SetElement(XName.Get("sql-delete-all", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, collectionid, key, (element | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public IList<filter> filter {
            get {
                if ((this.filterField == null)) {
                    this.filterField = new XTypedList<filter>(this, LinqToXsdTypeManager.Instance, XName.Get("filter", "urn:nhibernate-mapping-2.2"));
                }
                return this.filterField;
            }
            set {
                if ((value == null)) {
                    this.filterField = null;
                }
                else {
                    if ((this.filterField == null)) {
                        this.filterField = XTypedList<filter>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("filter", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<filter>(this.filterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string access {
            get {
                XAttribute x = this.Attribute(XName.Get("access", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("access", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string table {
            get {
                XAttribute x = this.Attribute(XName.Get("table", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("table", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string schema {
            get {
                XAttribute x = this.Attribute(XName.Get("schema", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("schema", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string catalog {
            get {
                XAttribute x = this.Attribute(XName.Get("catalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("catalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string subselect1 {
            get {
                XAttribute x = this.Attribute(XName.Get("subselect", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("subselect", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string lazy {
            get {
                XAttribute x = this.Attribute(XName.Get("lazy", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("lazy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool inverse {
            get {
                XAttribute x = this.Attribute(XName.Get("inverse", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, inverseDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("inverse", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool mutable {
            get {
                XAttribute x = this.Attribute(XName.Get("mutable", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, mutableDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("mutable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string cascade {
            get {
                XAttribute x = this.Attribute(XName.Get("cascade", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("cascade", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string orderby {
            get {
                XAttribute x = this.Attribute(XName.Get("order-by", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("order-by", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @where {
            get {
                XAttribute x = this.Attribute(XName.Get("where", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("where", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> batchsize {
            get {
                XAttribute x = this.Attribute(XName.Get("batch-size", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("batch-size", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string outerjoin {
            get {
                XAttribute x = this.Attribute(XName.Get("outer-join", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("outer-join", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string fetch {
            get {
                XAttribute x = this.Attribute(XName.Get("fetch", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("fetch", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string persister {
            get {
                XAttribute x = this.Attribute(XName.Get("persister", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("persister", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string collectiontype {
            get {
                XAttribute x = this.Attribute(XName.Get("collection-type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("collection-type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string check {
            get {
                XAttribute x = this.Attribute(XName.Get("check", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("check", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool optimisticlock {
            get {
                XAttribute x = this.Attribute(XName.Get("optimistic-lock", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, optimisticlockDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("optimistic-lock", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool embedxml {
            get {
                XAttribute x = this.Attribute(XName.Get("embed-xml", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, embedxmlDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("embed-xml", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The concrete collection should use a generic version or an object-based version.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> generic {
            get {
                XAttribute x = this.Attribute(XName.Get("generic", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("generic", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("idbag", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static idbag Load(string xmlFile) {
            return XTypedServices.Load<idbag>(xmlFile);
        }
        
        public static idbag Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<idbag>(xmlFile);
        }
        
        public static idbag Parse(string xml) {
            return XTypedServices.Parse<idbag>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<idbag>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(meta));
            localElementDictionary.Add(XName.Get("subselect", "urn:nhibernate-mapping-2.2"), typeof(subselect));
            localElementDictionary.Add(XName.Get("cache", "urn:nhibernate-mapping-2.2"), typeof(cache));
            localElementDictionary.Add(XName.Get("synchronize", "urn:nhibernate-mapping-2.2"), typeof(synchronize));
            localElementDictionary.Add(XName.Get("comment", "urn:nhibernate-mapping-2.2"), typeof(comment));
            localElementDictionary.Add(XName.Get("collection-id", "urn:nhibernate-mapping-2.2"), typeof(collectionid));
            localElementDictionary.Add(XName.Get("key", "urn:nhibernate-mapping-2.2"), typeof(key));
            localElementDictionary.Add(XName.Get("element", "urn:nhibernate-mapping-2.2"), typeof(element));
            localElementDictionary.Add(XName.Get("many-to-many", "urn:nhibernate-mapping-2.2"), typeof(manytomany));
            localElementDictionary.Add(XName.Get("composite-element", "urn:nhibernate-mapping-2.2"), typeof(compositeelement));
            localElementDictionary.Add(XName.Get("many-to-any", "urn:nhibernate-mapping-2.2"), typeof(manytoany));
            localElementDictionary.Add(XName.Get("loader", "urn:nhibernate-mapping-2.2"), typeof(loader));
            localElementDictionary.Add(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"), typeof(sqlinsert));
            localElementDictionary.Add(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"), typeof(sqlupdate));
            localElementDictionary.Add(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"), typeof(sqldelete));
            localElementDictionary.Add(XName.Get("sql-delete-all", "urn:nhibernate-mapping-2.2"), typeof(sqldeleteall));
            localElementDictionary.Add(XName.Get("filter", "urn:nhibernate-mapping-2.2"), typeof(filter));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class import : XTypedElement, IXMetaData {
        
         public static explicit operator import(XElement xe) { return XTypedServices.ToXTypedElement<import>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public import() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string @class {
            get {
                XAttribute x = this.Attribute(XName.Get("class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string rename {
            get {
                XAttribute x = this.Attribute(XName.Get("rename", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("rename", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("import", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static import Load(string xmlFile) {
            return XTypedServices.Load<import>(xmlFile);
        }
        
        public static import Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<import>(xmlFile);
        }
        
        public static import Parse(string xml) {
            return XTypedServices.Parse<import>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<import>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (column*)
    /// </para>
    /// </summary>
    public partial class index : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<column> columnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator index(XElement xe) { return XTypedServices.ToXTypedElement<index>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static index() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("column", "urn:nhibernate-mapping-2.2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (column*)
        /// </para>
        /// </summary>
        public index() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (column*)
        /// </para>
        /// </summary>
        public IList<column> column {
            get {
                if ((this.columnField == null)) {
                    this.columnField = new XTypedList<column>(this, LinqToXsdTypeManager.Instance, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                }
                return this.columnField;
            }
            set {
                if ((value == null)) {
                    this.columnField = null;
                }
                else {
                    if ((this.columnField == null)) {
                        this.columnField = XTypedList<column>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<column>(this.columnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string column1 {
            get {
                XAttribute x = this.Attribute(XName.Get("column", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("column", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string type {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> length {
            get {
                XAttribute x = this.Attribute(XName.Get("length", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("length", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("index", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static index Load(string xmlFile) {
            return XTypedServices.Load<index>(xmlFile);
        }
        
        public static index Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<index>(xmlFile);
        }
        
        public static index Parse(string xml) {
            return XTypedServices.Parse<index>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<index>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("column", "urn:nhibernate-mapping-2.2"), typeof(column));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (column+)
    /// </para>
    /// </summary>
    public partial class indexmanytoany : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<column> columnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator indexmanytoany(XElement xe) { return XTypedServices.ToXTypedElement<indexmanytoany>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static indexmanytoany() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("column", "urn:nhibernate-mapping-2.2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (column+)
        /// </para>
        /// </summary>
        public indexmanytoany() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (column+)
        /// </para>
        /// </summary>
        public IList<column> column {
            get {
                if ((this.columnField == null)) {
                    this.columnField = new XTypedList<column>(this, LinqToXsdTypeManager.Instance, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                }
                return this.columnField;
            }
            set {
                if ((value == null)) {
                    this.columnField = null;
                }
                else {
                    if ((this.columnField == null)) {
                        this.columnField = XTypedList<column>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<column>(this.columnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string idtype {
            get {
                XAttribute x = this.Attribute(XName.Get("id-type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id-type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string metatype {
            get {
                XAttribute x = this.Attribute(XName.Get("meta-type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("meta-type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string column1 {
            get {
                XAttribute x = this.Attribute(XName.Get("column", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("column", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("index-many-to-any", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static indexmanytoany Load(string xmlFile) {
            return XTypedServices.Load<indexmanytoany>(xmlFile);
        }
        
        public static indexmanytoany Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<indexmanytoany>(xmlFile);
        }
        
        public static indexmanytoany Parse(string xml) {
            return XTypedServices.Parse<indexmanytoany>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<indexmanytoany>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("column", "urn:nhibernate-mapping-2.2"), typeof(column));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (column*)
    /// </para>
    /// </summary>
    public partial class indexmanytomany : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<column> columnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator indexmanytomany(XElement xe) { return XTypedServices.ToXTypedElement<indexmanytomany>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static indexmanytomany() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("column", "urn:nhibernate-mapping-2.2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (column*)
        /// </para>
        /// </summary>
        public indexmanytomany() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (column*)
        /// </para>
        /// </summary>
        public IList<column> column {
            get {
                if ((this.columnField == null)) {
                    this.columnField = new XTypedList<column>(this, LinqToXsdTypeManager.Instance, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                }
                return this.columnField;
            }
            set {
                if ((value == null)) {
                    this.columnField = null;
                }
                else {
                    if ((this.columnField == null)) {
                        this.columnField = XTypedList<column>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<column>(this.columnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string @class {
            get {
                XAttribute x = this.Attribute(XName.Get("class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string entityname {
            get {
                XAttribute x = this.Attribute(XName.Get("entity-name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("entity-name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string column1 {
            get {
                XAttribute x = this.Attribute(XName.Get("column", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("column", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string foreignkey {
            get {
                XAttribute x = this.Attribute(XName.Get("foreign-key", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("foreign-key", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("index-many-to-many", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static indexmanytomany Load(string xmlFile) {
            return XTypedServices.Load<indexmanytomany>(xmlFile);
        }
        
        public static indexmanytomany Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<indexmanytomany>(xmlFile);
        }
        
        public static indexmanytomany Parse(string xml) {
            return XTypedServices.Parse<indexmanytomany>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<indexmanytomany>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("column", "urn:nhibernate-mapping-2.2"), typeof(column));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (subselect?, comment?, key, (property | manytoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, sqlinsert?, sqlupdate?, sqldelete?)
    /// </para>
    /// </summary>
    public partial class join : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<property> propertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<manytoone> manytooneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<component> componentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dynamiccomponent> dynamiccomponentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<any> anyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<map> mapField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<set> setField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bag> bagField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<idbag> idbagField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<array> arrayField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<primitivearray> primitivearrayField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string fetchDefaultValue = "join";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool inverseDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool optionalDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator join(XElement xe) { return XTypedServices.ToXTypedElement<join>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static join() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (subselect?, comment?, key, (property | manytoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, sqlinsert?, sqlupdate?, sqldelete?)
        /// </para>
        /// </summary>
        public join() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (subselect?, comment?, key, (property | manytoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, sqlinsert?, sqlupdate?, sqldelete?)
        /// </para>
        /// </summary>
        public subselect subselect {
            get {
                XElement x = this.GetElement(XName.Get("subselect", "urn:nhibernate-mapping-2.2"));
                return ((subselect)(x));
            }
            set {
                this.SetElement(XName.Get("subselect", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (subselect?, comment?, key, (property | manytoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, sqlinsert?, sqlupdate?, sqldelete?)
        /// </para>
        /// </summary>
        public comment comment {
            get {
                XElement x = this.GetElement(XName.Get("comment", "urn:nhibernate-mapping-2.2"));
                return ((comment)(x));
            }
            set {
                this.SetElement(XName.Get("comment", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (subselect?, comment?, key, (property | manytoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, sqlinsert?, sqlupdate?, sqldelete?)
        /// </para>
        /// </summary>
        public key key {
            get {
                XElement x = this.GetElement(XName.Get("key", "urn:nhibernate-mapping-2.2"));
                return ((key)(x));
            }
            set {
                this.SetElement(XName.Get("key", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (subselect?, comment?, key, (property | manytoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, sqlinsert?, sqlupdate?, sqldelete?)
        /// </para>
        /// </summary>
        public IList<property> property {
            get {
                if ((this.propertyField == null)) {
                    this.propertyField = new XTypedList<property>(this, LinqToXsdTypeManager.Instance, XName.Get("property", "urn:nhibernate-mapping-2.2"));
                }
                return this.propertyField;
            }
            set {
                if ((value == null)) {
                    this.propertyField = null;
                }
                else {
                    if ((this.propertyField == null)) {
                        this.propertyField = XTypedList<property>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("property", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<property>(this.propertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (subselect?, comment?, key, (property | manytoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, sqlinsert?, sqlupdate?, sqldelete?)
        /// </para>
        /// </summary>
        public IList<manytoone> manytoone {
            get {
                if ((this.manytooneField == null)) {
                    this.manytooneField = new XTypedList<manytoone>(this, LinqToXsdTypeManager.Instance, XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"));
                }
                return this.manytooneField;
            }
            set {
                if ((value == null)) {
                    this.manytooneField = null;
                }
                else {
                    if ((this.manytooneField == null)) {
                        this.manytooneField = XTypedList<manytoone>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<manytoone>(this.manytooneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (subselect?, comment?, key, (property | manytoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, sqlinsert?, sqlupdate?, sqldelete?)
        /// </para>
        /// </summary>
        public IList<component> component {
            get {
                if ((this.componentField == null)) {
                    this.componentField = new XTypedList<component>(this, LinqToXsdTypeManager.Instance, XName.Get("component", "urn:nhibernate-mapping-2.2"));
                }
                return this.componentField;
            }
            set {
                if ((value == null)) {
                    this.componentField = null;
                }
                else {
                    if ((this.componentField == null)) {
                        this.componentField = XTypedList<component>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("component", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<component>(this.componentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (subselect?, comment?, key, (property | manytoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, sqlinsert?, sqlupdate?, sqldelete?)
        /// </para>
        /// </summary>
        public IList<dynamiccomponent> dynamiccomponent {
            get {
                if ((this.dynamiccomponentField == null)) {
                    this.dynamiccomponentField = new XTypedList<dynamiccomponent>(this, LinqToXsdTypeManager.Instance, XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"));
                }
                return this.dynamiccomponentField;
            }
            set {
                if ((value == null)) {
                    this.dynamiccomponentField = null;
                }
                else {
                    if ((this.dynamiccomponentField == null)) {
                        this.dynamiccomponentField = XTypedList<dynamiccomponent>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<dynamiccomponent>(this.dynamiccomponentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (subselect?, comment?, key, (property | manytoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, sqlinsert?, sqlupdate?, sqldelete?)
        /// </para>
        /// </summary>
        public IList<any> any {
            get {
                if ((this.anyField == null)) {
                    this.anyField = new XTypedList<any>(this, LinqToXsdTypeManager.Instance, XName.Get("any", "urn:nhibernate-mapping-2.2"));
                }
                return this.anyField;
            }
            set {
                if ((value == null)) {
                    this.anyField = null;
                }
                else {
                    if ((this.anyField == null)) {
                        this.anyField = XTypedList<any>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("any", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<any>(this.anyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (subselect?, comment?, key, (property | manytoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, sqlinsert?, sqlupdate?, sqldelete?)
        /// </para>
        /// </summary>
        public IList<map> map {
            get {
                if ((this.mapField == null)) {
                    this.mapField = new XTypedList<map>(this, LinqToXsdTypeManager.Instance, XName.Get("map", "urn:nhibernate-mapping-2.2"));
                }
                return this.mapField;
            }
            set {
                if ((value == null)) {
                    this.mapField = null;
                }
                else {
                    if ((this.mapField == null)) {
                        this.mapField = XTypedList<map>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("map", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<map>(this.mapField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (subselect?, comment?, key, (property | manytoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, sqlinsert?, sqlupdate?, sqldelete?)
        /// </para>
        /// </summary>
        public IList<set> set {
            get {
                if ((this.setField == null)) {
                    this.setField = new XTypedList<set>(this, LinqToXsdTypeManager.Instance, XName.Get("set", "urn:nhibernate-mapping-2.2"));
                }
                return this.setField;
            }
            set {
                if ((value == null)) {
                    this.setField = null;
                }
                else {
                    if ((this.setField == null)) {
                        this.setField = XTypedList<set>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("set", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<set>(this.setField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (subselect?, comment?, key, (property | manytoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, sqlinsert?, sqlupdate?, sqldelete?)
        /// </para>
        /// </summary>
        public IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, XName.Get("list", "urn:nhibernate-mapping-2.2"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("list", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (subselect?, comment?, key, (property | manytoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, sqlinsert?, sqlupdate?, sqldelete?)
        /// </para>
        /// </summary>
        public IList<bag> bag {
            get {
                if ((this.bagField == null)) {
                    this.bagField = new XTypedList<bag>(this, LinqToXsdTypeManager.Instance, XName.Get("bag", "urn:nhibernate-mapping-2.2"));
                }
                return this.bagField;
            }
            set {
                if ((value == null)) {
                    this.bagField = null;
                }
                else {
                    if ((this.bagField == null)) {
                        this.bagField = XTypedList<bag>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("bag", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<bag>(this.bagField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (subselect?, comment?, key, (property | manytoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, sqlinsert?, sqlupdate?, sqldelete?)
        /// </para>
        /// </summary>
        public IList<idbag> idbag {
            get {
                if ((this.idbagField == null)) {
                    this.idbagField = new XTypedList<idbag>(this, LinqToXsdTypeManager.Instance, XName.Get("idbag", "urn:nhibernate-mapping-2.2"));
                }
                return this.idbagField;
            }
            set {
                if ((value == null)) {
                    this.idbagField = null;
                }
                else {
                    if ((this.idbagField == null)) {
                        this.idbagField = XTypedList<idbag>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("idbag", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<idbag>(this.idbagField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (subselect?, comment?, key, (property | manytoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, sqlinsert?, sqlupdate?, sqldelete?)
        /// </para>
        /// </summary>
        public IList<array> array {
            get {
                if ((this.arrayField == null)) {
                    this.arrayField = new XTypedList<array>(this, LinqToXsdTypeManager.Instance, XName.Get("array", "urn:nhibernate-mapping-2.2"));
                }
                return this.arrayField;
            }
            set {
                if ((value == null)) {
                    this.arrayField = null;
                }
                else {
                    if ((this.arrayField == null)) {
                        this.arrayField = XTypedList<array>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("array", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<array>(this.arrayField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (subselect?, comment?, key, (property | manytoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, sqlinsert?, sqlupdate?, sqldelete?)
        /// </para>
        /// </summary>
        public IList<primitivearray> primitivearray {
            get {
                if ((this.primitivearrayField == null)) {
                    this.primitivearrayField = new XTypedList<primitivearray>(this, LinqToXsdTypeManager.Instance, XName.Get("primitive-array", "urn:nhibernate-mapping-2.2"));
                }
                return this.primitivearrayField;
            }
            set {
                if ((value == null)) {
                    this.primitivearrayField = null;
                }
                else {
                    if ((this.primitivearrayField == null)) {
                        this.primitivearrayField = XTypedList<primitivearray>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("primitive-array", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<primitivearray>(this.primitivearrayField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (subselect?, comment?, key, (property | manytoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, sqlinsert?, sqlupdate?, sqldelete?)
        /// </para>
        /// </summary>
        public sqlinsert sqlinsert {
            get {
                XElement x = this.GetElement(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"));
                return ((sqlinsert)(x));
            }
            set {
                this.SetElement(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (subselect?, comment?, key, (property | manytoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, sqlinsert?, sqlupdate?, sqldelete?)
        /// </para>
        /// </summary>
        public sqlupdate sqlupdate {
            get {
                XElement x = this.GetElement(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"));
                return ((sqlupdate)(x));
            }
            set {
                this.SetElement(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (subselect?, comment?, key, (property | manytoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, sqlinsert?, sqlupdate?, sqldelete?)
        /// </para>
        /// </summary>
        public sqldelete sqldelete {
            get {
                XElement x = this.GetElement(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"));
                return ((sqldelete)(x));
            }
            set {
                this.SetElement(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string table {
            get {
                XAttribute x = this.Attribute(XName.Get("table", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("table", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string schema {
            get {
                XAttribute x = this.Attribute(XName.Get("schema", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("schema", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string catalog {
            get {
                XAttribute x = this.Attribute(XName.Get("catalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("catalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string subselect1 {
            get {
                XAttribute x = this.Attribute(XName.Get("subselect", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("subselect", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string fetch {
            get {
                XAttribute x = this.Attribute(XName.Get("fetch", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, fetchDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("fetch", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool inverse {
            get {
                XAttribute x = this.Attribute(XName.Get("inverse", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, inverseDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("inverse", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool optional {
            get {
                XAttribute x = this.Attribute(XName.Get("optional", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, optionalDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("optional", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("join", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static join Load(string xmlFile) {
            return XTypedServices.Load<join>(xmlFile);
        }
        
        public static join Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<join>(xmlFile);
        }
        
        public static join Parse(string xml) {
            return XTypedServices.Parse<join>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<join>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("subselect", "urn:nhibernate-mapping-2.2"), typeof(subselect));
            localElementDictionary.Add(XName.Get("comment", "urn:nhibernate-mapping-2.2"), typeof(comment));
            localElementDictionary.Add(XName.Get("key", "urn:nhibernate-mapping-2.2"), typeof(key));
            localElementDictionary.Add(XName.Get("property", "urn:nhibernate-mapping-2.2"), typeof(property));
            localElementDictionary.Add(XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"), typeof(manytoone));
            localElementDictionary.Add(XName.Get("component", "urn:nhibernate-mapping-2.2"), typeof(component));
            localElementDictionary.Add(XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"), typeof(dynamiccomponent));
            localElementDictionary.Add(XName.Get("any", "urn:nhibernate-mapping-2.2"), typeof(any));
            localElementDictionary.Add(XName.Get("map", "urn:nhibernate-mapping-2.2"), typeof(map));
            localElementDictionary.Add(XName.Get("set", "urn:nhibernate-mapping-2.2"), typeof(set));
            localElementDictionary.Add(XName.Get("list", "urn:nhibernate-mapping-2.2"), typeof(list));
            localElementDictionary.Add(XName.Get("bag", "urn:nhibernate-mapping-2.2"), typeof(bag));
            localElementDictionary.Add(XName.Get("idbag", "urn:nhibernate-mapping-2.2"), typeof(idbag));
            localElementDictionary.Add(XName.Get("array", "urn:nhibernate-mapping-2.2"), typeof(array));
            localElementDictionary.Add(XName.Get("primitive-array", "urn:nhibernate-mapping-2.2"), typeof(primitivearray));
            localElementDictionary.Add(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"), typeof(sqlinsert));
            localElementDictionary.Add(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"), typeof(sqlupdate));
            localElementDictionary.Add(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"), typeof(sqldelete));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
    /// </para>
    /// </summary>
    public partial class joinedsubclass : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<meta> metaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<synchronize> synchronizeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tuplizer> tuplizerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<property> propertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<manytoone> manytooneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<onetoone> onetooneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<component> componentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dynamiccomponent> dynamiccomponentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<properties> propertiesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<any> anyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<map> mapField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<set> setField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bag> bagField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<idbag> idbagField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<array> arrayField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<primitivearray> primitivearrayField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<joinedsubclass> joinedsubclass1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<resultset> resultsetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<query> queryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<sqlquery> sqlqueryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool dynamicupdateDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool dynamicinsertDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool selectbeforeupdateDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator joinedsubclass(XElement xe) { return XTypedServices.ToXTypedElement<joinedsubclass>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static joinedsubclass() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public joinedsubclass() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<meta> meta {
            get {
                if ((this.metaField == null)) {
                    this.metaField = new XTypedList<meta>(this, LinqToXsdTypeManager.Instance, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                }
                return this.metaField;
            }
            set {
                if ((value == null)) {
                    this.metaField = null;
                }
                else {
                    if ((this.metaField == null)) {
                        this.metaField = XTypedList<meta>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<meta>(this.metaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public subselect subselect {
            get {
                XElement x = this.GetElement(XName.Get("subselect", "urn:nhibernate-mapping-2.2"));
                return ((subselect)(x));
            }
            set {
                this.SetElement(XName.Get("subselect", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<synchronize> synchronize {
            get {
                if ((this.synchronizeField == null)) {
                    this.synchronizeField = new XTypedList<synchronize>(this, LinqToXsdTypeManager.Instance, XName.Get("synchronize", "urn:nhibernate-mapping-2.2"));
                }
                return this.synchronizeField;
            }
            set {
                if ((value == null)) {
                    this.synchronizeField = null;
                }
                else {
                    if ((this.synchronizeField == null)) {
                        this.synchronizeField = XTypedList<synchronize>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("synchronize", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<synchronize>(this.synchronizeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public comment comment {
            get {
                XElement x = this.GetElement(XName.Get("comment", "urn:nhibernate-mapping-2.2"));
                return ((comment)(x));
            }
            set {
                this.SetElement(XName.Get("comment", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<tuplizer> tuplizer {
            get {
                if ((this.tuplizerField == null)) {
                    this.tuplizerField = new XTypedList<tuplizer>(this, LinqToXsdTypeManager.Instance, XName.Get("tuplizer", "urn:nhibernate-mapping-2.2"));
                }
                return this.tuplizerField;
            }
            set {
                if ((value == null)) {
                    this.tuplizerField = null;
                }
                else {
                    if ((this.tuplizerField == null)) {
                        this.tuplizerField = XTypedList<tuplizer>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("tuplizer", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<tuplizer>(this.tuplizerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public key key {
            get {
                XElement x = this.GetElement(XName.Get("key", "urn:nhibernate-mapping-2.2"));
                return ((key)(x));
            }
            set {
                this.SetElement(XName.Get("key", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<property> property {
            get {
                if ((this.propertyField == null)) {
                    this.propertyField = new XTypedList<property>(this, LinqToXsdTypeManager.Instance, XName.Get("property", "urn:nhibernate-mapping-2.2"));
                }
                return this.propertyField;
            }
            set {
                if ((value == null)) {
                    this.propertyField = null;
                }
                else {
                    if ((this.propertyField == null)) {
                        this.propertyField = XTypedList<property>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("property", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<property>(this.propertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<manytoone> manytoone {
            get {
                if ((this.manytooneField == null)) {
                    this.manytooneField = new XTypedList<manytoone>(this, LinqToXsdTypeManager.Instance, XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"));
                }
                return this.manytooneField;
            }
            set {
                if ((value == null)) {
                    this.manytooneField = null;
                }
                else {
                    if ((this.manytooneField == null)) {
                        this.manytooneField = XTypedList<manytoone>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<manytoone>(this.manytooneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<onetoone> onetoone {
            get {
                if ((this.onetooneField == null)) {
                    this.onetooneField = new XTypedList<onetoone>(this, LinqToXsdTypeManager.Instance, XName.Get("one-to-one", "urn:nhibernate-mapping-2.2"));
                }
                return this.onetooneField;
            }
            set {
                if ((value == null)) {
                    this.onetooneField = null;
                }
                else {
                    if ((this.onetooneField == null)) {
                        this.onetooneField = XTypedList<onetoone>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("one-to-one", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<onetoone>(this.onetooneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<component> component {
            get {
                if ((this.componentField == null)) {
                    this.componentField = new XTypedList<component>(this, LinqToXsdTypeManager.Instance, XName.Get("component", "urn:nhibernate-mapping-2.2"));
                }
                return this.componentField;
            }
            set {
                if ((value == null)) {
                    this.componentField = null;
                }
                else {
                    if ((this.componentField == null)) {
                        this.componentField = XTypedList<component>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("component", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<component>(this.componentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<dynamiccomponent> dynamiccomponent {
            get {
                if ((this.dynamiccomponentField == null)) {
                    this.dynamiccomponentField = new XTypedList<dynamiccomponent>(this, LinqToXsdTypeManager.Instance, XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"));
                }
                return this.dynamiccomponentField;
            }
            set {
                if ((value == null)) {
                    this.dynamiccomponentField = null;
                }
                else {
                    if ((this.dynamiccomponentField == null)) {
                        this.dynamiccomponentField = XTypedList<dynamiccomponent>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<dynamiccomponent>(this.dynamiccomponentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<properties> properties {
            get {
                if ((this.propertiesField == null)) {
                    this.propertiesField = new XTypedList<properties>(this, LinqToXsdTypeManager.Instance, XName.Get("properties", "urn:nhibernate-mapping-2.2"));
                }
                return this.propertiesField;
            }
            set {
                if ((value == null)) {
                    this.propertiesField = null;
                }
                else {
                    if ((this.propertiesField == null)) {
                        this.propertiesField = XTypedList<properties>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("properties", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<properties>(this.propertiesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<any> any {
            get {
                if ((this.anyField == null)) {
                    this.anyField = new XTypedList<any>(this, LinqToXsdTypeManager.Instance, XName.Get("any", "urn:nhibernate-mapping-2.2"));
                }
                return this.anyField;
            }
            set {
                if ((value == null)) {
                    this.anyField = null;
                }
                else {
                    if ((this.anyField == null)) {
                        this.anyField = XTypedList<any>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("any", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<any>(this.anyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<map> map {
            get {
                if ((this.mapField == null)) {
                    this.mapField = new XTypedList<map>(this, LinqToXsdTypeManager.Instance, XName.Get("map", "urn:nhibernate-mapping-2.2"));
                }
                return this.mapField;
            }
            set {
                if ((value == null)) {
                    this.mapField = null;
                }
                else {
                    if ((this.mapField == null)) {
                        this.mapField = XTypedList<map>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("map", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<map>(this.mapField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<set> set {
            get {
                if ((this.setField == null)) {
                    this.setField = new XTypedList<set>(this, LinqToXsdTypeManager.Instance, XName.Get("set", "urn:nhibernate-mapping-2.2"));
                }
                return this.setField;
            }
            set {
                if ((value == null)) {
                    this.setField = null;
                }
                else {
                    if ((this.setField == null)) {
                        this.setField = XTypedList<set>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("set", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<set>(this.setField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, XName.Get("list", "urn:nhibernate-mapping-2.2"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("list", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<bag> bag {
            get {
                if ((this.bagField == null)) {
                    this.bagField = new XTypedList<bag>(this, LinqToXsdTypeManager.Instance, XName.Get("bag", "urn:nhibernate-mapping-2.2"));
                }
                return this.bagField;
            }
            set {
                if ((value == null)) {
                    this.bagField = null;
                }
                else {
                    if ((this.bagField == null)) {
                        this.bagField = XTypedList<bag>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("bag", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<bag>(this.bagField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<idbag> idbag {
            get {
                if ((this.idbagField == null)) {
                    this.idbagField = new XTypedList<idbag>(this, LinqToXsdTypeManager.Instance, XName.Get("idbag", "urn:nhibernate-mapping-2.2"));
                }
                return this.idbagField;
            }
            set {
                if ((value == null)) {
                    this.idbagField = null;
                }
                else {
                    if ((this.idbagField == null)) {
                        this.idbagField = XTypedList<idbag>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("idbag", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<idbag>(this.idbagField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<array> array {
            get {
                if ((this.arrayField == null)) {
                    this.arrayField = new XTypedList<array>(this, LinqToXsdTypeManager.Instance, XName.Get("array", "urn:nhibernate-mapping-2.2"));
                }
                return this.arrayField;
            }
            set {
                if ((value == null)) {
                    this.arrayField = null;
                }
                else {
                    if ((this.arrayField == null)) {
                        this.arrayField = XTypedList<array>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("array", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<array>(this.arrayField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<primitivearray> primitivearray {
            get {
                if ((this.primitivearrayField == null)) {
                    this.primitivearrayField = new XTypedList<primitivearray>(this, LinqToXsdTypeManager.Instance, XName.Get("primitive-array", "urn:nhibernate-mapping-2.2"));
                }
                return this.primitivearrayField;
            }
            set {
                if ((value == null)) {
                    this.primitivearrayField = null;
                }
                else {
                    if ((this.primitivearrayField == null)) {
                        this.primitivearrayField = XTypedList<primitivearray>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("primitive-array", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<primitivearray>(this.primitivearrayField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<joinedsubclass> joinedsubclass1 {
            get {
                if ((this.joinedsubclass1Field == null)) {
                    this.joinedsubclass1Field = new XTypedList<joinedsubclass>(this, LinqToXsdTypeManager.Instance, XName.Get("joined-subclass", "urn:nhibernate-mapping-2.2"));
                }
                return this.joinedsubclass1Field;
            }
            set {
                if ((value == null)) {
                    this.joinedsubclass1Field = null;
                }
                else {
                    if ((this.joinedsubclass1Field == null)) {
                        this.joinedsubclass1Field = XTypedList<joinedsubclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("joined-subclass", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<joinedsubclass>(this.joinedsubclass1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public loader loader {
            get {
                XElement x = this.GetElement(XName.Get("loader", "urn:nhibernate-mapping-2.2"));
                return ((loader)(x));
            }
            set {
                this.SetElement(XName.Get("loader", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public sqlinsert sqlinsert {
            get {
                XElement x = this.GetElement(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"));
                return ((sqlinsert)(x));
            }
            set {
                this.SetElement(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public sqlupdate sqlupdate {
            get {
                XElement x = this.GetElement(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"));
                return ((sqlupdate)(x));
            }
            set {
                this.SetElement(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public sqldelete sqldelete {
            get {
                XElement x = this.GetElement(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"));
                return ((sqldelete)(x));
            }
            set {
                this.SetElement(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<resultset> resultset {
            get {
                if ((this.resultsetField == null)) {
                    this.resultsetField = new XTypedList<resultset>(this, LinqToXsdTypeManager.Instance, XName.Get("resultset", "urn:nhibernate-mapping-2.2"));
                }
                return this.resultsetField;
            }
            set {
                if ((value == null)) {
                    this.resultsetField = null;
                }
                else {
                    if ((this.resultsetField == null)) {
                        this.resultsetField = XTypedList<resultset>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("resultset", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<resultset>(this.resultsetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<query> query {
            get {
                if ((this.queryField == null)) {
                    this.queryField = new XTypedList<query>(this, LinqToXsdTypeManager.Instance, XName.Get("query", "urn:nhibernate-mapping-2.2"));
                }
                return this.queryField;
            }
            set {
                if ((value == null)) {
                    this.queryField = null;
                }
                else {
                    if ((this.queryField == null)) {
                        this.queryField = XTypedList<query>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("query", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<query>(this.queryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, key, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, joinedsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<sqlquery> sqlquery {
            get {
                if ((this.sqlqueryField == null)) {
                    this.sqlqueryField = new XTypedList<sqlquery>(this, LinqToXsdTypeManager.Instance, XName.Get("sql-query", "urn:nhibernate-mapping-2.2"));
                }
                return this.sqlqueryField;
            }
            set {
                if ((value == null)) {
                    this.sqlqueryField = null;
                }
                else {
                    if ((this.sqlqueryField == null)) {
                        this.sqlqueryField = XTypedList<sqlquery>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("sql-query", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<sqlquery>(this.sqlqueryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string entityname {
            get {
                XAttribute x = this.Attribute(XName.Get("entity-name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("entity-name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string proxy {
            get {
                XAttribute x = this.Attribute(XName.Get("proxy", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("proxy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string table {
            get {
                XAttribute x = this.Attribute(XName.Get("table", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("table", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string schema {
            get {
                XAttribute x = this.Attribute(XName.Get("schema", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("schema", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string catalog {
            get {
                XAttribute x = this.Attribute(XName.Get("catalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("catalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string subselect1 {
            get {
                XAttribute x = this.Attribute(XName.Get("subselect", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("subselect", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool dynamicupdate {
            get {
                XAttribute x = this.Attribute(XName.Get("dynamic-update", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, dynamicupdateDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("dynamic-update", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool dynamicinsert {
            get {
                XAttribute x = this.Attribute(XName.Get("dynamic-insert", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, dynamicinsertDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("dynamic-insert", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool selectbeforeupdate {
            get {
                XAttribute x = this.Attribute(XName.Get("select-before-update", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, selectbeforeupdateDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("select-before-update", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string extends {
            get {
                XAttribute x = this.Attribute(XName.Get("extends", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("extends", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> lazy {
            get {
                XAttribute x = this.Attribute(XName.Get("lazy", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("lazy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> @abstract {
            get {
                XAttribute x = this.Attribute(XName.Get("abstract", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("abstract", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string persister {
            get {
                XAttribute x = this.Attribute(XName.Get("persister", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("persister", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string check {
            get {
                XAttribute x = this.Attribute(XName.Get("check", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("check", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> batchsize {
            get {
                XAttribute x = this.Attribute(XName.Get("batch-size", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("batch-size", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("joined-subclass", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static joinedsubclass Load(string xmlFile) {
            return XTypedServices.Load<joinedsubclass>(xmlFile);
        }
        
        public static joinedsubclass Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<joinedsubclass>(xmlFile);
        }
        
        public static joinedsubclass Parse(string xml) {
            return XTypedServices.Parse<joinedsubclass>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<joinedsubclass>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(meta));
            localElementDictionary.Add(XName.Get("subselect", "urn:nhibernate-mapping-2.2"), typeof(subselect));
            localElementDictionary.Add(XName.Get("synchronize", "urn:nhibernate-mapping-2.2"), typeof(synchronize));
            localElementDictionary.Add(XName.Get("comment", "urn:nhibernate-mapping-2.2"), typeof(comment));
            localElementDictionary.Add(XName.Get("tuplizer", "urn:nhibernate-mapping-2.2"), typeof(tuplizer));
            localElementDictionary.Add(XName.Get("key", "urn:nhibernate-mapping-2.2"), typeof(key));
            localElementDictionary.Add(XName.Get("property", "urn:nhibernate-mapping-2.2"), typeof(property));
            localElementDictionary.Add(XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"), typeof(manytoone));
            localElementDictionary.Add(XName.Get("one-to-one", "urn:nhibernate-mapping-2.2"), typeof(onetoone));
            localElementDictionary.Add(XName.Get("component", "urn:nhibernate-mapping-2.2"), typeof(component));
            localElementDictionary.Add(XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"), typeof(dynamiccomponent));
            localElementDictionary.Add(XName.Get("properties", "urn:nhibernate-mapping-2.2"), typeof(properties));
            localElementDictionary.Add(XName.Get("any", "urn:nhibernate-mapping-2.2"), typeof(any));
            localElementDictionary.Add(XName.Get("map", "urn:nhibernate-mapping-2.2"), typeof(map));
            localElementDictionary.Add(XName.Get("set", "urn:nhibernate-mapping-2.2"), typeof(set));
            localElementDictionary.Add(XName.Get("list", "urn:nhibernate-mapping-2.2"), typeof(list));
            localElementDictionary.Add(XName.Get("bag", "urn:nhibernate-mapping-2.2"), typeof(bag));
            localElementDictionary.Add(XName.Get("idbag", "urn:nhibernate-mapping-2.2"), typeof(idbag));
            localElementDictionary.Add(XName.Get("array", "urn:nhibernate-mapping-2.2"), typeof(array));
            localElementDictionary.Add(XName.Get("primitive-array", "urn:nhibernate-mapping-2.2"), typeof(primitivearray));
            localElementDictionary.Add(XName.Get("joined-subclass", "urn:nhibernate-mapping-2.2"), typeof(joinedsubclass));
            localElementDictionary.Add(XName.Get("loader", "urn:nhibernate-mapping-2.2"), typeof(loader));
            localElementDictionary.Add(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"), typeof(sqlinsert));
            localElementDictionary.Add(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"), typeof(sqlupdate));
            localElementDictionary.Add(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"), typeof(sqldelete));
            localElementDictionary.Add(XName.Get("resultset", "urn:nhibernate-mapping-2.2"), typeof(resultset));
            localElementDictionary.Add(XName.Get("query", "urn:nhibernate-mapping-2.2"), typeof(query));
            localElementDictionary.Add(XName.Get("sql-query", "urn:nhibernate-mapping-2.2"), typeof(sqlquery));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (column*)
    /// </para>
    /// </summary>
    public partial class key : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<column> columnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string ondeleteDefaultValue = "noaction";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator key(XElement xe) { return XTypedServices.ToXTypedElement<key>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static key() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("column", "urn:nhibernate-mapping-2.2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (column*)
        /// </para>
        /// </summary>
        public key() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (column*)
        /// </para>
        /// </summary>
        public IList<column> column {
            get {
                if ((this.columnField == null)) {
                    this.columnField = new XTypedList<column>(this, LinqToXsdTypeManager.Instance, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                }
                return this.columnField;
            }
            set {
                if ((value == null)) {
                    this.columnField = null;
                }
                else {
                    if ((this.columnField == null)) {
                        this.columnField = XTypedList<column>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<column>(this.columnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string column1 {
            get {
                XAttribute x = this.Attribute(XName.Get("column", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("column", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string propertyref {
            get {
                XAttribute x = this.Attribute(XName.Get("property-ref", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("property-ref", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string foreignkey {
            get {
                XAttribute x = this.Attribute(XName.Get("foreign-key", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("foreign-key", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ondelete {
            get {
                XAttribute x = this.Attribute(XName.Get("on-delete", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, ondeleteDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("on-delete", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> notnull {
            get {
                XAttribute x = this.Attribute(XName.Get("not-null", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("not-null", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> update {
            get {
                XAttribute x = this.Attribute(XName.Get("update", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("update", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> unique {
            get {
                XAttribute x = this.Attribute(XName.Get("unique", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("unique", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("key", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static key Load(string xmlFile) {
            return XTypedServices.Load<key>(xmlFile);
        }
        
        public static key Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<key>(xmlFile);
        }
        
        public static key Parse(string xml) {
            return XTypedServices.Parse<key>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<key>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("column", "urn:nhibernate-mapping-2.2"), typeof(column));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (meta*, column*)
    /// </para>
    /// </summary>
    public partial class keymanytoone : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<meta> metaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<column> columnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string notfoundDefaultValue = "exception";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator keymanytoone(XElement xe) { return XTypedServices.ToXTypedElement<keymanytoone>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static keymanytoone() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("meta", "urn:nhibernate-mapping-2.2")), new NamedContentModelEntity(XName.Get("column", "urn:nhibernate-mapping-2.2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (meta*, column*)
        /// </para>
        /// </summary>
        public keymanytoone() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, column*)
        /// </para>
        /// </summary>
        public IList<meta> meta {
            get {
                if ((this.metaField == null)) {
                    this.metaField = new XTypedList<meta>(this, LinqToXsdTypeManager.Instance, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                }
                return this.metaField;
            }
            set {
                if ((value == null)) {
                    this.metaField = null;
                }
                else {
                    if ((this.metaField == null)) {
                        this.metaField = XTypedList<meta>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<meta>(this.metaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, column*)
        /// </para>
        /// </summary>
        public IList<column> column {
            get {
                if ((this.columnField == null)) {
                    this.columnField = new XTypedList<column>(this, LinqToXsdTypeManager.Instance, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                }
                return this.columnField;
            }
            set {
                if ((value == null)) {
                    this.columnField = null;
                }
                else {
                    if ((this.columnField == null)) {
                        this.columnField = XTypedList<column>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<column>(this.columnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string access {
            get {
                XAttribute x = this.Attribute(XName.Get("access", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("access", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @class {
            get {
                XAttribute x = this.Attribute(XName.Get("class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string entityname {
            get {
                XAttribute x = this.Attribute(XName.Get("entity-name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("entity-name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string column1 {
            get {
                XAttribute x = this.Attribute(XName.Get("column", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("column", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string foreignkey {
            get {
                XAttribute x = this.Attribute(XName.Get("foreign-key", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("foreign-key", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string lazy {
            get {
                XAttribute x = this.Attribute(XName.Get("lazy", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("lazy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string notfound {
            get {
                XAttribute x = this.Attribute(XName.Get("not-found", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, notfoundDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("not-found", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("key-many-to-one", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static keymanytoone Load(string xmlFile) {
            return XTypedServices.Load<keymanytoone>(xmlFile);
        }
        
        public static keymanytoone Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<keymanytoone>(xmlFile);
        }
        
        public static keymanytoone Parse(string xml) {
            return XTypedServices.Parse<keymanytoone>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<keymanytoone>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(meta));
            localElementDictionary.Add(XName.Get("column", "urn:nhibernate-mapping-2.2"), typeof(column));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (meta*, column*, type?)
    /// </para>
    /// </summary>
    public partial class keyproperty : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<meta> metaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<column> columnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator keyproperty(XElement xe) { return XTypedServices.ToXTypedElement<keyproperty>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static keyproperty() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("meta", "urn:nhibernate-mapping-2.2")), new NamedContentModelEntity(XName.Get("column", "urn:nhibernate-mapping-2.2")), new NamedContentModelEntity(XName.Get("type", "urn:nhibernate-mapping-2.2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (meta*, column*, type?)
        /// </para>
        /// </summary>
        public keyproperty() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, column*, type?)
        /// </para>
        /// </summary>
        public IList<meta> meta {
            get {
                if ((this.metaField == null)) {
                    this.metaField = new XTypedList<meta>(this, LinqToXsdTypeManager.Instance, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                }
                return this.metaField;
            }
            set {
                if ((value == null)) {
                    this.metaField = null;
                }
                else {
                    if ((this.metaField == null)) {
                        this.metaField = XTypedList<meta>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<meta>(this.metaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, column*, type?)
        /// </para>
        /// </summary>
        public IList<column> column {
            get {
                if ((this.columnField == null)) {
                    this.columnField = new XTypedList<column>(this, LinqToXsdTypeManager.Instance, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                }
                return this.columnField;
            }
            set {
                if ((value == null)) {
                    this.columnField = null;
                }
                else {
                    if ((this.columnField == null)) {
                        this.columnField = XTypedList<column>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<column>(this.columnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, column*, type?)
        /// </para>
        /// </summary>
        public type type {
            get {
                XElement x = this.GetElement(XName.Get("type", "urn:nhibernate-mapping-2.2"));
                return ((type)(x));
            }
            set {
                this.SetElement(XName.Get("type", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string access {
            get {
                XAttribute x = this.Attribute(XName.Get("access", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("access", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string type1 {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string column1 {
            get {
                XAttribute x = this.Attribute(XName.Get("column", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("column", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> length {
            get {
                XAttribute x = this.Attribute(XName.Get("length", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("length", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("key-property", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static keyproperty Load(string xmlFile) {
            return XTypedServices.Load<keyproperty>(xmlFile);
        }
        
        public static keyproperty Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<keyproperty>(xmlFile);
        }
        
        public static keyproperty Parse(string xml) {
            return XTypedServices.Parse<keyproperty>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<keyproperty>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(meta));
            localElementDictionary.Add(XName.Get("column", "urn:nhibernate-mapping-2.2"), typeof(column));
            localElementDictionary.Add(XName.Get("type", "urn:nhibernate-mapping-2.2"), typeof(type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
    /// </para>
    /// </summary>
    public partial class list : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<meta> metaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<synchronize> synchronizeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<filter> filterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool inverseDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool mutableDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool optimisticlockDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool embedxmlDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator list(XElement xe) { return XTypedServices.ToXTypedElement<list>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static list() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public list() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public IList<meta> meta {
            get {
                if ((this.metaField == null)) {
                    this.metaField = new XTypedList<meta>(this, LinqToXsdTypeManager.Instance, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                }
                return this.metaField;
            }
            set {
                if ((value == null)) {
                    this.metaField = null;
                }
                else {
                    if ((this.metaField == null)) {
                        this.metaField = XTypedList<meta>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<meta>(this.metaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public subselect subselect {
            get {
                XElement x = this.GetElement(XName.Get("subselect", "urn:nhibernate-mapping-2.2"));
                return ((subselect)(x));
            }
            set {
                this.SetElement(XName.Get("subselect", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public cache cache {
            get {
                XElement x = this.GetElement(XName.Get("cache", "urn:nhibernate-mapping-2.2"));
                return ((cache)(x));
            }
            set {
                this.SetElement(XName.Get("cache", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public IList<synchronize> synchronize {
            get {
                if ((this.synchronizeField == null)) {
                    this.synchronizeField = new XTypedList<synchronize>(this, LinqToXsdTypeManager.Instance, XName.Get("synchronize", "urn:nhibernate-mapping-2.2"));
                }
                return this.synchronizeField;
            }
            set {
                if ((value == null)) {
                    this.synchronizeField = null;
                }
                else {
                    if ((this.synchronizeField == null)) {
                        this.synchronizeField = XTypedList<synchronize>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("synchronize", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<synchronize>(this.synchronizeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public comment comment {
            get {
                XElement x = this.GetElement(XName.Get("comment", "urn:nhibernate-mapping-2.2"));
                return ((comment)(x));
            }
            set {
                this.SetElement(XName.Get("comment", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public key key {
            get {
                XElement x = this.GetElement(XName.Get("key", "urn:nhibernate-mapping-2.2"));
                return ((key)(x));
            }
            set {
                this.SetElement(XName.Get("key", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public index index {
            get {
                XElement x = this.GetElement(XName.Get("index", "urn:nhibernate-mapping-2.2"));
                return ((index)(x));
            }
            set {
                this.SetElement(XName.Get("index", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public listindex listindex {
            get {
                XElement x = this.GetElement(XName.Get("list-index", "urn:nhibernate-mapping-2.2"));
                return ((listindex)(x));
            }
            set {
                this.SetElement(XName.Get("list-index", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public element element {
            get {
                XElement x = this.GetElement(XName.Get("element", "urn:nhibernate-mapping-2.2"));
                return ((element)(x));
            }
            set {
                this.SetElement(XName.Get("element", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public onetomany onetomany {
            get {
                XElement x = this.GetElement(XName.Get("one-to-many", "urn:nhibernate-mapping-2.2"));
                return ((onetomany)(x));
            }
            set {
                this.SetElement(XName.Get("one-to-many", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public manytomany manytomany {
            get {
                XElement x = this.GetElement(XName.Get("many-to-many", "urn:nhibernate-mapping-2.2"));
                return ((manytomany)(x));
            }
            set {
                this.SetElement(XName.Get("many-to-many", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public compositeelement compositeelement {
            get {
                XElement x = this.GetElement(XName.Get("composite-element", "urn:nhibernate-mapping-2.2"));
                return ((compositeelement)(x));
            }
            set {
                this.SetElement(XName.Get("composite-element", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public manytoany manytoany {
            get {
                XElement x = this.GetElement(XName.Get("many-to-any", "urn:nhibernate-mapping-2.2"));
                return ((manytoany)(x));
            }
            set {
                this.SetElement(XName.Get("many-to-any", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public loader loader {
            get {
                XElement x = this.GetElement(XName.Get("loader", "urn:nhibernate-mapping-2.2"));
                return ((loader)(x));
            }
            set {
                this.SetElement(XName.Get("loader", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public sqlinsert sqlinsert {
            get {
                XElement x = this.GetElement(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"));
                return ((sqlinsert)(x));
            }
            set {
                this.SetElement(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public sqlupdate sqlupdate {
            get {
                XElement x = this.GetElement(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"));
                return ((sqlupdate)(x));
            }
            set {
                this.SetElement(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public sqldelete sqldelete {
            get {
                XElement x = this.GetElement(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"));
                return ((sqldelete)(x));
            }
            set {
                this.SetElement(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public sqldeleteall sqldeleteall {
            get {
                XElement x = this.GetElement(XName.Get("sql-delete-all", "urn:nhibernate-mapping-2.2"));
                return ((sqldeleteall)(x));
            }
            set {
                this.SetElement(XName.Get("sql-delete-all", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public IList<filter> filter {
            get {
                if ((this.filterField == null)) {
                    this.filterField = new XTypedList<filter>(this, LinqToXsdTypeManager.Instance, XName.Get("filter", "urn:nhibernate-mapping-2.2"));
                }
                return this.filterField;
            }
            set {
                if ((value == null)) {
                    this.filterField = null;
                }
                else {
                    if ((this.filterField == null)) {
                        this.filterField = XTypedList<filter>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("filter", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<filter>(this.filterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string access {
            get {
                XAttribute x = this.Attribute(XName.Get("access", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("access", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string table {
            get {
                XAttribute x = this.Attribute(XName.Get("table", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("table", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string schema {
            get {
                XAttribute x = this.Attribute(XName.Get("schema", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("schema", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string catalog {
            get {
                XAttribute x = this.Attribute(XName.Get("catalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("catalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string subselect1 {
            get {
                XAttribute x = this.Attribute(XName.Get("subselect", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("subselect", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string lazy {
            get {
                XAttribute x = this.Attribute(XName.Get("lazy", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("lazy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool inverse {
            get {
                XAttribute x = this.Attribute(XName.Get("inverse", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, inverseDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("inverse", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool mutable {
            get {
                XAttribute x = this.Attribute(XName.Get("mutable", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, mutableDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("mutable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string cascade {
            get {
                XAttribute x = this.Attribute(XName.Get("cascade", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("cascade", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string orderby {
            get {
                XAttribute x = this.Attribute(XName.Get("order-by", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("order-by", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @where {
            get {
                XAttribute x = this.Attribute(XName.Get("where", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("where", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> batchsize {
            get {
                XAttribute x = this.Attribute(XName.Get("batch-size", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("batch-size", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string outerjoin {
            get {
                XAttribute x = this.Attribute(XName.Get("outer-join", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("outer-join", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string fetch {
            get {
                XAttribute x = this.Attribute(XName.Get("fetch", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("fetch", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string persister {
            get {
                XAttribute x = this.Attribute(XName.Get("persister", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("persister", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string collectiontype {
            get {
                XAttribute x = this.Attribute(XName.Get("collection-type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("collection-type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string check {
            get {
                XAttribute x = this.Attribute(XName.Get("check", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("check", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool optimisticlock {
            get {
                XAttribute x = this.Attribute(XName.Get("optimistic-lock", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, optimisticlockDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("optimistic-lock", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool embedxml {
            get {
                XAttribute x = this.Attribute(XName.Get("embed-xml", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, embedxmlDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("embed-xml", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The concrete collection should use a generic version or an object-based version.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> generic {
            get {
                XAttribute x = this.Attribute(XName.Get("generic", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("generic", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("list", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static list Load(string xmlFile) {
            return XTypedServices.Load<list>(xmlFile);
        }
        
        public static list Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<list>(xmlFile);
        }
        
        public static list Parse(string xml) {
            return XTypedServices.Parse<list>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<list>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(meta));
            localElementDictionary.Add(XName.Get("subselect", "urn:nhibernate-mapping-2.2"), typeof(subselect));
            localElementDictionary.Add(XName.Get("cache", "urn:nhibernate-mapping-2.2"), typeof(cache));
            localElementDictionary.Add(XName.Get("synchronize", "urn:nhibernate-mapping-2.2"), typeof(synchronize));
            localElementDictionary.Add(XName.Get("comment", "urn:nhibernate-mapping-2.2"), typeof(comment));
            localElementDictionary.Add(XName.Get("key", "urn:nhibernate-mapping-2.2"), typeof(key));
            localElementDictionary.Add(XName.Get("index", "urn:nhibernate-mapping-2.2"), typeof(index));
            localElementDictionary.Add(XName.Get("list-index", "urn:nhibernate-mapping-2.2"), typeof(listindex));
            localElementDictionary.Add(XName.Get("element", "urn:nhibernate-mapping-2.2"), typeof(element));
            localElementDictionary.Add(XName.Get("one-to-many", "urn:nhibernate-mapping-2.2"), typeof(onetomany));
            localElementDictionary.Add(XName.Get("many-to-many", "urn:nhibernate-mapping-2.2"), typeof(manytomany));
            localElementDictionary.Add(XName.Get("composite-element", "urn:nhibernate-mapping-2.2"), typeof(compositeelement));
            localElementDictionary.Add(XName.Get("many-to-any", "urn:nhibernate-mapping-2.2"), typeof(manytoany));
            localElementDictionary.Add(XName.Get("loader", "urn:nhibernate-mapping-2.2"), typeof(loader));
            localElementDictionary.Add(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"), typeof(sqlinsert));
            localElementDictionary.Add(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"), typeof(sqlupdate));
            localElementDictionary.Add(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"), typeof(sqldelete));
            localElementDictionary.Add(XName.Get("sql-delete-all", "urn:nhibernate-mapping-2.2"), typeof(sqldeleteall));
            localElementDictionary.Add(XName.Get("filter", "urn:nhibernate-mapping-2.2"), typeof(filter));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (column?)
    /// </para>
    /// </summary>
    public partial class listindex : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator listindex(XElement xe) { return XTypedServices.ToXTypedElement<listindex>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static listindex() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("column", "urn:nhibernate-mapping-2.2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (column?)
        /// </para>
        /// </summary>
        public listindex() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (column?)
        /// </para>
        /// </summary>
        public column column {
            get {
                XElement x = this.GetElement(XName.Get("column", "urn:nhibernate-mapping-2.2"));
                return ((column)(x));
            }
            set {
                this.SetElement(XName.Get("column", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string column1 {
            get {
                XAttribute x = this.Attribute(XName.Get("column", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("column", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> @base {
            get {
                XAttribute x = this.Attribute(XName.Get("base", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("base", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("list-index", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static listindex Load(string xmlFile) {
            return XTypedServices.Load<listindex>(xmlFile);
        }
        
        public static listindex Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<listindex>(xmlFile);
        }
        
        public static listindex Parse(string xml) {
            return XTypedServices.Parse<listindex>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<listindex>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("column", "urn:nhibernate-mapping-2.2"), typeof(column));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (returnproperty)*
    /// </para>
    /// </summary>
    public partial class loadcollection : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<returnproperty> returnpropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string lockmodeDefaultValue = "read";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator loadcollection(XElement xe) { return XTypedServices.ToXTypedElement<loadcollection>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static loadcollection() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (returnproperty)*
        /// </para>
        /// </summary>
        public loadcollection() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (returnproperty)*
        /// </para>
        /// </summary>
        public IList<returnproperty> returnproperty {
            get {
                if ((this.returnpropertyField == null)) {
                    this.returnpropertyField = new XTypedList<returnproperty>(this, LinqToXsdTypeManager.Instance, XName.Get("return-property", "urn:nhibernate-mapping-2.2"));
                }
                return this.returnpropertyField;
            }
            set {
                if ((value == null)) {
                    this.returnpropertyField = null;
                }
                else {
                    if ((this.returnpropertyField == null)) {
                        this.returnpropertyField = XTypedList<returnproperty>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("return-property", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<returnproperty>(this.returnpropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string alias {
            get {
                XAttribute x = this.Attribute(XName.Get("alias", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("alias", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string role {
            get {
                XAttribute x = this.Attribute(XName.Get("role", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("role", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string lockmode {
            get {
                XAttribute x = this.Attribute(XName.Get("lock-mode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, lockmodeDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("lock-mode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("load-collection", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static loadcollection Load(string xmlFile) {
            return XTypedServices.Load<loadcollection>(xmlFile);
        }
        
        public static loadcollection Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<loadcollection>(xmlFile);
        }
        
        public static loadcollection Parse(string xml) {
            return XTypedServices.Parse<loadcollection>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<loadcollection>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("return-property", "urn:nhibernate-mapping-2.2"), typeof(returnproperty));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class loader : XTypedElement, IXMetaData {
        
         public static explicit operator loader(XElement xe) { return XTypedServices.ToXTypedElement<loader>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public loader() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string queryref {
            get {
                XAttribute x = this.Attribute(XName.Get("query-ref", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("query-ref", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("loader", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static loader Load(string xmlFile) {
            return XTypedServices.Load<loader>(xmlFile);
        }
        
        public static loader Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<loader>(xmlFile);
        }
        
        public static loader Parse(string xml) {
            return XTypedServices.Parse<loader>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<loader>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (metavalue*, column+)
    /// </para>
    /// </summary>
    public partial class manytoany : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<metavalue> metavalueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<column> columnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator manytoany(XElement xe) { return XTypedServices.ToXTypedElement<manytoany>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static manytoany() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("meta-value", "urn:nhibernate-mapping-2.2")), new NamedContentModelEntity(XName.Get("column", "urn:nhibernate-mapping-2.2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (metavalue*, column+)
        /// </para>
        /// </summary>
        public manytoany() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (metavalue*, column+)
        /// </para>
        /// </summary>
        public IList<metavalue> metavalue {
            get {
                if ((this.metavalueField == null)) {
                    this.metavalueField = new XTypedList<metavalue>(this, LinqToXsdTypeManager.Instance, XName.Get("meta-value", "urn:nhibernate-mapping-2.2"));
                }
                return this.metavalueField;
            }
            set {
                if ((value == null)) {
                    this.metavalueField = null;
                }
                else {
                    if ((this.metavalueField == null)) {
                        this.metavalueField = XTypedList<metavalue>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta-value", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<metavalue>(this.metavalueField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (metavalue*, column+)
        /// </para>
        /// </summary>
        public IList<column> column {
            get {
                if ((this.columnField == null)) {
                    this.columnField = new XTypedList<column>(this, LinqToXsdTypeManager.Instance, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                }
                return this.columnField;
            }
            set {
                if ((value == null)) {
                    this.columnField = null;
                }
                else {
                    if ((this.columnField == null)) {
                        this.columnField = XTypedList<column>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<column>(this.columnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string column1 {
            get {
                XAttribute x = this.Attribute(XName.Get("column", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("column", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string idtype {
            get {
                XAttribute x = this.Attribute(XName.Get("id-type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id-type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string metatype {
            get {
                XAttribute x = this.Attribute(XName.Get("meta-type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("meta-type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("many-to-any", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static manytoany Load(string xmlFile) {
            return XTypedServices.Load<manytoany>(xmlFile);
        }
        
        public static manytoany Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<manytoany>(xmlFile);
        }
        
        public static manytoany Parse(string xml) {
            return XTypedServices.Parse<manytoany>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<manytoany>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta-value", "urn:nhibernate-mapping-2.2"), typeof(metavalue));
            localElementDictionary.Add(XName.Get("column", "urn:nhibernate-mapping-2.2"), typeof(column));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (meta*, (column | formula)*, filter*)
    /// </para>
    /// </summary>
    public partial class manytomany : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<meta> metaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<column> columnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<formula> formulaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<filter> filterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool embedxmlDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string notfoundDefaultValue = "exception";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool uniqueDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator manytomany(XElement xe) { return XTypedServices.ToXTypedElement<manytomany>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static manytomany() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (meta*, (column | formula)*, filter*)
        /// </para>
        /// </summary>
        public manytomany() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, (column | formula)*, filter*)
        /// </para>
        /// </summary>
        public IList<meta> meta {
            get {
                if ((this.metaField == null)) {
                    this.metaField = new XTypedList<meta>(this, LinqToXsdTypeManager.Instance, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                }
                return this.metaField;
            }
            set {
                if ((value == null)) {
                    this.metaField = null;
                }
                else {
                    if ((this.metaField == null)) {
                        this.metaField = XTypedList<meta>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<meta>(this.metaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, (column | formula)*, filter*)
        /// </para>
        /// </summary>
        public IList<column> column {
            get {
                if ((this.columnField == null)) {
                    this.columnField = new XTypedList<column>(this, LinqToXsdTypeManager.Instance, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                }
                return this.columnField;
            }
            set {
                if ((value == null)) {
                    this.columnField = null;
                }
                else {
                    if ((this.columnField == null)) {
                        this.columnField = XTypedList<column>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<column>(this.columnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, (column | formula)*, filter*)
        /// </para>
        /// </summary>
        public IList<formula> formula {
            get {
                if ((this.formulaField == null)) {
                    this.formulaField = new XTypedList<formula>(this, LinqToXsdTypeManager.Instance, XName.Get("formula", "urn:nhibernate-mapping-2.2"));
                }
                return this.formulaField;
            }
            set {
                if ((value == null)) {
                    this.formulaField = null;
                }
                else {
                    if ((this.formulaField == null)) {
                        this.formulaField = XTypedList<formula>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("formula", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<formula>(this.formulaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, (column | formula)*, filter*)
        /// </para>
        /// </summary>
        public IList<filter> filter {
            get {
                if ((this.filterField == null)) {
                    this.filterField = new XTypedList<filter>(this, LinqToXsdTypeManager.Instance, XName.Get("filter", "urn:nhibernate-mapping-2.2"));
                }
                return this.filterField;
            }
            set {
                if ((value == null)) {
                    this.filterField = null;
                }
                else {
                    if ((this.filterField == null)) {
                        this.filterField = XTypedList<filter>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("filter", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<filter>(this.filterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @class {
            get {
                XAttribute x = this.Attribute(XName.Get("class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool embedxml {
            get {
                XAttribute x = this.Attribute(XName.Get("embed-xml", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, embedxmlDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("embed-xml", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string entityname {
            get {
                XAttribute x = this.Attribute(XName.Get("entity-name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("entity-name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string column1 {
            get {
                XAttribute x = this.Attribute(XName.Get("column", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("column", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string formula1 {
            get {
                XAttribute x = this.Attribute(XName.Get("formula", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("formula", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string notfound {
            get {
                XAttribute x = this.Attribute(XName.Get("not-found", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, notfoundDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("not-found", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string outerjoin {
            get {
                XAttribute x = this.Attribute(XName.Get("outer-join", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("outer-join", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string fetch {
            get {
                XAttribute x = this.Attribute(XName.Get("fetch", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("fetch", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string lazy {
            get {
                XAttribute x = this.Attribute(XName.Get("lazy", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("lazy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string foreignkey {
            get {
                XAttribute x = this.Attribute(XName.Get("foreign-key", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("foreign-key", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool unique {
            get {
                XAttribute x = this.Attribute(XName.Get("unique", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, uniqueDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("unique", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @where {
            get {
                XAttribute x = this.Attribute(XName.Get("where", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("where", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string orderby {
            get {
                XAttribute x = this.Attribute(XName.Get("order-by", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("order-by", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string propertyref {
            get {
                XAttribute x = this.Attribute(XName.Get("property-ref", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("property-ref", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("many-to-many", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static manytomany Load(string xmlFile) {
            return XTypedServices.Load<manytomany>(xmlFile);
        }
        
        public static manytomany Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<manytomany>(xmlFile);
        }
        
        public static manytomany Parse(string xml) {
            return XTypedServices.Parse<manytomany>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<manytomany>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(meta));
            localElementDictionary.Add(XName.Get("column", "urn:nhibernate-mapping-2.2"), typeof(column));
            localElementDictionary.Add(XName.Get("formula", "urn:nhibernate-mapping-2.2"), typeof(formula));
            localElementDictionary.Add(XName.Get("filter", "urn:nhibernate-mapping-2.2"), typeof(filter));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (meta*, (column | formula)*)
    /// </para>
    /// </summary>
    public partial class manytoone : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<meta> metaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<column> columnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<formula> formulaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool uniqueDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool updateDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool insertDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool optimisticlockDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string notfoundDefaultValue = "exception";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool embedxmlDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator manytoone(XElement xe) { return XTypedServices.ToXTypedElement<manytoone>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static manytoone() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (meta*, (column | formula)*)
        /// </para>
        /// </summary>
        public manytoone() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, (column | formula)*)
        /// </para>
        /// </summary>
        public IList<meta> meta {
            get {
                if ((this.metaField == null)) {
                    this.metaField = new XTypedList<meta>(this, LinqToXsdTypeManager.Instance, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                }
                return this.metaField;
            }
            set {
                if ((value == null)) {
                    this.metaField = null;
                }
                else {
                    if ((this.metaField == null)) {
                        this.metaField = XTypedList<meta>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<meta>(this.metaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, (column | formula)*)
        /// </para>
        /// </summary>
        public IList<column> column {
            get {
                if ((this.columnField == null)) {
                    this.columnField = new XTypedList<column>(this, LinqToXsdTypeManager.Instance, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                }
                return this.columnField;
            }
            set {
                if ((value == null)) {
                    this.columnField = null;
                }
                else {
                    if ((this.columnField == null)) {
                        this.columnField = XTypedList<column>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<column>(this.columnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, (column | formula)*)
        /// </para>
        /// </summary>
        public IList<formula> formula {
            get {
                if ((this.formulaField == null)) {
                    this.formulaField = new XTypedList<formula>(this, LinqToXsdTypeManager.Instance, XName.Get("formula", "urn:nhibernate-mapping-2.2"));
                }
                return this.formulaField;
            }
            set {
                if ((value == null)) {
                    this.formulaField = null;
                }
                else {
                    if ((this.formulaField == null)) {
                        this.formulaField = XTypedList<formula>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("formula", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<formula>(this.formulaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string access {
            get {
                XAttribute x = this.Attribute(XName.Get("access", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("access", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @class {
            get {
                XAttribute x = this.Attribute(XName.Get("class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string entityname {
            get {
                XAttribute x = this.Attribute(XName.Get("entity-name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("entity-name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string column1 {
            get {
                XAttribute x = this.Attribute(XName.Get("column", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("column", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> notnull {
            get {
                XAttribute x = this.Attribute(XName.Get("not-null", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("not-null", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool unique {
            get {
                XAttribute x = this.Attribute(XName.Get("unique", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, uniqueDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("unique", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string uniquekey {
            get {
                XAttribute x = this.Attribute(XName.Get("unique-key", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("unique-key", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string index {
            get {
                XAttribute x = this.Attribute(XName.Get("index", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("index", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string cascade {
            get {
                XAttribute x = this.Attribute(XName.Get("cascade", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("cascade", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string outerjoin {
            get {
                XAttribute x = this.Attribute(XName.Get("outer-join", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("outer-join", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string fetch {
            get {
                XAttribute x = this.Attribute(XName.Get("fetch", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("fetch", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool update {
            get {
                XAttribute x = this.Attribute(XName.Get("update", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, updateDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("update", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool insert {
            get {
                XAttribute x = this.Attribute(XName.Get("insert", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, insertDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("insert", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool optimisticlock {
            get {
                XAttribute x = this.Attribute(XName.Get("optimistic-lock", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, optimisticlockDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("optimistic-lock", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string foreignkey {
            get {
                XAttribute x = this.Attribute(XName.Get("foreign-key", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("foreign-key", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string propertyref {
            get {
                XAttribute x = this.Attribute(XName.Get("property-ref", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("property-ref", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string formula1 {
            get {
                XAttribute x = this.Attribute(XName.Get("formula", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("formula", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string lazy {
            get {
                XAttribute x = this.Attribute(XName.Get("lazy", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("lazy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string notfound {
            get {
                XAttribute x = this.Attribute(XName.Get("not-found", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, notfoundDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("not-found", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool embedxml {
            get {
                XAttribute x = this.Attribute(XName.Get("embed-xml", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, embedxmlDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("embed-xml", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("many-to-one", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static manytoone Load(string xmlFile) {
            return XTypedServices.Load<manytoone>(xmlFile);
        }
        
        public static manytoone Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<manytoone>(xmlFile);
        }
        
        public static manytoone Parse(string xml) {
            return XTypedServices.Parse<manytoone>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<manytoone>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(meta));
            localElementDictionary.Add(XName.Get("column", "urn:nhibernate-mapping-2.2"), typeof(column));
            localElementDictionary.Add(XName.Get("formula", "urn:nhibernate-mapping-2.2"), typeof(formula));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (mapkey | compositemapkey | mapkeymanytomany | index | compositeindex | indexmanytomany | indexmanytoany), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
    /// </para>
    /// </summary>
    public partial class map : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<meta> metaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<synchronize> synchronizeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<filter> filterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool inverseDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool mutableDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool optimisticlockDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool embedxmlDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator map(XElement xe) { return XTypedServices.ToXTypedElement<map>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static map() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (mapkey | compositemapkey | mapkeymanytomany | index | compositeindex | indexmanytomany | indexmanytoany), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public map() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (mapkey | compositemapkey | mapkeymanytomany | index | compositeindex | indexmanytomany | indexmanytoany), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public IList<meta> meta {
            get {
                if ((this.metaField == null)) {
                    this.metaField = new XTypedList<meta>(this, LinqToXsdTypeManager.Instance, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                }
                return this.metaField;
            }
            set {
                if ((value == null)) {
                    this.metaField = null;
                }
                else {
                    if ((this.metaField == null)) {
                        this.metaField = XTypedList<meta>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<meta>(this.metaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (mapkey | compositemapkey | mapkeymanytomany | index | compositeindex | indexmanytomany | indexmanytoany), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public subselect subselect {
            get {
                XElement x = this.GetElement(XName.Get("subselect", "urn:nhibernate-mapping-2.2"));
                return ((subselect)(x));
            }
            set {
                this.SetElement(XName.Get("subselect", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (mapkey | compositemapkey | mapkeymanytomany | index | compositeindex | indexmanytomany | indexmanytoany), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public cache cache {
            get {
                XElement x = this.GetElement(XName.Get("cache", "urn:nhibernate-mapping-2.2"));
                return ((cache)(x));
            }
            set {
                this.SetElement(XName.Get("cache", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (mapkey | compositemapkey | mapkeymanytomany | index | compositeindex | indexmanytomany | indexmanytoany), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public IList<synchronize> synchronize {
            get {
                if ((this.synchronizeField == null)) {
                    this.synchronizeField = new XTypedList<synchronize>(this, LinqToXsdTypeManager.Instance, XName.Get("synchronize", "urn:nhibernate-mapping-2.2"));
                }
                return this.synchronizeField;
            }
            set {
                if ((value == null)) {
                    this.synchronizeField = null;
                }
                else {
                    if ((this.synchronizeField == null)) {
                        this.synchronizeField = XTypedList<synchronize>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("synchronize", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<synchronize>(this.synchronizeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (mapkey | compositemapkey | mapkeymanytomany | index | compositeindex | indexmanytomany | indexmanytoany), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public comment comment {
            get {
                XElement x = this.GetElement(XName.Get("comment", "urn:nhibernate-mapping-2.2"));
                return ((comment)(x));
            }
            set {
                this.SetElement(XName.Get("comment", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (mapkey | compositemapkey | mapkeymanytomany | index | compositeindex | indexmanytomany | indexmanytoany), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public key key {
            get {
                XElement x = this.GetElement(XName.Get("key", "urn:nhibernate-mapping-2.2"));
                return ((key)(x));
            }
            set {
                this.SetElement(XName.Get("key", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (mapkey | compositemapkey | mapkeymanytomany | index | compositeindex | indexmanytomany | indexmanytoany), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public mapkey mapkey {
            get {
                XElement x = this.GetElement(XName.Get("map-key", "urn:nhibernate-mapping-2.2"));
                return ((mapkey)(x));
            }
            set {
                this.SetElement(XName.Get("map-key", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (mapkey | compositemapkey | mapkeymanytomany | index | compositeindex | indexmanytomany | indexmanytoany), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public compositemapkey compositemapkey {
            get {
                XElement x = this.GetElement(XName.Get("composite-map-key", "urn:nhibernate-mapping-2.2"));
                return ((compositemapkey)(x));
            }
            set {
                this.SetElement(XName.Get("composite-map-key", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (mapkey | compositemapkey | mapkeymanytomany | index | compositeindex | indexmanytomany | indexmanytoany), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public mapkeymanytomany mapkeymanytomany {
            get {
                XElement x = this.GetElement(XName.Get("map-key-many-to-many", "urn:nhibernate-mapping-2.2"));
                return ((mapkeymanytomany)(x));
            }
            set {
                this.SetElement(XName.Get("map-key-many-to-many", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (mapkey | compositemapkey | mapkeymanytomany | index | compositeindex | indexmanytomany | indexmanytoany), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public index index {
            get {
                XElement x = this.GetElement(XName.Get("index", "urn:nhibernate-mapping-2.2"));
                return ((index)(x));
            }
            set {
                this.SetElement(XName.Get("index", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (mapkey | compositemapkey | mapkeymanytomany | index | compositeindex | indexmanytomany | indexmanytoany), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public compositeindex compositeindex {
            get {
                XElement x = this.GetElement(XName.Get("composite-index", "urn:nhibernate-mapping-2.2"));
                return ((compositeindex)(x));
            }
            set {
                this.SetElement(XName.Get("composite-index", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (mapkey | compositemapkey | mapkeymanytomany | index | compositeindex | indexmanytomany | indexmanytoany), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public indexmanytomany indexmanytomany {
            get {
                XElement x = this.GetElement(XName.Get("index-many-to-many", "urn:nhibernate-mapping-2.2"));
                return ((indexmanytomany)(x));
            }
            set {
                this.SetElement(XName.Get("index-many-to-many", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (mapkey | compositemapkey | mapkeymanytomany | index | compositeindex | indexmanytomany | indexmanytoany), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public indexmanytoany indexmanytoany {
            get {
                XElement x = this.GetElement(XName.Get("index-many-to-any", "urn:nhibernate-mapping-2.2"));
                return ((indexmanytoany)(x));
            }
            set {
                this.SetElement(XName.Get("index-many-to-any", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (mapkey | compositemapkey | mapkeymanytomany | index | compositeindex | indexmanytomany | indexmanytoany), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public element element {
            get {
                XElement x = this.GetElement(XName.Get("element", "urn:nhibernate-mapping-2.2"));
                return ((element)(x));
            }
            set {
                this.SetElement(XName.Get("element", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (mapkey | compositemapkey | mapkeymanytomany | index | compositeindex | indexmanytomany | indexmanytoany), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public onetomany onetomany {
            get {
                XElement x = this.GetElement(XName.Get("one-to-many", "urn:nhibernate-mapping-2.2"));
                return ((onetomany)(x));
            }
            set {
                this.SetElement(XName.Get("one-to-many", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (mapkey | compositemapkey | mapkeymanytomany | index | compositeindex | indexmanytomany | indexmanytoany), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public manytomany manytomany {
            get {
                XElement x = this.GetElement(XName.Get("many-to-many", "urn:nhibernate-mapping-2.2"));
                return ((manytomany)(x));
            }
            set {
                this.SetElement(XName.Get("many-to-many", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (mapkey | compositemapkey | mapkeymanytomany | index | compositeindex | indexmanytomany | indexmanytoany), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public compositeelement compositeelement {
            get {
                XElement x = this.GetElement(XName.Get("composite-element", "urn:nhibernate-mapping-2.2"));
                return ((compositeelement)(x));
            }
            set {
                this.SetElement(XName.Get("composite-element", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (mapkey | compositemapkey | mapkeymanytomany | index | compositeindex | indexmanytomany | indexmanytoany), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public manytoany manytoany {
            get {
                XElement x = this.GetElement(XName.Get("many-to-any", "urn:nhibernate-mapping-2.2"));
                return ((manytoany)(x));
            }
            set {
                this.SetElement(XName.Get("many-to-any", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (mapkey | compositemapkey | mapkeymanytomany | index | compositeindex | indexmanytomany | indexmanytoany), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public loader loader {
            get {
                XElement x = this.GetElement(XName.Get("loader", "urn:nhibernate-mapping-2.2"));
                return ((loader)(x));
            }
            set {
                this.SetElement(XName.Get("loader", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (mapkey | compositemapkey | mapkeymanytomany | index | compositeindex | indexmanytomany | indexmanytoany), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public sqlinsert sqlinsert {
            get {
                XElement x = this.GetElement(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"));
                return ((sqlinsert)(x));
            }
            set {
                this.SetElement(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (mapkey | compositemapkey | mapkeymanytomany | index | compositeindex | indexmanytomany | indexmanytoany), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public sqlupdate sqlupdate {
            get {
                XElement x = this.GetElement(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"));
                return ((sqlupdate)(x));
            }
            set {
                this.SetElement(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (mapkey | compositemapkey | mapkeymanytomany | index | compositeindex | indexmanytomany | indexmanytoany), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public sqldelete sqldelete {
            get {
                XElement x = this.GetElement(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"));
                return ((sqldelete)(x));
            }
            set {
                this.SetElement(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (mapkey | compositemapkey | mapkeymanytomany | index | compositeindex | indexmanytomany | indexmanytoany), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public sqldeleteall sqldeleteall {
            get {
                XElement x = this.GetElement(XName.Get("sql-delete-all", "urn:nhibernate-mapping-2.2"));
                return ((sqldeleteall)(x));
            }
            set {
                this.SetElement(XName.Get("sql-delete-all", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (mapkey | compositemapkey | mapkeymanytomany | index | compositeindex | indexmanytomany | indexmanytoany), (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public IList<filter> filter {
            get {
                if ((this.filterField == null)) {
                    this.filterField = new XTypedList<filter>(this, LinqToXsdTypeManager.Instance, XName.Get("filter", "urn:nhibernate-mapping-2.2"));
                }
                return this.filterField;
            }
            set {
                if ((value == null)) {
                    this.filterField = null;
                }
                else {
                    if ((this.filterField == null)) {
                        this.filterField = XTypedList<filter>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("filter", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<filter>(this.filterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string access {
            get {
                XAttribute x = this.Attribute(XName.Get("access", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("access", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string table {
            get {
                XAttribute x = this.Attribute(XName.Get("table", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("table", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string schema {
            get {
                XAttribute x = this.Attribute(XName.Get("schema", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("schema", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string catalog {
            get {
                XAttribute x = this.Attribute(XName.Get("catalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("catalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string subselect1 {
            get {
                XAttribute x = this.Attribute(XName.Get("subselect", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("subselect", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string lazy {
            get {
                XAttribute x = this.Attribute(XName.Get("lazy", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("lazy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool inverse {
            get {
                XAttribute x = this.Attribute(XName.Get("inverse", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, inverseDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("inverse", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool mutable {
            get {
                XAttribute x = this.Attribute(XName.Get("mutable", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, mutableDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("mutable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string cascade {
            get {
                XAttribute x = this.Attribute(XName.Get("cascade", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("cascade", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string orderby {
            get {
                XAttribute x = this.Attribute(XName.Get("order-by", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("order-by", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @where {
            get {
                XAttribute x = this.Attribute(XName.Get("where", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("where", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> batchsize {
            get {
                XAttribute x = this.Attribute(XName.Get("batch-size", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("batch-size", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string outerjoin {
            get {
                XAttribute x = this.Attribute(XName.Get("outer-join", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("outer-join", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string fetch {
            get {
                XAttribute x = this.Attribute(XName.Get("fetch", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("fetch", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string persister {
            get {
                XAttribute x = this.Attribute(XName.Get("persister", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("persister", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string collectiontype {
            get {
                XAttribute x = this.Attribute(XName.Get("collection-type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("collection-type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string check {
            get {
                XAttribute x = this.Attribute(XName.Get("check", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("check", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool optimisticlock {
            get {
                XAttribute x = this.Attribute(XName.Get("optimistic-lock", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, optimisticlockDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("optimistic-lock", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool embedxml {
            get {
                XAttribute x = this.Attribute(XName.Get("embed-xml", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, embedxmlDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("embed-xml", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The concrete collection should use a generic version or an object-based version.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> generic {
            get {
                XAttribute x = this.Attribute(XName.Get("generic", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("generic", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string sort {
            get {
                XAttribute x = this.Attribute(XName.Get("sort", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("sort", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("map", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static map Load(string xmlFile) {
            return XTypedServices.Load<map>(xmlFile);
        }
        
        public static map Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<map>(xmlFile);
        }
        
        public static map Parse(string xml) {
            return XTypedServices.Parse<map>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<map>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(meta));
            localElementDictionary.Add(XName.Get("subselect", "urn:nhibernate-mapping-2.2"), typeof(subselect));
            localElementDictionary.Add(XName.Get("cache", "urn:nhibernate-mapping-2.2"), typeof(cache));
            localElementDictionary.Add(XName.Get("synchronize", "urn:nhibernate-mapping-2.2"), typeof(synchronize));
            localElementDictionary.Add(XName.Get("comment", "urn:nhibernate-mapping-2.2"), typeof(comment));
            localElementDictionary.Add(XName.Get("key", "urn:nhibernate-mapping-2.2"), typeof(key));
            localElementDictionary.Add(XName.Get("map-key", "urn:nhibernate-mapping-2.2"), typeof(mapkey));
            localElementDictionary.Add(XName.Get("composite-map-key", "urn:nhibernate-mapping-2.2"), typeof(compositemapkey));
            localElementDictionary.Add(XName.Get("map-key-many-to-many", "urn:nhibernate-mapping-2.2"), typeof(mapkeymanytomany));
            localElementDictionary.Add(XName.Get("index", "urn:nhibernate-mapping-2.2"), typeof(index));
            localElementDictionary.Add(XName.Get("composite-index", "urn:nhibernate-mapping-2.2"), typeof(compositeindex));
            localElementDictionary.Add(XName.Get("index-many-to-many", "urn:nhibernate-mapping-2.2"), typeof(indexmanytomany));
            localElementDictionary.Add(XName.Get("index-many-to-any", "urn:nhibernate-mapping-2.2"), typeof(indexmanytoany));
            localElementDictionary.Add(XName.Get("element", "urn:nhibernate-mapping-2.2"), typeof(element));
            localElementDictionary.Add(XName.Get("one-to-many", "urn:nhibernate-mapping-2.2"), typeof(onetomany));
            localElementDictionary.Add(XName.Get("many-to-many", "urn:nhibernate-mapping-2.2"), typeof(manytomany));
            localElementDictionary.Add(XName.Get("composite-element", "urn:nhibernate-mapping-2.2"), typeof(compositeelement));
            localElementDictionary.Add(XName.Get("many-to-any", "urn:nhibernate-mapping-2.2"), typeof(manytoany));
            localElementDictionary.Add(XName.Get("loader", "urn:nhibernate-mapping-2.2"), typeof(loader));
            localElementDictionary.Add(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"), typeof(sqlinsert));
            localElementDictionary.Add(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"), typeof(sqlupdate));
            localElementDictionary.Add(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"), typeof(sqldelete));
            localElementDictionary.Add(XName.Get("sql-delete-all", "urn:nhibernate-mapping-2.2"), typeof(sqldeleteall));
            localElementDictionary.Add(XName.Get("filter", "urn:nhibernate-mapping-2.2"), typeof(filter));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((column | formula)*)
    /// </para>
    /// </summary>
    public partial class mapkey : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<column> columnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<formula> formulaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator mapkey(XElement xe) { return XTypedServices.ToXTypedElement<mapkey>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static mapkey() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((column | formula)*)
        /// </para>
        /// </summary>
        public mapkey() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((column | formula)*)
        /// </para>
        /// </summary>
        public IList<column> column {
            get {
                if ((this.columnField == null)) {
                    this.columnField = new XTypedList<column>(this, LinqToXsdTypeManager.Instance, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                }
                return this.columnField;
            }
            set {
                if ((value == null)) {
                    this.columnField = null;
                }
                else {
                    if ((this.columnField == null)) {
                        this.columnField = XTypedList<column>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<column>(this.columnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((column | formula)*)
        /// </para>
        /// </summary>
        public IList<formula> formula {
            get {
                if ((this.formulaField == null)) {
                    this.formulaField = new XTypedList<formula>(this, LinqToXsdTypeManager.Instance, XName.Get("formula", "urn:nhibernate-mapping-2.2"));
                }
                return this.formulaField;
            }
            set {
                if ((value == null)) {
                    this.formulaField = null;
                }
                else {
                    if ((this.formulaField == null)) {
                        this.formulaField = XTypedList<formula>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("formula", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<formula>(this.formulaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string column1 {
            get {
                XAttribute x = this.Attribute(XName.Get("column", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("column", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string formula1 {
            get {
                XAttribute x = this.Attribute(XName.Get("formula", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("formula", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string type {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> length {
            get {
                XAttribute x = this.Attribute(XName.Get("length", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("length", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("map-key", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static mapkey Load(string xmlFile) {
            return XTypedServices.Load<mapkey>(xmlFile);
        }
        
        public static mapkey Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<mapkey>(xmlFile);
        }
        
        public static mapkey Parse(string xml) {
            return XTypedServices.Parse<mapkey>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<mapkey>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("column", "urn:nhibernate-mapping-2.2"), typeof(column));
            localElementDictionary.Add(XName.Get("formula", "urn:nhibernate-mapping-2.2"), typeof(formula));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((column | formula)*)
    /// </para>
    /// </summary>
    public partial class mapkeymanytomany : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<column> columnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<formula> formulaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator mapkeymanytomany(XElement xe) { return XTypedServices.ToXTypedElement<mapkeymanytomany>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static mapkeymanytomany() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((column | formula)*)
        /// </para>
        /// </summary>
        public mapkeymanytomany() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((column | formula)*)
        /// </para>
        /// </summary>
        public IList<column> column {
            get {
                if ((this.columnField == null)) {
                    this.columnField = new XTypedList<column>(this, LinqToXsdTypeManager.Instance, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                }
                return this.columnField;
            }
            set {
                if ((value == null)) {
                    this.columnField = null;
                }
                else {
                    if ((this.columnField == null)) {
                        this.columnField = XTypedList<column>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<column>(this.columnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((column | formula)*)
        /// </para>
        /// </summary>
        public IList<formula> formula {
            get {
                if ((this.formulaField == null)) {
                    this.formulaField = new XTypedList<formula>(this, LinqToXsdTypeManager.Instance, XName.Get("formula", "urn:nhibernate-mapping-2.2"));
                }
                return this.formulaField;
            }
            set {
                if ((value == null)) {
                    this.formulaField = null;
                }
                else {
                    if ((this.formulaField == null)) {
                        this.formulaField = XTypedList<formula>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("formula", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<formula>(this.formulaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @class {
            get {
                XAttribute x = this.Attribute(XName.Get("class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string entityname {
            get {
                XAttribute x = this.Attribute(XName.Get("entity-name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("entity-name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string column1 {
            get {
                XAttribute x = this.Attribute(XName.Get("column", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("column", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string formula1 {
            get {
                XAttribute x = this.Attribute(XName.Get("formula", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("formula", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string foreignkey {
            get {
                XAttribute x = this.Attribute(XName.Get("foreign-key", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("foreign-key", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("map-key-many-to-many", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static mapkeymanytomany Load(string xmlFile) {
            return XTypedServices.Load<mapkeymanytomany>(xmlFile);
        }
        
        public static mapkeymanytomany Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<mapkeymanytomany>(xmlFile);
        }
        
        public static mapkeymanytomany Parse(string xml) {
            return XTypedServices.Parse<mapkeymanytomany>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<mapkeymanytomany>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("column", "urn:nhibernate-mapping-2.2"), typeof(column));
            localElementDictionary.Add(XName.Get("formula", "urn:nhibernate-mapping-2.2"), typeof(formula));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class meta : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool inheritDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
         public static explicit operator meta(XElement xe) { return XTypedServices.ToXTypedElement<meta>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public meta() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string attribute {
            get {
                XAttribute x = this.Attribute(XName.Get("attribute", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("attribute", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool inherit {
            get {
                XAttribute x = this.Attribute(XName.Get("inherit", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, inheritDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("inherit", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("meta", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static meta Load(string xmlFile) {
            return XTypedServices.Load<meta>(xmlFile);
        }
        
        public static meta Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<meta>(xmlFile);
        }
        
        public static meta Parse(string xml) {
            return XTypedServices.Parse<meta>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<meta>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class metavalue : XTypedElement, IXMetaData {
        
         public static explicit operator metavalue(XElement xe) { return XTypedServices.ToXTypedElement<metavalue>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public metavalue() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string value {
            get {
                XAttribute x = this.Attribute(XName.Get("value", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string @class {
            get {
                XAttribute x = this.Attribute(XName.Get("class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("meta-value", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static metavalue Load(string xmlFile) {
            return XTypedServices.Load<metavalue>(xmlFile);
        }
        
        public static metavalue Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<metavalue>(xmlFile);
        }
        
        public static metavalue Parse(string xml) {
            return XTypedServices.Parse<metavalue>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<metavalue>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((property | manytoone | component | dynamiccomponent | any)*)
    /// </para>
    /// </summary>
    public partial class naturalid : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<property> propertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<manytoone> manytooneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<component> componentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dynamiccomponent> dynamiccomponentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<any> anyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool mutableDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator naturalid(XElement xe) { return XTypedServices.ToXTypedElement<naturalid>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static naturalid() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((property | manytoone | component | dynamiccomponent | any)*)
        /// </para>
        /// </summary>
        public naturalid() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((property | manytoone | component | dynamiccomponent | any)*)
        /// </para>
        /// </summary>
        public IList<property> property {
            get {
                if ((this.propertyField == null)) {
                    this.propertyField = new XTypedList<property>(this, LinqToXsdTypeManager.Instance, XName.Get("property", "urn:nhibernate-mapping-2.2"));
                }
                return this.propertyField;
            }
            set {
                if ((value == null)) {
                    this.propertyField = null;
                }
                else {
                    if ((this.propertyField == null)) {
                        this.propertyField = XTypedList<property>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("property", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<property>(this.propertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((property | manytoone | component | dynamiccomponent | any)*)
        /// </para>
        /// </summary>
        public IList<manytoone> manytoone {
            get {
                if ((this.manytooneField == null)) {
                    this.manytooneField = new XTypedList<manytoone>(this, LinqToXsdTypeManager.Instance, XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"));
                }
                return this.manytooneField;
            }
            set {
                if ((value == null)) {
                    this.manytooneField = null;
                }
                else {
                    if ((this.manytooneField == null)) {
                        this.manytooneField = XTypedList<manytoone>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<manytoone>(this.manytooneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((property | manytoone | component | dynamiccomponent | any)*)
        /// </para>
        /// </summary>
        public IList<component> component {
            get {
                if ((this.componentField == null)) {
                    this.componentField = new XTypedList<component>(this, LinqToXsdTypeManager.Instance, XName.Get("component", "urn:nhibernate-mapping-2.2"));
                }
                return this.componentField;
            }
            set {
                if ((value == null)) {
                    this.componentField = null;
                }
                else {
                    if ((this.componentField == null)) {
                        this.componentField = XTypedList<component>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("component", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<component>(this.componentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((property | manytoone | component | dynamiccomponent | any)*)
        /// </para>
        /// </summary>
        public IList<dynamiccomponent> dynamiccomponent {
            get {
                if ((this.dynamiccomponentField == null)) {
                    this.dynamiccomponentField = new XTypedList<dynamiccomponent>(this, LinqToXsdTypeManager.Instance, XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"));
                }
                return this.dynamiccomponentField;
            }
            set {
                if ((value == null)) {
                    this.dynamiccomponentField = null;
                }
                else {
                    if ((this.dynamiccomponentField == null)) {
                        this.dynamiccomponentField = XTypedList<dynamiccomponent>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<dynamiccomponent>(this.dynamiccomponentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((property | manytoone | component | dynamiccomponent | any)*)
        /// </para>
        /// </summary>
        public IList<any> any {
            get {
                if ((this.anyField == null)) {
                    this.anyField = new XTypedList<any>(this, LinqToXsdTypeManager.Instance, XName.Get("any", "urn:nhibernate-mapping-2.2"));
                }
                return this.anyField;
            }
            set {
                if ((value == null)) {
                    this.anyField = null;
                }
                else {
                    if ((this.anyField == null)) {
                        this.anyField = XTypedList<any>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("any", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<any>(this.anyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool mutable {
            get {
                XAttribute x = this.Attribute(XName.Get("mutable", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, mutableDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("mutable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("natural-id", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static naturalid Load(string xmlFile) {
            return XTypedServices.Load<naturalid>(xmlFile);
        }
        
        public static naturalid Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<naturalid>(xmlFile);
        }
        
        public static naturalid Parse(string xml) {
            return XTypedServices.Parse<naturalid>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<naturalid>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("property", "urn:nhibernate-mapping-2.2"), typeof(property));
            localElementDictionary.Add(XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"), typeof(manytoone));
            localElementDictionary.Add(XName.Get("component", "urn:nhibernate-mapping-2.2"), typeof(component));
            localElementDictionary.Add(XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"), typeof(dynamiccomponent));
            localElementDictionary.Add(XName.Get("any", "urn:nhibernate-mapping-2.2"), typeof(any));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (parent?, (property | manytoone | any | nestedcompositeelement1)*)
    /// </para>
    /// </summary>
    public partial class nestedcompositeelement : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<property> propertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<manytoone> manytooneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<any> anyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<nestedcompositeelement> nestedcompositeelement1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator nestedcompositeelement(XElement xe) { return XTypedServices.ToXTypedElement<nestedcompositeelement>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nestedcompositeelement() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (parent?, (property | manytoone | any | nestedcompositeelement1)*)
        /// </para>
        /// </summary>
        public nestedcompositeelement() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (parent?, (property | manytoone | any | nestedcompositeelement1)*)
        /// </para>
        /// </summary>
        public parent parent {
            get {
                XElement x = this.GetElement(XName.Get("parent", "urn:nhibernate-mapping-2.2"));
                return ((parent)(x));
            }
            set {
                this.SetElement(XName.Get("parent", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (parent?, (property | manytoone | any | nestedcompositeelement1)*)
        /// </para>
        /// </summary>
        public IList<property> property {
            get {
                if ((this.propertyField == null)) {
                    this.propertyField = new XTypedList<property>(this, LinqToXsdTypeManager.Instance, XName.Get("property", "urn:nhibernate-mapping-2.2"));
                }
                return this.propertyField;
            }
            set {
                if ((value == null)) {
                    this.propertyField = null;
                }
                else {
                    if ((this.propertyField == null)) {
                        this.propertyField = XTypedList<property>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("property", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<property>(this.propertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (parent?, (property | manytoone | any | nestedcompositeelement1)*)
        /// </para>
        /// </summary>
        public IList<manytoone> manytoone {
            get {
                if ((this.manytooneField == null)) {
                    this.manytooneField = new XTypedList<manytoone>(this, LinqToXsdTypeManager.Instance, XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"));
                }
                return this.manytooneField;
            }
            set {
                if ((value == null)) {
                    this.manytooneField = null;
                }
                else {
                    if ((this.manytooneField == null)) {
                        this.manytooneField = XTypedList<manytoone>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<manytoone>(this.manytooneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (parent?, (property | manytoone | any | nestedcompositeelement1)*)
        /// </para>
        /// </summary>
        public IList<any> any {
            get {
                if ((this.anyField == null)) {
                    this.anyField = new XTypedList<any>(this, LinqToXsdTypeManager.Instance, XName.Get("any", "urn:nhibernate-mapping-2.2"));
                }
                return this.anyField;
            }
            set {
                if ((value == null)) {
                    this.anyField = null;
                }
                else {
                    if ((this.anyField == null)) {
                        this.anyField = XTypedList<any>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("any", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<any>(this.anyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (parent?, (property | manytoone | any | nestedcompositeelement1)*)
        /// </para>
        /// </summary>
        public IList<nestedcompositeelement> nestedcompositeelement1 {
            get {
                if ((this.nestedcompositeelement1Field == null)) {
                    this.nestedcompositeelement1Field = new XTypedList<nestedcompositeelement>(this, LinqToXsdTypeManager.Instance, XName.Get("nested-composite-element", "urn:nhibernate-mapping-2.2"));
                }
                return this.nestedcompositeelement1Field;
            }
            set {
                if ((value == null)) {
                    this.nestedcompositeelement1Field = null;
                }
                else {
                    if ((this.nestedcompositeelement1Field == null)) {
                        this.nestedcompositeelement1Field = XTypedList<nestedcompositeelement>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("nested-composite-element", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<nestedcompositeelement>(this.nestedcompositeelement1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string @class {
            get {
                XAttribute x = this.Attribute(XName.Get("class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string access {
            get {
                XAttribute x = this.Attribute(XName.Get("access", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("access", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nested-composite-element", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static nestedcompositeelement Load(string xmlFile) {
            return XTypedServices.Load<nestedcompositeelement>(xmlFile);
        }
        
        public static nestedcompositeelement Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<nestedcompositeelement>(xmlFile);
        }
        
        public static nestedcompositeelement Parse(string xml) {
            return XTypedServices.Parse<nestedcompositeelement>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<nestedcompositeelement>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("parent", "urn:nhibernate-mapping-2.2"), typeof(parent));
            localElementDictionary.Add(XName.Get("property", "urn:nhibernate-mapping-2.2"), typeof(property));
            localElementDictionary.Add(XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"), typeof(manytoone));
            localElementDictionary.Add(XName.Get("any", "urn:nhibernate-mapping-2.2"), typeof(any));
            localElementDictionary.Add(XName.Get("nested-composite-element", "urn:nhibernate-mapping-2.2"), typeof(nestedcompositeelement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class onetomany : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string notfoundDefaultValue = "exception";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool embedxmlDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
         public static explicit operator onetomany(XElement xe) { return XTypedServices.ToXTypedElement<onetomany>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public onetomany() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @class {
            get {
                XAttribute x = this.Attribute(XName.Get("class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string notfound {
            get {
                XAttribute x = this.Attribute(XName.Get("not-found", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, notfoundDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("not-found", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool embedxml {
            get {
                XAttribute x = this.Attribute(XName.Get("embed-xml", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, embedxmlDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("embed-xml", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string entityname {
            get {
                XAttribute x = this.Attribute(XName.Get("entity-name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("entity-name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("one-to-many", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static onetomany Load(string xmlFile) {
            return XTypedServices.Load<onetomany>(xmlFile);
        }
        
        public static onetomany Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<onetomany>(xmlFile);
        }
        
        public static onetomany Parse(string xml) {
            return XTypedServices.Parse<onetomany>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<onetomany>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (meta*, formula*)
    /// </para>
    /// </summary>
    public partial class onetoone : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<meta> metaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<formula> formulaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool constrainedDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool embedxmlDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator onetoone(XElement xe) { return XTypedServices.ToXTypedElement<onetoone>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static onetoone() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("meta", "urn:nhibernate-mapping-2.2")), new NamedContentModelEntity(XName.Get("formula", "urn:nhibernate-mapping-2.2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (meta*, formula*)
        /// </para>
        /// </summary>
        public onetoone() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, formula*)
        /// </para>
        /// </summary>
        public IList<meta> meta {
            get {
                if ((this.metaField == null)) {
                    this.metaField = new XTypedList<meta>(this, LinqToXsdTypeManager.Instance, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                }
                return this.metaField;
            }
            set {
                if ((value == null)) {
                    this.metaField = null;
                }
                else {
                    if ((this.metaField == null)) {
                        this.metaField = XTypedList<meta>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<meta>(this.metaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, formula*)
        /// </para>
        /// </summary>
        public IList<formula> formula {
            get {
                if ((this.formulaField == null)) {
                    this.formulaField = new XTypedList<formula>(this, LinqToXsdTypeManager.Instance, XName.Get("formula", "urn:nhibernate-mapping-2.2"));
                }
                return this.formulaField;
            }
            set {
                if ((value == null)) {
                    this.formulaField = null;
                }
                else {
                    if ((this.formulaField == null)) {
                        this.formulaField = XTypedList<formula>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("formula", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<formula>(this.formulaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string formula1 {
            get {
                XAttribute x = this.Attribute(XName.Get("formula", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("formula", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string access {
            get {
                XAttribute x = this.Attribute(XName.Get("access", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("access", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @class {
            get {
                XAttribute x = this.Attribute(XName.Get("class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string entityname {
            get {
                XAttribute x = this.Attribute(XName.Get("entity-name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("entity-name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string cascade {
            get {
                XAttribute x = this.Attribute(XName.Get("cascade", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("cascade", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string outerjoin {
            get {
                XAttribute x = this.Attribute(XName.Get("outer-join", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("outer-join", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string fetch {
            get {
                XAttribute x = this.Attribute(XName.Get("fetch", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("fetch", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool constrained {
            get {
                XAttribute x = this.Attribute(XName.Get("constrained", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, constrainedDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("constrained", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string foreignkey {
            get {
                XAttribute x = this.Attribute(XName.Get("foreign-key", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("foreign-key", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string propertyref {
            get {
                XAttribute x = this.Attribute(XName.Get("property-ref", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("property-ref", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string lazy {
            get {
                XAttribute x = this.Attribute(XName.Get("lazy", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("lazy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool embedxml {
            get {
                XAttribute x = this.Attribute(XName.Get("embed-xml", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, embedxmlDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("embed-xml", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("one-to-one", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static onetoone Load(string xmlFile) {
            return XTypedServices.Load<onetoone>(xmlFile);
        }
        
        public static onetoone Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<onetoone>(xmlFile);
        }
        
        public static onetoone Parse(string xml) {
            return XTypedServices.Parse<onetoone>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<onetoone>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(meta));
            localElementDictionary.Add(XName.Get("formula", "urn:nhibernate-mapping-2.2"), typeof(formula));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class param : XTypedElement, IXMetaData {
        
         public static explicit operator param(XElement xe) { return XTypedServices.ToXTypedElement<param>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public param() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("param", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static param Load(string xmlFile) {
            return XTypedServices.Load<param>(xmlFile);
        }
        
        public static param Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<param>(xmlFile);
        }
        
        public static param Parse(string xml) {
            return XTypedServices.Parse<param>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<param>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class parent : XTypedElement, IXMetaData {
        
         public static explicit operator parent(XElement xe) { return XTypedServices.ToXTypedElement<parent>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public parent() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("parent", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static parent Load(string xmlFile) {
            return XTypedServices.Load<parent>(xmlFile);
        }
        
        public static parent Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<parent>(xmlFile);
        }
        
        public static parent Parse(string xml) {
            return XTypedServices.Parse<parent>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<parent>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), element, loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
    /// </para>
    /// </summary>
    public partial class primitivearray : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<meta> metaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<synchronize> synchronizeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool mutableDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool optimisticlockDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool embedxmlDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator primitivearray(XElement xe) { return XTypedServices.ToXTypedElement<primitivearray>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static primitivearray() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), element, loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public primitivearray() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), element, loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public IList<meta> meta {
            get {
                if ((this.metaField == null)) {
                    this.metaField = new XTypedList<meta>(this, LinqToXsdTypeManager.Instance, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                }
                return this.metaField;
            }
            set {
                if ((value == null)) {
                    this.metaField = null;
                }
                else {
                    if ((this.metaField == null)) {
                        this.metaField = XTypedList<meta>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<meta>(this.metaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), element, loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public subselect subselect {
            get {
                XElement x = this.GetElement(XName.Get("subselect", "urn:nhibernate-mapping-2.2"));
                return ((subselect)(x));
            }
            set {
                this.SetElement(XName.Get("subselect", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), element, loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public cache cache {
            get {
                XElement x = this.GetElement(XName.Get("cache", "urn:nhibernate-mapping-2.2"));
                return ((cache)(x));
            }
            set {
                this.SetElement(XName.Get("cache", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), element, loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public IList<synchronize> synchronize {
            get {
                if ((this.synchronizeField == null)) {
                    this.synchronizeField = new XTypedList<synchronize>(this, LinqToXsdTypeManager.Instance, XName.Get("synchronize", "urn:nhibernate-mapping-2.2"));
                }
                return this.synchronizeField;
            }
            set {
                if ((value == null)) {
                    this.synchronizeField = null;
                }
                else {
                    if ((this.synchronizeField == null)) {
                        this.synchronizeField = XTypedList<synchronize>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("synchronize", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<synchronize>(this.synchronizeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), element, loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public comment comment {
            get {
                XElement x = this.GetElement(XName.Get("comment", "urn:nhibernate-mapping-2.2"));
                return ((comment)(x));
            }
            set {
                this.SetElement(XName.Get("comment", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), element, loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public key key {
            get {
                XElement x = this.GetElement(XName.Get("key", "urn:nhibernate-mapping-2.2"));
                return ((key)(x));
            }
            set {
                this.SetElement(XName.Get("key", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), element, loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public index index {
            get {
                XElement x = this.GetElement(XName.Get("index", "urn:nhibernate-mapping-2.2"));
                return ((index)(x));
            }
            set {
                this.SetElement(XName.Get("index", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), element, loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public listindex listindex {
            get {
                XElement x = this.GetElement(XName.Get("list-index", "urn:nhibernate-mapping-2.2"));
                return ((listindex)(x));
            }
            set {
                this.SetElement(XName.Get("list-index", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), element, loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public element element {
            get {
                XElement x = this.GetElement(XName.Get("element", "urn:nhibernate-mapping-2.2"));
                return ((element)(x));
            }
            set {
                this.SetElement(XName.Get("element", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), element, loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public loader loader {
            get {
                XElement x = this.GetElement(XName.Get("loader", "urn:nhibernate-mapping-2.2"));
                return ((loader)(x));
            }
            set {
                this.SetElement(XName.Get("loader", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), element, loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public sqlinsert sqlinsert {
            get {
                XElement x = this.GetElement(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"));
                return ((sqlinsert)(x));
            }
            set {
                this.SetElement(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), element, loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public sqlupdate sqlupdate {
            get {
                XElement x = this.GetElement(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"));
                return ((sqlupdate)(x));
            }
            set {
                this.SetElement(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), element, loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public sqldelete sqldelete {
            get {
                XElement x = this.GetElement(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"));
                return ((sqldelete)(x));
            }
            set {
                this.SetElement(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (index | listindex), element, loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?)
        /// </para>
        /// </summary>
        public sqldeleteall sqldeleteall {
            get {
                XElement x = this.GetElement(XName.Get("sql-delete-all", "urn:nhibernate-mapping-2.2"));
                return ((sqldeleteall)(x));
            }
            set {
                this.SetElement(XName.Get("sql-delete-all", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string access {
            get {
                XAttribute x = this.Attribute(XName.Get("access", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("access", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string table {
            get {
                XAttribute x = this.Attribute(XName.Get("table", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("table", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string schema {
            get {
                XAttribute x = this.Attribute(XName.Get("schema", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("schema", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string catalog {
            get {
                XAttribute x = this.Attribute(XName.Get("catalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("catalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string subselect1 {
            get {
                XAttribute x = this.Attribute(XName.Get("subselect", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("subselect", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool mutable {
            get {
                XAttribute x = this.Attribute(XName.Get("mutable", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, mutableDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("mutable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @where {
            get {
                XAttribute x = this.Attribute(XName.Get("where", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("where", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> batchsize {
            get {
                XAttribute x = this.Attribute(XName.Get("batch-size", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("batch-size", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string outerjoin {
            get {
                XAttribute x = this.Attribute(XName.Get("outer-join", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("outer-join", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string fetch {
            get {
                XAttribute x = this.Attribute(XName.Get("fetch", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("fetch", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string persister {
            get {
                XAttribute x = this.Attribute(XName.Get("persister", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("persister", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string collectiontype {
            get {
                XAttribute x = this.Attribute(XName.Get("collection-type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("collection-type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string check {
            get {
                XAttribute x = this.Attribute(XName.Get("check", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("check", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool optimisticlock {
            get {
                XAttribute x = this.Attribute(XName.Get("optimistic-lock", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, optimisticlockDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("optimistic-lock", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool embedxml {
            get {
                XAttribute x = this.Attribute(XName.Get("embed-xml", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, embedxmlDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("embed-xml", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("primitive-array", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static primitivearray Load(string xmlFile) {
            return XTypedServices.Load<primitivearray>(xmlFile);
        }
        
        public static primitivearray Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<primitivearray>(xmlFile);
        }
        
        public static primitivearray Parse(string xml) {
            return XTypedServices.Parse<primitivearray>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<primitivearray>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(meta));
            localElementDictionary.Add(XName.Get("subselect", "urn:nhibernate-mapping-2.2"), typeof(subselect));
            localElementDictionary.Add(XName.Get("cache", "urn:nhibernate-mapping-2.2"), typeof(cache));
            localElementDictionary.Add(XName.Get("synchronize", "urn:nhibernate-mapping-2.2"), typeof(synchronize));
            localElementDictionary.Add(XName.Get("comment", "urn:nhibernate-mapping-2.2"), typeof(comment));
            localElementDictionary.Add(XName.Get("key", "urn:nhibernate-mapping-2.2"), typeof(key));
            localElementDictionary.Add(XName.Get("index", "urn:nhibernate-mapping-2.2"), typeof(index));
            localElementDictionary.Add(XName.Get("list-index", "urn:nhibernate-mapping-2.2"), typeof(listindex));
            localElementDictionary.Add(XName.Get("element", "urn:nhibernate-mapping-2.2"), typeof(element));
            localElementDictionary.Add(XName.Get("loader", "urn:nhibernate-mapping-2.2"), typeof(loader));
            localElementDictionary.Add(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"), typeof(sqlinsert));
            localElementDictionary.Add(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"), typeof(sqlupdate));
            localElementDictionary.Add(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"), typeof(sqldelete));
            localElementDictionary.Add(XName.Get("sql-delete-all", "urn:nhibernate-mapping-2.2"), typeof(sqldeleteall));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((property | manytoone | component | dynamiccomponent)*)
    /// </para>
    /// </summary>
    public partial class properties : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<property> propertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<manytoone> manytooneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<component> componentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dynamiccomponent> dynamiccomponentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool uniqueDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool insertDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool updateDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool optimisticlockDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator properties(XElement xe) { return XTypedServices.ToXTypedElement<properties>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static properties() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((property | manytoone | component | dynamiccomponent)*)
        /// </para>
        /// </summary>
        public properties() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((property | manytoone | component | dynamiccomponent)*)
        /// </para>
        /// </summary>
        public IList<property> property {
            get {
                if ((this.propertyField == null)) {
                    this.propertyField = new XTypedList<property>(this, LinqToXsdTypeManager.Instance, XName.Get("property", "urn:nhibernate-mapping-2.2"));
                }
                return this.propertyField;
            }
            set {
                if ((value == null)) {
                    this.propertyField = null;
                }
                else {
                    if ((this.propertyField == null)) {
                        this.propertyField = XTypedList<property>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("property", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<property>(this.propertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((property | manytoone | component | dynamiccomponent)*)
        /// </para>
        /// </summary>
        public IList<manytoone> manytoone {
            get {
                if ((this.manytooneField == null)) {
                    this.manytooneField = new XTypedList<manytoone>(this, LinqToXsdTypeManager.Instance, XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"));
                }
                return this.manytooneField;
            }
            set {
                if ((value == null)) {
                    this.manytooneField = null;
                }
                else {
                    if ((this.manytooneField == null)) {
                        this.manytooneField = XTypedList<manytoone>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<manytoone>(this.manytooneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((property | manytoone | component | dynamiccomponent)*)
        /// </para>
        /// </summary>
        public IList<component> component {
            get {
                if ((this.componentField == null)) {
                    this.componentField = new XTypedList<component>(this, LinqToXsdTypeManager.Instance, XName.Get("component", "urn:nhibernate-mapping-2.2"));
                }
                return this.componentField;
            }
            set {
                if ((value == null)) {
                    this.componentField = null;
                }
                else {
                    if ((this.componentField == null)) {
                        this.componentField = XTypedList<component>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("component", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<component>(this.componentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((property | manytoone | component | dynamiccomponent)*)
        /// </para>
        /// </summary>
        public IList<dynamiccomponent> dynamiccomponent {
            get {
                if ((this.dynamiccomponentField == null)) {
                    this.dynamiccomponentField = new XTypedList<dynamiccomponent>(this, LinqToXsdTypeManager.Instance, XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"));
                }
                return this.dynamiccomponentField;
            }
            set {
                if ((value == null)) {
                    this.dynamiccomponentField = null;
                }
                else {
                    if ((this.dynamiccomponentField == null)) {
                        this.dynamiccomponentField = XTypedList<dynamiccomponent>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<dynamiccomponent>(this.dynamiccomponentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool unique {
            get {
                XAttribute x = this.Attribute(XName.Get("unique", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, uniqueDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("unique", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool insert {
            get {
                XAttribute x = this.Attribute(XName.Get("insert", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, insertDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("insert", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool update {
            get {
                XAttribute x = this.Attribute(XName.Get("update", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, updateDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("update", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool optimisticlock {
            get {
                XAttribute x = this.Attribute(XName.Get("optimistic-lock", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, optimisticlockDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("optimistic-lock", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("properties", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static properties Load(string xmlFile) {
            return XTypedServices.Load<properties>(xmlFile);
        }
        
        public static properties Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<properties>(xmlFile);
        }
        
        public static properties Parse(string xml) {
            return XTypedServices.Parse<properties>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<properties>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("property", "urn:nhibernate-mapping-2.2"), typeof(property));
            localElementDictionary.Add(XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"), typeof(manytoone));
            localElementDictionary.Add(XName.Get("component", "urn:nhibernate-mapping-2.2"), typeof(component));
            localElementDictionary.Add(XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"), typeof(dynamiccomponent));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (meta*, (column | formula)*, type?)
    /// </para>
    /// </summary>
    public partial class property : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<meta> metaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<column> columnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<formula> formulaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool uniqueDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool optimisticlockDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool lazyDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string generatedDefaultValue = "never";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator property(XElement xe) { return XTypedServices.ToXTypedElement<property>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static property() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (meta*, (column | formula)*, type?)
        /// </para>
        /// </summary>
        public property() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, (column | formula)*, type?)
        /// </para>
        /// </summary>
        public IList<meta> meta {
            get {
                if ((this.metaField == null)) {
                    this.metaField = new XTypedList<meta>(this, LinqToXsdTypeManager.Instance, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                }
                return this.metaField;
            }
            set {
                if ((value == null)) {
                    this.metaField = null;
                }
                else {
                    if ((this.metaField == null)) {
                        this.metaField = XTypedList<meta>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<meta>(this.metaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, (column | formula)*, type?)
        /// </para>
        /// </summary>
        public IList<column> column {
            get {
                if ((this.columnField == null)) {
                    this.columnField = new XTypedList<column>(this, LinqToXsdTypeManager.Instance, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                }
                return this.columnField;
            }
            set {
                if ((value == null)) {
                    this.columnField = null;
                }
                else {
                    if ((this.columnField == null)) {
                        this.columnField = XTypedList<column>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<column>(this.columnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, (column | formula)*, type?)
        /// </para>
        /// </summary>
        public IList<formula> formula {
            get {
                if ((this.formulaField == null)) {
                    this.formulaField = new XTypedList<formula>(this, LinqToXsdTypeManager.Instance, XName.Get("formula", "urn:nhibernate-mapping-2.2"));
                }
                return this.formulaField;
            }
            set {
                if ((value == null)) {
                    this.formulaField = null;
                }
                else {
                    if ((this.formulaField == null)) {
                        this.formulaField = XTypedList<formula>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("formula", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<formula>(this.formulaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, (column | formula)*, type?)
        /// </para>
        /// </summary>
        public type type {
            get {
                XElement x = this.GetElement(XName.Get("type", "urn:nhibernate-mapping-2.2"));
                return ((type)(x));
            }
            set {
                this.SetElement(XName.Get("type", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string access {
            get {
                XAttribute x = this.Attribute(XName.Get("access", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("access", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string type1 {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string column1 {
            get {
                XAttribute x = this.Attribute(XName.Get("column", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("column", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> length {
            get {
                XAttribute x = this.Attribute(XName.Get("length", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("length", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> precision {
            get {
                XAttribute x = this.Attribute(XName.Get("precision", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("precision", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> scale {
            get {
                XAttribute x = this.Attribute(XName.Get("scale", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("scale", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> notnull {
            get {
                XAttribute x = this.Attribute(XName.Get("not-null", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("not-null", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool unique {
            get {
                XAttribute x = this.Attribute(XName.Get("unique", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, uniqueDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("unique", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string uniquekey {
            get {
                XAttribute x = this.Attribute(XName.Get("unique-key", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("unique-key", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string index {
            get {
                XAttribute x = this.Attribute(XName.Get("index", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("index", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> update {
            get {
                XAttribute x = this.Attribute(XName.Get("update", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("update", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> insert {
            get {
                XAttribute x = this.Attribute(XName.Get("insert", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("insert", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool optimisticlock {
            get {
                XAttribute x = this.Attribute(XName.Get("optimistic-lock", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, optimisticlockDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("optimistic-lock", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string formula1 {
            get {
                XAttribute x = this.Attribute(XName.Get("formula", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("formula", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool lazy {
            get {
                XAttribute x = this.Attribute(XName.Get("lazy", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, lazyDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("lazy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string generated {
            get {
                XAttribute x = this.Attribute(XName.Get("generated", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, generatedDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("generated", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("property", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static property Load(string xmlFile) {
            return XTypedServices.Load<property>(xmlFile);
        }
        
        public static property Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<property>(xmlFile);
        }
        
        public static property Parse(string xml) {
            return XTypedServices.Parse<property>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<property>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(meta));
            localElementDictionary.Add(XName.Get("column", "urn:nhibernate-mapping-2.2"), typeof(column));
            localElementDictionary.Add(XName.Get("formula", "urn:nhibernate-mapping-2.2"), typeof(formula));
            localElementDictionary.Add(XName.Get("type", "urn:nhibernate-mapping-2.2"), typeof(type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (queryparam)*
    /// </para>
    /// </summary>
    public partial class query : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<queryparam> queryparamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool cacheableDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator query(XElement xe) { return XTypedServices.ToXTypedElement<query>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static query() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (queryparam)*
        /// </para>
        /// </summary>
        public query() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (queryparam)*
        /// </para>
        /// </summary>
        public IList<queryparam> queryparam {
            get {
                if ((this.queryparamField == null)) {
                    this.queryparamField = new XTypedList<queryparam>(this, LinqToXsdTypeManager.Instance, XName.Get("query-param", "urn:nhibernate-mapping-2.2"));
                }
                return this.queryparamField;
            }
            set {
                if ((value == null)) {
                    this.queryparamField = null;
                }
                else {
                    if ((this.queryparamField == null)) {
                        this.queryparamField = XTypedList<queryparam>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("query-param", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<queryparam>(this.queryparamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string flushmode {
            get {
                XAttribute x = this.Attribute(XName.Get("flush-mode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("flush-mode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool cacheable {
            get {
                XAttribute x = this.Attribute(XName.Get("cacheable", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, cacheableDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("cacheable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string cacheregion {
            get {
                XAttribute x = this.Attribute(XName.Get("cache-region", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("cache-region", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> fetchsize {
            get {
                XAttribute x = this.Attribute(XName.Get("fetch-size", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("fetch-size", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> timeout {
            get {
                XAttribute x = this.Attribute(XName.Get("timeout", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("timeout", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string cachemode {
            get {
                XAttribute x = this.Attribute(XName.Get("cache-mode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("cache-mode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> @readonly {
            get {
                XAttribute x = this.Attribute(XName.Get("read-only", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("read-only", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string comment {
            get {
                XAttribute x = this.Attribute(XName.Get("comment", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("comment", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("query", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static query Load(string xmlFile) {
            return XTypedServices.Load<query>(xmlFile);
        }
        
        public static query Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<query>(xmlFile);
        }
        
        public static query Parse(string xml) {
            return XTypedServices.Parse<query>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<query>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("query-param", "urn:nhibernate-mapping-2.2"), typeof(queryparam));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class queryparam : XTypedElement, IXMetaData {
        
         public static explicit operator queryparam(XElement xe) { return XTypedServices.ToXTypedElement<queryparam>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public queryparam() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string type {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("query-param", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static queryparam Load(string xmlFile) {
            return XTypedServices.Load<queryparam>(xmlFile);
        }
        
        public static queryparam Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<queryparam>(xmlFile);
        }
        
        public static queryparam Parse(string xml) {
            return XTypedServices.Parse<queryparam>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<queryparam>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (returnscalar | @return | returnjoin | loadcollection)*
    /// </para>
    /// </summary>
    public partial class resultset : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<returnscalar> returnscalarField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@return> @returnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<returnjoin> returnjoinField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<loadcollection> loadcollectionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator resultset(XElement xe) { return XTypedServices.ToXTypedElement<resultset>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static resultset() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (returnscalar | @return | returnjoin | loadcollection)*
        /// </para>
        /// </summary>
        public resultset() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (returnscalar | @return | returnjoin | loadcollection)*
        /// </para>
        /// </summary>
        public IList<returnscalar> returnscalar {
            get {
                if ((this.returnscalarField == null)) {
                    this.returnscalarField = new XTypedList<returnscalar>(this, LinqToXsdTypeManager.Instance, XName.Get("return-scalar", "urn:nhibernate-mapping-2.2"));
                }
                return this.returnscalarField;
            }
            set {
                if ((value == null)) {
                    this.returnscalarField = null;
                }
                else {
                    if ((this.returnscalarField == null)) {
                        this.returnscalarField = XTypedList<returnscalar>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("return-scalar", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<returnscalar>(this.returnscalarField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (returnscalar | @return | returnjoin | loadcollection)*
        /// </para>
        /// </summary>
        public IList<@return> @return {
            get {
                if ((this.@returnField == null)) {
                    this.@returnField = new XTypedList<@return>(this, LinqToXsdTypeManager.Instance, XName.Get("return", "urn:nhibernate-mapping-2.2"));
                }
                return this.@returnField;
            }
            set {
                if ((value == null)) {
                    this.@returnField = null;
                }
                else {
                    if ((this.@returnField == null)) {
                        this.@returnField = XTypedList<@return>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("return", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<@return>(this.@returnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (returnscalar | @return | returnjoin | loadcollection)*
        /// </para>
        /// </summary>
        public IList<returnjoin> returnjoin {
            get {
                if ((this.returnjoinField == null)) {
                    this.returnjoinField = new XTypedList<returnjoin>(this, LinqToXsdTypeManager.Instance, XName.Get("return-join", "urn:nhibernate-mapping-2.2"));
                }
                return this.returnjoinField;
            }
            set {
                if ((value == null)) {
                    this.returnjoinField = null;
                }
                else {
                    if ((this.returnjoinField == null)) {
                        this.returnjoinField = XTypedList<returnjoin>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("return-join", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<returnjoin>(this.returnjoinField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (returnscalar | @return | returnjoin | loadcollection)*
        /// </para>
        /// </summary>
        public IList<loadcollection> loadcollection {
            get {
                if ((this.loadcollectionField == null)) {
                    this.loadcollectionField = new XTypedList<loadcollection>(this, LinqToXsdTypeManager.Instance, XName.Get("load-collection", "urn:nhibernate-mapping-2.2"));
                }
                return this.loadcollectionField;
            }
            set {
                if ((value == null)) {
                    this.loadcollectionField = null;
                }
                else {
                    if ((this.loadcollectionField == null)) {
                        this.loadcollectionField = XTypedList<loadcollection>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("load-collection", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<loadcollection>(this.loadcollectionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("resultset", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static resultset Load(string xmlFile) {
            return XTypedServices.Load<resultset>(xmlFile);
        }
        
        public static resultset Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<resultset>(xmlFile);
        }
        
        public static resultset Parse(string xml) {
            return XTypedServices.Parse<resultset>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<resultset>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("return-scalar", "urn:nhibernate-mapping-2.2"), typeof(returnscalar));
            localElementDictionary.Add(XName.Get("return", "urn:nhibernate-mapping-2.2"), typeof(@return));
            localElementDictionary.Add(XName.Get("return-join", "urn:nhibernate-mapping-2.2"), typeof(returnjoin));
            localElementDictionary.Add(XName.Get("load-collection", "urn:nhibernate-mapping-2.2"), typeof(loadcollection));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (returndiscriminator?, returnproperty*)
    /// </para>
    /// </summary>
    public partial class @return : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<returnproperty> returnpropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string lockmodeDefaultValue = "read";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator @return(XElement xe) { return XTypedServices.ToXTypedElement<@return>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static @return() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("return-discriminator", "urn:nhibernate-mapping-2.2")), new NamedContentModelEntity(XName.Get("return-property", "urn:nhibernate-mapping-2.2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (returndiscriminator?, returnproperty*)
        /// </para>
        /// </summary>
        public @return() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (returndiscriminator?, returnproperty*)
        /// </para>
        /// </summary>
        public returndiscriminator returndiscriminator {
            get {
                XElement x = this.GetElement(XName.Get("return-discriminator", "urn:nhibernate-mapping-2.2"));
                return ((returndiscriminator)(x));
            }
            set {
                this.SetElement(XName.Get("return-discriminator", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (returndiscriminator?, returnproperty*)
        /// </para>
        /// </summary>
        public IList<returnproperty> returnproperty {
            get {
                if ((this.returnpropertyField == null)) {
                    this.returnpropertyField = new XTypedList<returnproperty>(this, LinqToXsdTypeManager.Instance, XName.Get("return-property", "urn:nhibernate-mapping-2.2"));
                }
                return this.returnpropertyField;
            }
            set {
                if ((value == null)) {
                    this.returnpropertyField = null;
                }
                else {
                    if ((this.returnpropertyField == null)) {
                        this.returnpropertyField = XTypedList<returnproperty>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("return-property", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<returnproperty>(this.returnpropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string alias {
            get {
                XAttribute x = this.Attribute(XName.Get("alias", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("alias", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string entityname {
            get {
                XAttribute x = this.Attribute(XName.Get("entity-name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("entity-name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @class {
            get {
                XAttribute x = this.Attribute(XName.Get("class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string lockmode {
            get {
                XAttribute x = this.Attribute(XName.Get("lock-mode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, lockmodeDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("lock-mode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("return", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static @return Load(string xmlFile) {
            return XTypedServices.Load<@return>(xmlFile);
        }
        
        public static @return Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<@return>(xmlFile);
        }
        
        public static @return Parse(string xml) {
            return XTypedServices.Parse<@return>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<@return>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("return-discriminator", "urn:nhibernate-mapping-2.2"), typeof(returndiscriminator));
            localElementDictionary.Add(XName.Get("return-property", "urn:nhibernate-mapping-2.2"), typeof(returnproperty));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class returncolumn : XTypedElement, IXMetaData {
        
         public static explicit operator returncolumn(XElement xe) { return XTypedServices.ToXTypedElement<returncolumn>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public returncolumn() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("return-column", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static returncolumn Load(string xmlFile) {
            return XTypedServices.Load<returncolumn>(xmlFile);
        }
        
        public static returncolumn Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<returncolumn>(xmlFile);
        }
        
        public static returncolumn Parse(string xml) {
            return XTypedServices.Parse<returncolumn>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<returncolumn>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class returndiscriminator : XTypedElement, IXMetaData {
        
         public static explicit operator returndiscriminator(XElement xe) { return XTypedServices.ToXTypedElement<returndiscriminator>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public returndiscriminator() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string column {
            get {
                XAttribute x = this.Attribute(XName.Get("column", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("column", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("return-discriminator", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static returndiscriminator Load(string xmlFile) {
            return XTypedServices.Load<returndiscriminator>(xmlFile);
        }
        
        public static returndiscriminator Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<returndiscriminator>(xmlFile);
        }
        
        public static returndiscriminator Parse(string xml) {
            return XTypedServices.Parse<returndiscriminator>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<returndiscriminator>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (returnproperty)*
    /// </para>
    /// </summary>
    public partial class returnjoin : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<returnproperty> returnpropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string lockmodeDefaultValue = "read";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator returnjoin(XElement xe) { return XTypedServices.ToXTypedElement<returnjoin>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static returnjoin() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (returnproperty)*
        /// </para>
        /// </summary>
        public returnjoin() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (returnproperty)*
        /// </para>
        /// </summary>
        public IList<returnproperty> returnproperty {
            get {
                if ((this.returnpropertyField == null)) {
                    this.returnpropertyField = new XTypedList<returnproperty>(this, LinqToXsdTypeManager.Instance, XName.Get("return-property", "urn:nhibernate-mapping-2.2"));
                }
                return this.returnpropertyField;
            }
            set {
                if ((value == null)) {
                    this.returnpropertyField = null;
                }
                else {
                    if ((this.returnpropertyField == null)) {
                        this.returnpropertyField = XTypedList<returnproperty>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("return-property", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<returnproperty>(this.returnpropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string alias {
            get {
                XAttribute x = this.Attribute(XName.Get("alias", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("alias", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string property {
            get {
                XAttribute x = this.Attribute(XName.Get("property", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("property", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string lockmode {
            get {
                XAttribute x = this.Attribute(XName.Get("lock-mode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, lockmodeDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("lock-mode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("return-join", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static returnjoin Load(string xmlFile) {
            return XTypedServices.Load<returnjoin>(xmlFile);
        }
        
        public static returnjoin Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<returnjoin>(xmlFile);
        }
        
        public static returnjoin Parse(string xml) {
            return XTypedServices.Parse<returnjoin>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<returnjoin>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("return-property", "urn:nhibernate-mapping-2.2"), typeof(returnproperty));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (returncolumn*)
    /// </para>
    /// </summary>
    public partial class returnproperty : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<returncolumn> returncolumnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator returnproperty(XElement xe) { return XTypedServices.ToXTypedElement<returnproperty>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static returnproperty() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("return-column", "urn:nhibernate-mapping-2.2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (returncolumn*)
        /// </para>
        /// </summary>
        public returnproperty() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (returncolumn*)
        /// </para>
        /// </summary>
        public IList<returncolumn> returncolumn {
            get {
                if ((this.returncolumnField == null)) {
                    this.returncolumnField = new XTypedList<returncolumn>(this, LinqToXsdTypeManager.Instance, XName.Get("return-column", "urn:nhibernate-mapping-2.2"));
                }
                return this.returncolumnField;
            }
            set {
                if ((value == null)) {
                    this.returncolumnField = null;
                }
                else {
                    if ((this.returncolumnField == null)) {
                        this.returncolumnField = XTypedList<returncolumn>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("return-column", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<returncolumn>(this.returncolumnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string column {
            get {
                XAttribute x = this.Attribute(XName.Get("column", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("column", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("return-property", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static returnproperty Load(string xmlFile) {
            return XTypedServices.Load<returnproperty>(xmlFile);
        }
        
        public static returnproperty Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<returnproperty>(xmlFile);
        }
        
        public static returnproperty Parse(string xml) {
            return XTypedServices.Parse<returnproperty>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<returnproperty>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("return-column", "urn:nhibernate-mapping-2.2"), typeof(returncolumn));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class returnscalar : XTypedElement, IXMetaData {
        
         public static explicit operator returnscalar(XElement xe) { return XTypedServices.ToXTypedElement<returnscalar>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public returnscalar() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string column {
            get {
                XAttribute x = this.Attribute(XName.Get("column", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("column", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string type {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("return-scalar", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static returnscalar Load(string xmlFile) {
            return XTypedServices.Load<returnscalar>(xmlFile);
        }
        
        public static returnscalar Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<returnscalar>(xmlFile);
        }
        
        public static returnscalar Parse(string xml) {
            return XTypedServices.Parse<returnscalar>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<returnscalar>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
    /// </para>
    /// </summary>
    public partial class set : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<meta> metaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<synchronize> synchronizeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<filter> filterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool inverseDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool mutableDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool optimisticlockDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool embedxmlDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator set(XElement xe) { return XTypedServices.ToXTypedElement<set>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static set() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public set() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public IList<meta> meta {
            get {
                if ((this.metaField == null)) {
                    this.metaField = new XTypedList<meta>(this, LinqToXsdTypeManager.Instance, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                }
                return this.metaField;
            }
            set {
                if ((value == null)) {
                    this.metaField = null;
                }
                else {
                    if ((this.metaField == null)) {
                        this.metaField = XTypedList<meta>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<meta>(this.metaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public subselect subselect {
            get {
                XElement x = this.GetElement(XName.Get("subselect", "urn:nhibernate-mapping-2.2"));
                return ((subselect)(x));
            }
            set {
                this.SetElement(XName.Get("subselect", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public cache cache {
            get {
                XElement x = this.GetElement(XName.Get("cache", "urn:nhibernate-mapping-2.2"));
                return ((cache)(x));
            }
            set {
                this.SetElement(XName.Get("cache", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public IList<synchronize> synchronize {
            get {
                if ((this.synchronizeField == null)) {
                    this.synchronizeField = new XTypedList<synchronize>(this, LinqToXsdTypeManager.Instance, XName.Get("synchronize", "urn:nhibernate-mapping-2.2"));
                }
                return this.synchronizeField;
            }
            set {
                if ((value == null)) {
                    this.synchronizeField = null;
                }
                else {
                    if ((this.synchronizeField == null)) {
                        this.synchronizeField = XTypedList<synchronize>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("synchronize", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<synchronize>(this.synchronizeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public comment comment {
            get {
                XElement x = this.GetElement(XName.Get("comment", "urn:nhibernate-mapping-2.2"));
                return ((comment)(x));
            }
            set {
                this.SetElement(XName.Get("comment", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public key key {
            get {
                XElement x = this.GetElement(XName.Get("key", "urn:nhibernate-mapping-2.2"));
                return ((key)(x));
            }
            set {
                this.SetElement(XName.Get("key", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public element element {
            get {
                XElement x = this.GetElement(XName.Get("element", "urn:nhibernate-mapping-2.2"));
                return ((element)(x));
            }
            set {
                this.SetElement(XName.Get("element", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public onetomany onetomany {
            get {
                XElement x = this.GetElement(XName.Get("one-to-many", "urn:nhibernate-mapping-2.2"));
                return ((onetomany)(x));
            }
            set {
                this.SetElement(XName.Get("one-to-many", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public manytomany manytomany {
            get {
                XElement x = this.GetElement(XName.Get("many-to-many", "urn:nhibernate-mapping-2.2"));
                return ((manytomany)(x));
            }
            set {
                this.SetElement(XName.Get("many-to-many", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public compositeelement compositeelement {
            get {
                XElement x = this.GetElement(XName.Get("composite-element", "urn:nhibernate-mapping-2.2"));
                return ((compositeelement)(x));
            }
            set {
                this.SetElement(XName.Get("composite-element", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public manytoany manytoany {
            get {
                XElement x = this.GetElement(XName.Get("many-to-any", "urn:nhibernate-mapping-2.2"));
                return ((manytoany)(x));
            }
            set {
                this.SetElement(XName.Get("many-to-any", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public loader loader {
            get {
                XElement x = this.GetElement(XName.Get("loader", "urn:nhibernate-mapping-2.2"));
                return ((loader)(x));
            }
            set {
                this.SetElement(XName.Get("loader", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public sqlinsert sqlinsert {
            get {
                XElement x = this.GetElement(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"));
                return ((sqlinsert)(x));
            }
            set {
                this.SetElement(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public sqlupdate sqlupdate {
            get {
                XElement x = this.GetElement(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"));
                return ((sqlupdate)(x));
            }
            set {
                this.SetElement(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public sqldelete sqldelete {
            get {
                XElement x = this.GetElement(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"));
                return ((sqldelete)(x));
            }
            set {
                this.SetElement(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public sqldeleteall sqldeleteall {
            get {
                XElement x = this.GetElement(XName.Get("sql-delete-all", "urn:nhibernate-mapping-2.2"));
                return ((sqldeleteall)(x));
            }
            set {
                this.SetElement(XName.Get("sql-delete-all", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, cache?, synchronize*, comment?, key, (element | onetomany | manytomany | compositeelement | manytoany), loader?, sqlinsert?, sqlupdate?, sqldelete?, sqldeleteall?, filter*)
        /// </para>
        /// </summary>
        public IList<filter> filter {
            get {
                if ((this.filterField == null)) {
                    this.filterField = new XTypedList<filter>(this, LinqToXsdTypeManager.Instance, XName.Get("filter", "urn:nhibernate-mapping-2.2"));
                }
                return this.filterField;
            }
            set {
                if ((value == null)) {
                    this.filterField = null;
                }
                else {
                    if ((this.filterField == null)) {
                        this.filterField = XTypedList<filter>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("filter", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<filter>(this.filterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string access {
            get {
                XAttribute x = this.Attribute(XName.Get("access", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("access", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string table {
            get {
                XAttribute x = this.Attribute(XName.Get("table", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("table", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string schema {
            get {
                XAttribute x = this.Attribute(XName.Get("schema", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("schema", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string catalog {
            get {
                XAttribute x = this.Attribute(XName.Get("catalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("catalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string subselect1 {
            get {
                XAttribute x = this.Attribute(XName.Get("subselect", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("subselect", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string lazy {
            get {
                XAttribute x = this.Attribute(XName.Get("lazy", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("lazy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool inverse {
            get {
                XAttribute x = this.Attribute(XName.Get("inverse", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, inverseDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("inverse", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool mutable {
            get {
                XAttribute x = this.Attribute(XName.Get("mutable", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, mutableDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("mutable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string cascade {
            get {
                XAttribute x = this.Attribute(XName.Get("cascade", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("cascade", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string orderby {
            get {
                XAttribute x = this.Attribute(XName.Get("order-by", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("order-by", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @where {
            get {
                XAttribute x = this.Attribute(XName.Get("where", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("where", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> batchsize {
            get {
                XAttribute x = this.Attribute(XName.Get("batch-size", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("batch-size", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string outerjoin {
            get {
                XAttribute x = this.Attribute(XName.Get("outer-join", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("outer-join", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string fetch {
            get {
                XAttribute x = this.Attribute(XName.Get("fetch", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("fetch", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string persister {
            get {
                XAttribute x = this.Attribute(XName.Get("persister", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("persister", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string collectiontype {
            get {
                XAttribute x = this.Attribute(XName.Get("collection-type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("collection-type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string check {
            get {
                XAttribute x = this.Attribute(XName.Get("check", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("check", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool optimisticlock {
            get {
                XAttribute x = this.Attribute(XName.Get("optimistic-lock", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, optimisticlockDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("optimistic-lock", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool embedxml {
            get {
                XAttribute x = this.Attribute(XName.Get("embed-xml", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, embedxmlDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("embed-xml", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The concrete collection should use a generic version or an object-based version.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> generic {
            get {
                XAttribute x = this.Attribute(XName.Get("generic", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("generic", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string sort {
            get {
                XAttribute x = this.Attribute(XName.Get("sort", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("sort", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("set", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static set Load(string xmlFile) {
            return XTypedServices.Load<set>(xmlFile);
        }
        
        public static set Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<set>(xmlFile);
        }
        
        public static set Parse(string xml) {
            return XTypedServices.Parse<set>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<set>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(meta));
            localElementDictionary.Add(XName.Get("subselect", "urn:nhibernate-mapping-2.2"), typeof(subselect));
            localElementDictionary.Add(XName.Get("cache", "urn:nhibernate-mapping-2.2"), typeof(cache));
            localElementDictionary.Add(XName.Get("synchronize", "urn:nhibernate-mapping-2.2"), typeof(synchronize));
            localElementDictionary.Add(XName.Get("comment", "urn:nhibernate-mapping-2.2"), typeof(comment));
            localElementDictionary.Add(XName.Get("key", "urn:nhibernate-mapping-2.2"), typeof(key));
            localElementDictionary.Add(XName.Get("element", "urn:nhibernate-mapping-2.2"), typeof(element));
            localElementDictionary.Add(XName.Get("one-to-many", "urn:nhibernate-mapping-2.2"), typeof(onetomany));
            localElementDictionary.Add(XName.Get("many-to-many", "urn:nhibernate-mapping-2.2"), typeof(manytomany));
            localElementDictionary.Add(XName.Get("composite-element", "urn:nhibernate-mapping-2.2"), typeof(compositeelement));
            localElementDictionary.Add(XName.Get("many-to-any", "urn:nhibernate-mapping-2.2"), typeof(manytoany));
            localElementDictionary.Add(XName.Get("loader", "urn:nhibernate-mapping-2.2"), typeof(loader));
            localElementDictionary.Add(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"), typeof(sqlinsert));
            localElementDictionary.Add(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"), typeof(sqlupdate));
            localElementDictionary.Add(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"), typeof(sqldelete));
            localElementDictionary.Add(XName.Get("sql-delete-all", "urn:nhibernate-mapping-2.2"), typeof(sqldeleteall));
            localElementDictionary.Add(XName.Get("filter", "urn:nhibernate-mapping-2.2"), typeof(filter));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (returnscalar | @return | returnjoin | loadcollection | synchronize | queryparam)*
    /// </para>
    /// </summary>
    public partial class sqlquery : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<returnscalar> returnscalarField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@return> @returnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<returnjoin> returnjoinField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<loadcollection> loadcollectionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<synchronize> synchronizeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<queryparam> queryparamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool cacheableDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool callableDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator sqlquery(XElement xe) { return XTypedServices.ToXTypedElement<sqlquery>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static sqlquery() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (returnscalar | @return | returnjoin | loadcollection | synchronize | queryparam)*
        /// </para>
        /// </summary>
        public sqlquery() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (returnscalar | @return | returnjoin | loadcollection | synchronize | queryparam)*
        /// </para>
        /// </summary>
        public IList<returnscalar> returnscalar {
            get {
                if ((this.returnscalarField == null)) {
                    this.returnscalarField = new XTypedList<returnscalar>(this, LinqToXsdTypeManager.Instance, XName.Get("return-scalar", "urn:nhibernate-mapping-2.2"));
                }
                return this.returnscalarField;
            }
            set {
                if ((value == null)) {
                    this.returnscalarField = null;
                }
                else {
                    if ((this.returnscalarField == null)) {
                        this.returnscalarField = XTypedList<returnscalar>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("return-scalar", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<returnscalar>(this.returnscalarField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (returnscalar | @return | returnjoin | loadcollection | synchronize | queryparam)*
        /// </para>
        /// </summary>
        public IList<@return> @return {
            get {
                if ((this.@returnField == null)) {
                    this.@returnField = new XTypedList<@return>(this, LinqToXsdTypeManager.Instance, XName.Get("return", "urn:nhibernate-mapping-2.2"));
                }
                return this.@returnField;
            }
            set {
                if ((value == null)) {
                    this.@returnField = null;
                }
                else {
                    if ((this.@returnField == null)) {
                        this.@returnField = XTypedList<@return>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("return", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<@return>(this.@returnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (returnscalar | @return | returnjoin | loadcollection | synchronize | queryparam)*
        /// </para>
        /// </summary>
        public IList<returnjoin> returnjoin {
            get {
                if ((this.returnjoinField == null)) {
                    this.returnjoinField = new XTypedList<returnjoin>(this, LinqToXsdTypeManager.Instance, XName.Get("return-join", "urn:nhibernate-mapping-2.2"));
                }
                return this.returnjoinField;
            }
            set {
                if ((value == null)) {
                    this.returnjoinField = null;
                }
                else {
                    if ((this.returnjoinField == null)) {
                        this.returnjoinField = XTypedList<returnjoin>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("return-join", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<returnjoin>(this.returnjoinField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (returnscalar | @return | returnjoin | loadcollection | synchronize | queryparam)*
        /// </para>
        /// </summary>
        public IList<loadcollection> loadcollection {
            get {
                if ((this.loadcollectionField == null)) {
                    this.loadcollectionField = new XTypedList<loadcollection>(this, LinqToXsdTypeManager.Instance, XName.Get("load-collection", "urn:nhibernate-mapping-2.2"));
                }
                return this.loadcollectionField;
            }
            set {
                if ((value == null)) {
                    this.loadcollectionField = null;
                }
                else {
                    if ((this.loadcollectionField == null)) {
                        this.loadcollectionField = XTypedList<loadcollection>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("load-collection", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<loadcollection>(this.loadcollectionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (returnscalar | @return | returnjoin | loadcollection | synchronize | queryparam)*
        /// </para>
        /// </summary>
        public IList<synchronize> synchronize {
            get {
                if ((this.synchronizeField == null)) {
                    this.synchronizeField = new XTypedList<synchronize>(this, LinqToXsdTypeManager.Instance, XName.Get("synchronize", "urn:nhibernate-mapping-2.2"));
                }
                return this.synchronizeField;
            }
            set {
                if ((value == null)) {
                    this.synchronizeField = null;
                }
                else {
                    if ((this.synchronizeField == null)) {
                        this.synchronizeField = XTypedList<synchronize>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("synchronize", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<synchronize>(this.synchronizeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (returnscalar | @return | returnjoin | loadcollection | synchronize | queryparam)*
        /// </para>
        /// </summary>
        public IList<queryparam> queryparam {
            get {
                if ((this.queryparamField == null)) {
                    this.queryparamField = new XTypedList<queryparam>(this, LinqToXsdTypeManager.Instance, XName.Get("query-param", "urn:nhibernate-mapping-2.2"));
                }
                return this.queryparamField;
            }
            set {
                if ((value == null)) {
                    this.queryparamField = null;
                }
                else {
                    if ((this.queryparamField == null)) {
                        this.queryparamField = XTypedList<queryparam>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("query-param", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<queryparam>(this.queryparamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string resultsetref {
            get {
                XAttribute x = this.Attribute(XName.Get("resultset-ref", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("resultset-ref", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string flushmode {
            get {
                XAttribute x = this.Attribute(XName.Get("flush-mode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("flush-mode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool cacheable {
            get {
                XAttribute x = this.Attribute(XName.Get("cacheable", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, cacheableDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("cacheable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string cacheregion {
            get {
                XAttribute x = this.Attribute(XName.Get("cache-region", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("cache-region", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> fetchsize {
            get {
                XAttribute x = this.Attribute(XName.Get("fetch-size", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("fetch-size", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> timeout {
            get {
                XAttribute x = this.Attribute(XName.Get("timeout", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("timeout", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string cachemode {
            get {
                XAttribute x = this.Attribute(XName.Get("cache-mode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("cache-mode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> @readonly {
            get {
                XAttribute x = this.Attribute(XName.Get("read-only", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("read-only", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string comment {
            get {
                XAttribute x = this.Attribute(XName.Get("comment", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("comment", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool callable {
            get {
                XAttribute x = this.Attribute(XName.Get("callable", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, callableDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("callable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("sql-query", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static sqlquery Load(string xmlFile) {
            return XTypedServices.Load<sqlquery>(xmlFile);
        }
        
        public static sqlquery Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<sqlquery>(xmlFile);
        }
        
        public static sqlquery Parse(string xml) {
            return XTypedServices.Parse<sqlquery>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<sqlquery>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("return-scalar", "urn:nhibernate-mapping-2.2"), typeof(returnscalar));
            localElementDictionary.Add(XName.Get("return", "urn:nhibernate-mapping-2.2"), typeof(@return));
            localElementDictionary.Add(XName.Get("return-join", "urn:nhibernate-mapping-2.2"), typeof(returnjoin));
            localElementDictionary.Add(XName.Get("load-collection", "urn:nhibernate-mapping-2.2"), typeof(loadcollection));
            localElementDictionary.Add(XName.Get("synchronize", "urn:nhibernate-mapping-2.2"), typeof(synchronize));
            localElementDictionary.Add(XName.Get("query-param", "urn:nhibernate-mapping-2.2"), typeof(queryparam));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
    /// </para>
    /// </summary>
    public partial class subclass : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<meta> metaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tuplizer> tuplizerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<synchronize> synchronizeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<property> propertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<manytoone> manytooneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<onetoone> onetooneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<component> componentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dynamiccomponent> dynamiccomponentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<any> anyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<map> mapField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<set> setField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bag> bagField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<idbag> idbagField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<array> arrayField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<primitivearray> primitivearrayField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<join> joinField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subclass> subclass1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<resultset> resultsetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<query> queryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<sqlquery> sqlqueryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool dynamicupdateDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool dynamicinsertDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool selectbeforeupdateDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator subclass(XElement xe) { return XTypedServices.ToXTypedElement<subclass>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static subclass() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public subclass() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<meta> meta {
            get {
                if ((this.metaField == null)) {
                    this.metaField = new XTypedList<meta>(this, LinqToXsdTypeManager.Instance, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                }
                return this.metaField;
            }
            set {
                if ((value == null)) {
                    this.metaField = null;
                }
                else {
                    if ((this.metaField == null)) {
                        this.metaField = XTypedList<meta>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<meta>(this.metaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<tuplizer> tuplizer {
            get {
                if ((this.tuplizerField == null)) {
                    this.tuplizerField = new XTypedList<tuplizer>(this, LinqToXsdTypeManager.Instance, XName.Get("tuplizer", "urn:nhibernate-mapping-2.2"));
                }
                return this.tuplizerField;
            }
            set {
                if ((value == null)) {
                    this.tuplizerField = null;
                }
                else {
                    if ((this.tuplizerField == null)) {
                        this.tuplizerField = XTypedList<tuplizer>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("tuplizer", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<tuplizer>(this.tuplizerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<synchronize> synchronize {
            get {
                if ((this.synchronizeField == null)) {
                    this.synchronizeField = new XTypedList<synchronize>(this, LinqToXsdTypeManager.Instance, XName.Get("synchronize", "urn:nhibernate-mapping-2.2"));
                }
                return this.synchronizeField;
            }
            set {
                if ((value == null)) {
                    this.synchronizeField = null;
                }
                else {
                    if ((this.synchronizeField == null)) {
                        this.synchronizeField = XTypedList<synchronize>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("synchronize", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<synchronize>(this.synchronizeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<property> property {
            get {
                if ((this.propertyField == null)) {
                    this.propertyField = new XTypedList<property>(this, LinqToXsdTypeManager.Instance, XName.Get("property", "urn:nhibernate-mapping-2.2"));
                }
                return this.propertyField;
            }
            set {
                if ((value == null)) {
                    this.propertyField = null;
                }
                else {
                    if ((this.propertyField == null)) {
                        this.propertyField = XTypedList<property>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("property", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<property>(this.propertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<manytoone> manytoone {
            get {
                if ((this.manytooneField == null)) {
                    this.manytooneField = new XTypedList<manytoone>(this, LinqToXsdTypeManager.Instance, XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"));
                }
                return this.manytooneField;
            }
            set {
                if ((value == null)) {
                    this.manytooneField = null;
                }
                else {
                    if ((this.manytooneField == null)) {
                        this.manytooneField = XTypedList<manytoone>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<manytoone>(this.manytooneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<onetoone> onetoone {
            get {
                if ((this.onetooneField == null)) {
                    this.onetooneField = new XTypedList<onetoone>(this, LinqToXsdTypeManager.Instance, XName.Get("one-to-one", "urn:nhibernate-mapping-2.2"));
                }
                return this.onetooneField;
            }
            set {
                if ((value == null)) {
                    this.onetooneField = null;
                }
                else {
                    if ((this.onetooneField == null)) {
                        this.onetooneField = XTypedList<onetoone>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("one-to-one", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<onetoone>(this.onetooneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<component> component {
            get {
                if ((this.componentField == null)) {
                    this.componentField = new XTypedList<component>(this, LinqToXsdTypeManager.Instance, XName.Get("component", "urn:nhibernate-mapping-2.2"));
                }
                return this.componentField;
            }
            set {
                if ((value == null)) {
                    this.componentField = null;
                }
                else {
                    if ((this.componentField == null)) {
                        this.componentField = XTypedList<component>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("component", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<component>(this.componentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<dynamiccomponent> dynamiccomponent {
            get {
                if ((this.dynamiccomponentField == null)) {
                    this.dynamiccomponentField = new XTypedList<dynamiccomponent>(this, LinqToXsdTypeManager.Instance, XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"));
                }
                return this.dynamiccomponentField;
            }
            set {
                if ((value == null)) {
                    this.dynamiccomponentField = null;
                }
                else {
                    if ((this.dynamiccomponentField == null)) {
                        this.dynamiccomponentField = XTypedList<dynamiccomponent>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<dynamiccomponent>(this.dynamiccomponentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<any> any {
            get {
                if ((this.anyField == null)) {
                    this.anyField = new XTypedList<any>(this, LinqToXsdTypeManager.Instance, XName.Get("any", "urn:nhibernate-mapping-2.2"));
                }
                return this.anyField;
            }
            set {
                if ((value == null)) {
                    this.anyField = null;
                }
                else {
                    if ((this.anyField == null)) {
                        this.anyField = XTypedList<any>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("any", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<any>(this.anyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<map> map {
            get {
                if ((this.mapField == null)) {
                    this.mapField = new XTypedList<map>(this, LinqToXsdTypeManager.Instance, XName.Get("map", "urn:nhibernate-mapping-2.2"));
                }
                return this.mapField;
            }
            set {
                if ((value == null)) {
                    this.mapField = null;
                }
                else {
                    if ((this.mapField == null)) {
                        this.mapField = XTypedList<map>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("map", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<map>(this.mapField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<set> set {
            get {
                if ((this.setField == null)) {
                    this.setField = new XTypedList<set>(this, LinqToXsdTypeManager.Instance, XName.Get("set", "urn:nhibernate-mapping-2.2"));
                }
                return this.setField;
            }
            set {
                if ((value == null)) {
                    this.setField = null;
                }
                else {
                    if ((this.setField == null)) {
                        this.setField = XTypedList<set>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("set", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<set>(this.setField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, XName.Get("list", "urn:nhibernate-mapping-2.2"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("list", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<bag> bag {
            get {
                if ((this.bagField == null)) {
                    this.bagField = new XTypedList<bag>(this, LinqToXsdTypeManager.Instance, XName.Get("bag", "urn:nhibernate-mapping-2.2"));
                }
                return this.bagField;
            }
            set {
                if ((value == null)) {
                    this.bagField = null;
                }
                else {
                    if ((this.bagField == null)) {
                        this.bagField = XTypedList<bag>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("bag", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<bag>(this.bagField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<idbag> idbag {
            get {
                if ((this.idbagField == null)) {
                    this.idbagField = new XTypedList<idbag>(this, LinqToXsdTypeManager.Instance, XName.Get("idbag", "urn:nhibernate-mapping-2.2"));
                }
                return this.idbagField;
            }
            set {
                if ((value == null)) {
                    this.idbagField = null;
                }
                else {
                    if ((this.idbagField == null)) {
                        this.idbagField = XTypedList<idbag>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("idbag", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<idbag>(this.idbagField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<array> array {
            get {
                if ((this.arrayField == null)) {
                    this.arrayField = new XTypedList<array>(this, LinqToXsdTypeManager.Instance, XName.Get("array", "urn:nhibernate-mapping-2.2"));
                }
                return this.arrayField;
            }
            set {
                if ((value == null)) {
                    this.arrayField = null;
                }
                else {
                    if ((this.arrayField == null)) {
                        this.arrayField = XTypedList<array>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("array", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<array>(this.arrayField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<primitivearray> primitivearray {
            get {
                if ((this.primitivearrayField == null)) {
                    this.primitivearrayField = new XTypedList<primitivearray>(this, LinqToXsdTypeManager.Instance, XName.Get("primitive-array", "urn:nhibernate-mapping-2.2"));
                }
                return this.primitivearrayField;
            }
            set {
                if ((value == null)) {
                    this.primitivearrayField = null;
                }
                else {
                    if ((this.primitivearrayField == null)) {
                        this.primitivearrayField = XTypedList<primitivearray>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("primitive-array", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<primitivearray>(this.primitivearrayField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<join> join {
            get {
                if ((this.joinField == null)) {
                    this.joinField = new XTypedList<join>(this, LinqToXsdTypeManager.Instance, XName.Get("join", "urn:nhibernate-mapping-2.2"));
                }
                return this.joinField;
            }
            set {
                if ((value == null)) {
                    this.joinField = null;
                }
                else {
                    if ((this.joinField == null)) {
                        this.joinField = XTypedList<join>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("join", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<join>(this.joinField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<subclass> subclass1 {
            get {
                if ((this.subclass1Field == null)) {
                    this.subclass1Field = new XTypedList<subclass>(this, LinqToXsdTypeManager.Instance, XName.Get("subclass", "urn:nhibernate-mapping-2.2"));
                }
                return this.subclass1Field;
            }
            set {
                if ((value == null)) {
                    this.subclass1Field = null;
                }
                else {
                    if ((this.subclass1Field == null)) {
                        this.subclass1Field = XTypedList<subclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("subclass", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<subclass>(this.subclass1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public loader loader {
            get {
                XElement x = this.GetElement(XName.Get("loader", "urn:nhibernate-mapping-2.2"));
                return ((loader)(x));
            }
            set {
                this.SetElement(XName.Get("loader", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public sqlinsert sqlinsert {
            get {
                XElement x = this.GetElement(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"));
                return ((sqlinsert)(x));
            }
            set {
                this.SetElement(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public sqlupdate sqlupdate {
            get {
                XElement x = this.GetElement(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"));
                return ((sqlupdate)(x));
            }
            set {
                this.SetElement(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public sqldelete sqldelete {
            get {
                XElement x = this.GetElement(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"));
                return ((sqldelete)(x));
            }
            set {
                this.SetElement(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<resultset> resultset {
            get {
                if ((this.resultsetField == null)) {
                    this.resultsetField = new XTypedList<resultset>(this, LinqToXsdTypeManager.Instance, XName.Get("resultset", "urn:nhibernate-mapping-2.2"));
                }
                return this.resultsetField;
            }
            set {
                if ((value == null)) {
                    this.resultsetField = null;
                }
                else {
                    if ((this.resultsetField == null)) {
                        this.resultsetField = XTypedList<resultset>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("resultset", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<resultset>(this.resultsetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<query> query {
            get {
                if ((this.queryField == null)) {
                    this.queryField = new XTypedList<query>(this, LinqToXsdTypeManager.Instance, XName.Get("query", "urn:nhibernate-mapping-2.2"));
                }
                return this.queryField;
            }
            set {
                if ((value == null)) {
                    this.queryField = null;
                }
                else {
                    if ((this.queryField == null)) {
                        this.queryField = XTypedList<query>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("query", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<query>(this.queryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, tuplizer*, synchronize*, (property | manytoone | onetoone | component | dynamiccomponent | any | map | set | list | bag | idbag | array | primitivearray)*, join*, subclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<sqlquery> sqlquery {
            get {
                if ((this.sqlqueryField == null)) {
                    this.sqlqueryField = new XTypedList<sqlquery>(this, LinqToXsdTypeManager.Instance, XName.Get("sql-query", "urn:nhibernate-mapping-2.2"));
                }
                return this.sqlqueryField;
            }
            set {
                if ((value == null)) {
                    this.sqlqueryField = null;
                }
                else {
                    if ((this.sqlqueryField == null)) {
                        this.sqlqueryField = XTypedList<sqlquery>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("sql-query", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<sqlquery>(this.sqlqueryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string entityname {
            get {
                XAttribute x = this.Attribute(XName.Get("entity-name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("entity-name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string proxy {
            get {
                XAttribute x = this.Attribute(XName.Get("proxy", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("proxy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string discriminatorvalue {
            get {
                XAttribute x = this.Attribute(XName.Get("discriminator-value", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("discriminator-value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool dynamicupdate {
            get {
                XAttribute x = this.Attribute(XName.Get("dynamic-update", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, dynamicupdateDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("dynamic-update", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool dynamicinsert {
            get {
                XAttribute x = this.Attribute(XName.Get("dynamic-insert", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, dynamicinsertDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("dynamic-insert", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool selectbeforeupdate {
            get {
                XAttribute x = this.Attribute(XName.Get("select-before-update", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, selectbeforeupdateDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("select-before-update", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string extends {
            get {
                XAttribute x = this.Attribute(XName.Get("extends", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("extends", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> lazy {
            get {
                XAttribute x = this.Attribute(XName.Get("lazy", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("lazy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> @abstract {
            get {
                XAttribute x = this.Attribute(XName.Get("abstract", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("abstract", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string persister {
            get {
                XAttribute x = this.Attribute(XName.Get("persister", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("persister", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> batchsize {
            get {
                XAttribute x = this.Attribute(XName.Get("batch-size", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("batch-size", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("subclass", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static subclass Load(string xmlFile) {
            return XTypedServices.Load<subclass>(xmlFile);
        }
        
        public static subclass Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<subclass>(xmlFile);
        }
        
        public static subclass Parse(string xml) {
            return XTypedServices.Parse<subclass>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<subclass>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(meta));
            localElementDictionary.Add(XName.Get("tuplizer", "urn:nhibernate-mapping-2.2"), typeof(tuplizer));
            localElementDictionary.Add(XName.Get("synchronize", "urn:nhibernate-mapping-2.2"), typeof(synchronize));
            localElementDictionary.Add(XName.Get("property", "urn:nhibernate-mapping-2.2"), typeof(property));
            localElementDictionary.Add(XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"), typeof(manytoone));
            localElementDictionary.Add(XName.Get("one-to-one", "urn:nhibernate-mapping-2.2"), typeof(onetoone));
            localElementDictionary.Add(XName.Get("component", "urn:nhibernate-mapping-2.2"), typeof(component));
            localElementDictionary.Add(XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"), typeof(dynamiccomponent));
            localElementDictionary.Add(XName.Get("any", "urn:nhibernate-mapping-2.2"), typeof(any));
            localElementDictionary.Add(XName.Get("map", "urn:nhibernate-mapping-2.2"), typeof(map));
            localElementDictionary.Add(XName.Get("set", "urn:nhibernate-mapping-2.2"), typeof(set));
            localElementDictionary.Add(XName.Get("list", "urn:nhibernate-mapping-2.2"), typeof(list));
            localElementDictionary.Add(XName.Get("bag", "urn:nhibernate-mapping-2.2"), typeof(bag));
            localElementDictionary.Add(XName.Get("idbag", "urn:nhibernate-mapping-2.2"), typeof(idbag));
            localElementDictionary.Add(XName.Get("array", "urn:nhibernate-mapping-2.2"), typeof(array));
            localElementDictionary.Add(XName.Get("primitive-array", "urn:nhibernate-mapping-2.2"), typeof(primitivearray));
            localElementDictionary.Add(XName.Get("join", "urn:nhibernate-mapping-2.2"), typeof(join));
            localElementDictionary.Add(XName.Get("subclass", "urn:nhibernate-mapping-2.2"), typeof(subclass));
            localElementDictionary.Add(XName.Get("loader", "urn:nhibernate-mapping-2.2"), typeof(loader));
            localElementDictionary.Add(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"), typeof(sqlinsert));
            localElementDictionary.Add(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"), typeof(sqlupdate));
            localElementDictionary.Add(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"), typeof(sqldelete));
            localElementDictionary.Add(XName.Get("resultset", "urn:nhibernate-mapping-2.2"), typeof(resultset));
            localElementDictionary.Add(XName.Get("query", "urn:nhibernate-mapping-2.2"), typeof(query));
            localElementDictionary.Add(XName.Get("sql-query", "urn:nhibernate-mapping-2.2"), typeof(sqlquery));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class subselect : XTypedElement, IXMetaData {
        
         public static explicit operator subselect(XElement xe) { return XTypedServices.ToXTypedElement<subselect>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public subselect() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("subselect", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static subselect Load(string xmlFile) {
            return XTypedServices.Load<subselect>(xmlFile);
        }
        
        public static subselect Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<subselect>(xmlFile);
        }
        
        public static subselect Parse(string xml) {
            return XTypedServices.Parse<subselect>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<subselect>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class synchronize : XTypedElement, IXMetaData {
        
         public static explicit operator synchronize(XElement xe) { return XTypedServices.ToXTypedElement<synchronize>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public synchronize() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string table {
            get {
                XAttribute x = this.Attribute(XName.Get("table", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("table", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("synchronize", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static synchronize Load(string xmlFile) {
            return XTypedServices.Load<synchronize>(xmlFile);
        }
        
        public static synchronize Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<synchronize>(xmlFile);
        }
        
        public static synchronize Parse(string xml) {
            return XTypedServices.Parse<synchronize>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<synchronize>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (meta*)
    /// </para>
    /// </summary>
    public partial class timestamp : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<meta> metaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string sourceDefaultValue = "vm";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string generatedDefaultValue = "never";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator timestamp(XElement xe) { return XTypedServices.ToXTypedElement<timestamp>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static timestamp() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("meta", "urn:nhibernate-mapping-2.2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (meta*)
        /// </para>
        /// </summary>
        public timestamp() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*)
        /// </para>
        /// </summary>
        public IList<meta> meta {
            get {
                if ((this.metaField == null)) {
                    this.metaField = new XTypedList<meta>(this, LinqToXsdTypeManager.Instance, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                }
                return this.metaField;
            }
            set {
                if ((value == null)) {
                    this.metaField = null;
                }
                else {
                    if ((this.metaField == null)) {
                        this.metaField = XTypedList<meta>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<meta>(this.metaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string column {
            get {
                XAttribute x = this.Attribute(XName.Get("column", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("column", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string access {
            get {
                XAttribute x = this.Attribute(XName.Get("access", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("access", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string unsavedvalue {
            get {
                XAttribute x = this.Attribute(XName.Get("unsaved-value", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("unsaved-value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string source {
            get {
                XAttribute x = this.Attribute(XName.Get("source", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, sourceDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("source", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string generated {
            get {
                XAttribute x = this.Attribute(XName.Get("generated", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, generatedDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("generated", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("timestamp", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static timestamp Load(string xmlFile) {
            return XTypedServices.Load<timestamp>(xmlFile);
        }
        
        public static timestamp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<timestamp>(xmlFile);
        }
        
        public static timestamp Parse(string xml) {
            return XTypedServices.Parse<timestamp>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<timestamp>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(meta));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class tuplizer : XTypedElement, IXMetaData {
        
         public static explicit operator tuplizer(XElement xe) { return XTypedServices.ToXTypedElement<tuplizer>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public tuplizer() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string entitymode {
            get {
                XAttribute x = this.Attribute(XName.Get("entity-mode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("entity-mode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string @class {
            get {
                XAttribute x = this.Attribute(XName.Get("class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("tuplizer", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static tuplizer Load(string xmlFile) {
            return XTypedServices.Load<tuplizer>(xmlFile);
        }
        
        public static tuplizer Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<tuplizer>(xmlFile);
        }
        
        public static tuplizer Parse(string xml) {
            return XTypedServices.Parse<tuplizer>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tuplizer>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (param*)
    /// </para>
    /// </summary>
    public partial class type : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<param> paramField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator type(XElement xe) { return XTypedServices.ToXTypedElement<type>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static type() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("param", "urn:nhibernate-mapping-2.2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (param*)
        /// </para>
        /// </summary>
        public type() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (param*)
        /// </para>
        /// </summary>
        public IList<param> param {
            get {
                if ((this.paramField == null)) {
                    this.paramField = new XTypedList<param>(this, LinqToXsdTypeManager.Instance, XName.Get("param", "urn:nhibernate-mapping-2.2"));
                }
                return this.paramField;
            }
            set {
                if ((value == null)) {
                    this.paramField = null;
                }
                else {
                    if ((this.paramField == null)) {
                        this.paramField = XTypedList<param>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("param", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<param>(this.paramField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("type", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static type Load(string xmlFile) {
            return XTypedServices.Load<type>(xmlFile);
        }
        
        public static type Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<type>(xmlFile);
        }
        
        public static type Parse(string xml) {
            return XTypedServices.Parse<type>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<type>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("param", "urn:nhibernate-mapping-2.2"), typeof(param));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (param*)
    /// </para>
    /// </summary>
    public partial class typedef : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<param> paramField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator typedef(XElement xe) { return XTypedServices.ToXTypedElement<typedef>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static typedef() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("param", "urn:nhibernate-mapping-2.2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (param*)
        /// </para>
        /// </summary>
        public typedef() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (param*)
        /// </para>
        /// </summary>
        public IList<param> param {
            get {
                if ((this.paramField == null)) {
                    this.paramField = new XTypedList<param>(this, LinqToXsdTypeManager.Instance, XName.Get("param", "urn:nhibernate-mapping-2.2"));
                }
                return this.paramField;
            }
            set {
                if ((value == null)) {
                    this.paramField = null;
                }
                else {
                    if ((this.paramField == null)) {
                        this.paramField = XTypedList<param>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("param", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<param>(this.paramField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string @class {
            get {
                XAttribute x = this.Attribute(XName.Get("class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("typedef", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static typedef Load(string xmlFile) {
            return XTypedServices.Load<typedef>(xmlFile);
        }
        
        public static typedef Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<typedef>(xmlFile);
        }
        
        public static typedef Parse(string xml) {
            return XTypedServices.Parse<typedef>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<typedef>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("param", "urn:nhibernate-mapping-2.2"), typeof(param));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
    /// </para>
    /// </summary>
    public partial class unionsubclass : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<meta> metaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<synchronize> synchronizeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tuplizer> tuplizerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<property> propertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<manytoone> manytooneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<onetoone> onetooneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<component> componentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dynamiccomponent> dynamiccomponentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<properties> propertiesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<any> anyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<map> mapField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<set> setField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bag> bagField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<idbag> idbagField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<array> arrayField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<primitivearray> primitivearrayField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unionsubclass> unionsubclass1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<resultset> resultsetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<query> queryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<sqlquery> sqlqueryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool dynamicupdateDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool dynamicinsertDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool selectbeforeupdateDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator unionsubclass(XElement xe) { return XTypedServices.ToXTypedElement<unionsubclass>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static unionsubclass() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public unionsubclass() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<meta> meta {
            get {
                if ((this.metaField == null)) {
                    this.metaField = new XTypedList<meta>(this, LinqToXsdTypeManager.Instance, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                }
                return this.metaField;
            }
            set {
                if ((value == null)) {
                    this.metaField = null;
                }
                else {
                    if ((this.metaField == null)) {
                        this.metaField = XTypedList<meta>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<meta>(this.metaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public subselect subselect {
            get {
                XElement x = this.GetElement(XName.Get("subselect", "urn:nhibernate-mapping-2.2"));
                return ((subselect)(x));
            }
            set {
                this.SetElement(XName.Get("subselect", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<synchronize> synchronize {
            get {
                if ((this.synchronizeField == null)) {
                    this.synchronizeField = new XTypedList<synchronize>(this, LinqToXsdTypeManager.Instance, XName.Get("synchronize", "urn:nhibernate-mapping-2.2"));
                }
                return this.synchronizeField;
            }
            set {
                if ((value == null)) {
                    this.synchronizeField = null;
                }
                else {
                    if ((this.synchronizeField == null)) {
                        this.synchronizeField = XTypedList<synchronize>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("synchronize", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<synchronize>(this.synchronizeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public comment comment {
            get {
                XElement x = this.GetElement(XName.Get("comment", "urn:nhibernate-mapping-2.2"));
                return ((comment)(x));
            }
            set {
                this.SetElement(XName.Get("comment", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<tuplizer> tuplizer {
            get {
                if ((this.tuplizerField == null)) {
                    this.tuplizerField = new XTypedList<tuplizer>(this, LinqToXsdTypeManager.Instance, XName.Get("tuplizer", "urn:nhibernate-mapping-2.2"));
                }
                return this.tuplizerField;
            }
            set {
                if ((value == null)) {
                    this.tuplizerField = null;
                }
                else {
                    if ((this.tuplizerField == null)) {
                        this.tuplizerField = XTypedList<tuplizer>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("tuplizer", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<tuplizer>(this.tuplizerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<property> property {
            get {
                if ((this.propertyField == null)) {
                    this.propertyField = new XTypedList<property>(this, LinqToXsdTypeManager.Instance, XName.Get("property", "urn:nhibernate-mapping-2.2"));
                }
                return this.propertyField;
            }
            set {
                if ((value == null)) {
                    this.propertyField = null;
                }
                else {
                    if ((this.propertyField == null)) {
                        this.propertyField = XTypedList<property>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("property", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<property>(this.propertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<manytoone> manytoone {
            get {
                if ((this.manytooneField == null)) {
                    this.manytooneField = new XTypedList<manytoone>(this, LinqToXsdTypeManager.Instance, XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"));
                }
                return this.manytooneField;
            }
            set {
                if ((value == null)) {
                    this.manytooneField = null;
                }
                else {
                    if ((this.manytooneField == null)) {
                        this.manytooneField = XTypedList<manytoone>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<manytoone>(this.manytooneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<onetoone> onetoone {
            get {
                if ((this.onetooneField == null)) {
                    this.onetooneField = new XTypedList<onetoone>(this, LinqToXsdTypeManager.Instance, XName.Get("one-to-one", "urn:nhibernate-mapping-2.2"));
                }
                return this.onetooneField;
            }
            set {
                if ((value == null)) {
                    this.onetooneField = null;
                }
                else {
                    if ((this.onetooneField == null)) {
                        this.onetooneField = XTypedList<onetoone>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("one-to-one", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<onetoone>(this.onetooneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<component> component {
            get {
                if ((this.componentField == null)) {
                    this.componentField = new XTypedList<component>(this, LinqToXsdTypeManager.Instance, XName.Get("component", "urn:nhibernate-mapping-2.2"));
                }
                return this.componentField;
            }
            set {
                if ((value == null)) {
                    this.componentField = null;
                }
                else {
                    if ((this.componentField == null)) {
                        this.componentField = XTypedList<component>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("component", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<component>(this.componentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<dynamiccomponent> dynamiccomponent {
            get {
                if ((this.dynamiccomponentField == null)) {
                    this.dynamiccomponentField = new XTypedList<dynamiccomponent>(this, LinqToXsdTypeManager.Instance, XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"));
                }
                return this.dynamiccomponentField;
            }
            set {
                if ((value == null)) {
                    this.dynamiccomponentField = null;
                }
                else {
                    if ((this.dynamiccomponentField == null)) {
                        this.dynamiccomponentField = XTypedList<dynamiccomponent>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<dynamiccomponent>(this.dynamiccomponentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<properties> properties {
            get {
                if ((this.propertiesField == null)) {
                    this.propertiesField = new XTypedList<properties>(this, LinqToXsdTypeManager.Instance, XName.Get("properties", "urn:nhibernate-mapping-2.2"));
                }
                return this.propertiesField;
            }
            set {
                if ((value == null)) {
                    this.propertiesField = null;
                }
                else {
                    if ((this.propertiesField == null)) {
                        this.propertiesField = XTypedList<properties>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("properties", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<properties>(this.propertiesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<any> any {
            get {
                if ((this.anyField == null)) {
                    this.anyField = new XTypedList<any>(this, LinqToXsdTypeManager.Instance, XName.Get("any", "urn:nhibernate-mapping-2.2"));
                }
                return this.anyField;
            }
            set {
                if ((value == null)) {
                    this.anyField = null;
                }
                else {
                    if ((this.anyField == null)) {
                        this.anyField = XTypedList<any>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("any", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<any>(this.anyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<map> map {
            get {
                if ((this.mapField == null)) {
                    this.mapField = new XTypedList<map>(this, LinqToXsdTypeManager.Instance, XName.Get("map", "urn:nhibernate-mapping-2.2"));
                }
                return this.mapField;
            }
            set {
                if ((value == null)) {
                    this.mapField = null;
                }
                else {
                    if ((this.mapField == null)) {
                        this.mapField = XTypedList<map>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("map", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<map>(this.mapField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<set> set {
            get {
                if ((this.setField == null)) {
                    this.setField = new XTypedList<set>(this, LinqToXsdTypeManager.Instance, XName.Get("set", "urn:nhibernate-mapping-2.2"));
                }
                return this.setField;
            }
            set {
                if ((value == null)) {
                    this.setField = null;
                }
                else {
                    if ((this.setField == null)) {
                        this.setField = XTypedList<set>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("set", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<set>(this.setField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, XName.Get("list", "urn:nhibernate-mapping-2.2"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("list", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<bag> bag {
            get {
                if ((this.bagField == null)) {
                    this.bagField = new XTypedList<bag>(this, LinqToXsdTypeManager.Instance, XName.Get("bag", "urn:nhibernate-mapping-2.2"));
                }
                return this.bagField;
            }
            set {
                if ((value == null)) {
                    this.bagField = null;
                }
                else {
                    if ((this.bagField == null)) {
                        this.bagField = XTypedList<bag>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("bag", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<bag>(this.bagField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<idbag> idbag {
            get {
                if ((this.idbagField == null)) {
                    this.idbagField = new XTypedList<idbag>(this, LinqToXsdTypeManager.Instance, XName.Get("idbag", "urn:nhibernate-mapping-2.2"));
                }
                return this.idbagField;
            }
            set {
                if ((value == null)) {
                    this.idbagField = null;
                }
                else {
                    if ((this.idbagField == null)) {
                        this.idbagField = XTypedList<idbag>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("idbag", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<idbag>(this.idbagField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<array> array {
            get {
                if ((this.arrayField == null)) {
                    this.arrayField = new XTypedList<array>(this, LinqToXsdTypeManager.Instance, XName.Get("array", "urn:nhibernate-mapping-2.2"));
                }
                return this.arrayField;
            }
            set {
                if ((value == null)) {
                    this.arrayField = null;
                }
                else {
                    if ((this.arrayField == null)) {
                        this.arrayField = XTypedList<array>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("array", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<array>(this.arrayField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<primitivearray> primitivearray {
            get {
                if ((this.primitivearrayField == null)) {
                    this.primitivearrayField = new XTypedList<primitivearray>(this, LinqToXsdTypeManager.Instance, XName.Get("primitive-array", "urn:nhibernate-mapping-2.2"));
                }
                return this.primitivearrayField;
            }
            set {
                if ((value == null)) {
                    this.primitivearrayField = null;
                }
                else {
                    if ((this.primitivearrayField == null)) {
                        this.primitivearrayField = XTypedList<primitivearray>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("primitive-array", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<primitivearray>(this.primitivearrayField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<unionsubclass> unionsubclass1 {
            get {
                if ((this.unionsubclass1Field == null)) {
                    this.unionsubclass1Field = new XTypedList<unionsubclass>(this, LinqToXsdTypeManager.Instance, XName.Get("union-subclass", "urn:nhibernate-mapping-2.2"));
                }
                return this.unionsubclass1Field;
            }
            set {
                if ((value == null)) {
                    this.unionsubclass1Field = null;
                }
                else {
                    if ((this.unionsubclass1Field == null)) {
                        this.unionsubclass1Field = XTypedList<unionsubclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("union-subclass", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<unionsubclass>(this.unionsubclass1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public loader loader {
            get {
                XElement x = this.GetElement(XName.Get("loader", "urn:nhibernate-mapping-2.2"));
                return ((loader)(x));
            }
            set {
                this.SetElement(XName.Get("loader", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public sqlinsert sqlinsert {
            get {
                XElement x = this.GetElement(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"));
                return ((sqlinsert)(x));
            }
            set {
                this.SetElement(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public sqlupdate sqlupdate {
            get {
                XElement x = this.GetElement(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"));
                return ((sqlupdate)(x));
            }
            set {
                this.SetElement(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public sqldelete sqldelete {
            get {
                XElement x = this.GetElement(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"));
                return ((sqldelete)(x));
            }
            set {
                this.SetElement(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<resultset> resultset {
            get {
                if ((this.resultsetField == null)) {
                    this.resultsetField = new XTypedList<resultset>(this, LinqToXsdTypeManager.Instance, XName.Get("resultset", "urn:nhibernate-mapping-2.2"));
                }
                return this.resultsetField;
            }
            set {
                if ((value == null)) {
                    this.resultsetField = null;
                }
                else {
                    if ((this.resultsetField == null)) {
                        this.resultsetField = XTypedList<resultset>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("resultset", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<resultset>(this.resultsetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<query> query {
            get {
                if ((this.queryField == null)) {
                    this.queryField = new XTypedList<query>(this, LinqToXsdTypeManager.Instance, XName.Get("query", "urn:nhibernate-mapping-2.2"));
                }
                return this.queryField;
            }
            set {
                if ((value == null)) {
                    this.queryField = null;
                }
                else {
                    if ((this.queryField == null)) {
                        this.queryField = XTypedList<query>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("query", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<query>(this.queryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (meta*, subselect?, synchronize*, comment?, tuplizer*, (property | manytoone | onetoone | component | dynamiccomponent | properties | any | map | set | list | bag | idbag | array | primitivearray)*, unionsubclass1*, loader?, sqlinsert?, sqlupdate?, sqldelete?, resultset*, (query | sqlquery)*)
        /// </para>
        /// </summary>
        public IList<sqlquery> sqlquery {
            get {
                if ((this.sqlqueryField == null)) {
                    this.sqlqueryField = new XTypedList<sqlquery>(this, LinqToXsdTypeManager.Instance, XName.Get("sql-query", "urn:nhibernate-mapping-2.2"));
                }
                return this.sqlqueryField;
            }
            set {
                if ((value == null)) {
                    this.sqlqueryField = null;
                }
                else {
                    if ((this.sqlqueryField == null)) {
                        this.sqlqueryField = XTypedList<sqlquery>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("sql-query", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<sqlquery>(this.sqlqueryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string entityname {
            get {
                XAttribute x = this.Attribute(XName.Get("entity-name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("entity-name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string proxy {
            get {
                XAttribute x = this.Attribute(XName.Get("proxy", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("proxy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string table {
            get {
                XAttribute x = this.Attribute(XName.Get("table", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("table", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string schema {
            get {
                XAttribute x = this.Attribute(XName.Get("schema", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("schema", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string catalog {
            get {
                XAttribute x = this.Attribute(XName.Get("catalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("catalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string subselect1 {
            get {
                XAttribute x = this.Attribute(XName.Get("subselect", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("subselect", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool dynamicupdate {
            get {
                XAttribute x = this.Attribute(XName.Get("dynamic-update", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, dynamicupdateDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("dynamic-update", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool dynamicinsert {
            get {
                XAttribute x = this.Attribute(XName.Get("dynamic-insert", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, dynamicinsertDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("dynamic-insert", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool selectbeforeupdate {
            get {
                XAttribute x = this.Attribute(XName.Get("select-before-update", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, selectbeforeupdateDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("select-before-update", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string extends {
            get {
                XAttribute x = this.Attribute(XName.Get("extends", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("extends", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> lazy {
            get {
                XAttribute x = this.Attribute(XName.Get("lazy", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("lazy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> @abstract {
            get {
                XAttribute x = this.Attribute(XName.Get("abstract", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("abstract", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string persister {
            get {
                XAttribute x = this.Attribute(XName.Get("persister", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("persister", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string check {
            get {
                XAttribute x = this.Attribute(XName.Get("check", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("check", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> batchsize {
            get {
                XAttribute x = this.Attribute(XName.Get("batch-size", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("batch-size", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("union-subclass", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static unionsubclass Load(string xmlFile) {
            return XTypedServices.Load<unionsubclass>(xmlFile);
        }
        
        public static unionsubclass Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<unionsubclass>(xmlFile);
        }
        
        public static unionsubclass Parse(string xml) {
            return XTypedServices.Parse<unionsubclass>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<unionsubclass>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(meta));
            localElementDictionary.Add(XName.Get("subselect", "urn:nhibernate-mapping-2.2"), typeof(subselect));
            localElementDictionary.Add(XName.Get("synchronize", "urn:nhibernate-mapping-2.2"), typeof(synchronize));
            localElementDictionary.Add(XName.Get("comment", "urn:nhibernate-mapping-2.2"), typeof(comment));
            localElementDictionary.Add(XName.Get("tuplizer", "urn:nhibernate-mapping-2.2"), typeof(tuplizer));
            localElementDictionary.Add(XName.Get("property", "urn:nhibernate-mapping-2.2"), typeof(property));
            localElementDictionary.Add(XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"), typeof(manytoone));
            localElementDictionary.Add(XName.Get("one-to-one", "urn:nhibernate-mapping-2.2"), typeof(onetoone));
            localElementDictionary.Add(XName.Get("component", "urn:nhibernate-mapping-2.2"), typeof(component));
            localElementDictionary.Add(XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"), typeof(dynamiccomponent));
            localElementDictionary.Add(XName.Get("properties", "urn:nhibernate-mapping-2.2"), typeof(properties));
            localElementDictionary.Add(XName.Get("any", "urn:nhibernate-mapping-2.2"), typeof(any));
            localElementDictionary.Add(XName.Get("map", "urn:nhibernate-mapping-2.2"), typeof(map));
            localElementDictionary.Add(XName.Get("set", "urn:nhibernate-mapping-2.2"), typeof(set));
            localElementDictionary.Add(XName.Get("list", "urn:nhibernate-mapping-2.2"), typeof(list));
            localElementDictionary.Add(XName.Get("bag", "urn:nhibernate-mapping-2.2"), typeof(bag));
            localElementDictionary.Add(XName.Get("idbag", "urn:nhibernate-mapping-2.2"), typeof(idbag));
            localElementDictionary.Add(XName.Get("array", "urn:nhibernate-mapping-2.2"), typeof(array));
            localElementDictionary.Add(XName.Get("primitive-array", "urn:nhibernate-mapping-2.2"), typeof(primitivearray));
            localElementDictionary.Add(XName.Get("union-subclass", "urn:nhibernate-mapping-2.2"), typeof(unionsubclass));
            localElementDictionary.Add(XName.Get("loader", "urn:nhibernate-mapping-2.2"), typeof(loader));
            localElementDictionary.Add(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"), typeof(sqlinsert));
            localElementDictionary.Add(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"), typeof(sqlupdate));
            localElementDictionary.Add(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"), typeof(sqldelete));
            localElementDictionary.Add(XName.Get("resultset", "urn:nhibernate-mapping-2.2"), typeof(resultset));
            localElementDictionary.Add(XName.Get("query", "urn:nhibernate-mapping-2.2"), typeof(query));
            localElementDictionary.Add(XName.Get("sql-query", "urn:nhibernate-mapping-2.2"), typeof(sqlquery));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (meta*, column*)
    /// </para>
    /// </summary>
    public partial class version : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<meta> metaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<column> columnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeDefaultValue = "Int32";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string generatedDefaultValue = "never";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator version(XElement xe) { return XTypedServices.ToXTypedElement<version>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static version() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("meta", "urn:nhibernate-mapping-2.2")), new NamedContentModelEntity(XName.Get("column", "urn:nhibernate-mapping-2.2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (meta*, column*)
        /// </para>
        /// </summary>
        public version() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, column*)
        /// </para>
        /// </summary>
        public IList<meta> meta {
            get {
                if ((this.metaField == null)) {
                    this.metaField = new XTypedList<meta>(this, LinqToXsdTypeManager.Instance, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                }
                return this.metaField;
            }
            set {
                if ((value == null)) {
                    this.metaField = null;
                }
                else {
                    if ((this.metaField == null)) {
                        this.metaField = XTypedList<meta>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("meta", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<meta>(this.metaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (meta*, column*)
        /// </para>
        /// </summary>
        public IList<column> column {
            get {
                if ((this.columnField == null)) {
                    this.columnField = new XTypedList<column>(this, LinqToXsdTypeManager.Instance, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                }
                return this.columnField;
            }
            set {
                if ((value == null)) {
                    this.columnField = null;
                }
                else {
                    if ((this.columnField == null)) {
                        this.columnField = XTypedList<column>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("column", "urn:nhibernate-mapping-2.2"));
                    }
                    else {
                        XTypedServices.SetList<column>(this.columnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string node {
            get {
                XAttribute x = this.Attribute(XName.Get("node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string access {
            get {
                XAttribute x = this.Attribute(XName.Get("access", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("access", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string column1 {
            get {
                XAttribute x = this.Attribute(XName.Get("column", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("column", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string type {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, typeDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// undefined|any|none|null|0|-1|... 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string unsavedvalue {
            get {
                XAttribute x = this.Attribute(XName.Get("unsaved-value", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("unsaved-value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string generated {
            get {
                XAttribute x = this.Attribute(XName.Get("generated", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, generatedDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("generated", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> insert {
            get {
                XAttribute x = this.Attribute(XName.Get("insert", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("insert", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("version", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static version Load(string xmlFile) {
            return XTypedServices.Load<version>(xmlFile);
        }
        
        public static version Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<version>(xmlFile);
        }
        
        public static version Parse(string xml) {
            return XTypedServices.Parse<version>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<version>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(meta));
            localElementDictionary.Add(XName.Get("column", "urn:nhibernate-mapping-2.2"), typeof(column));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class outerJoinStrategy {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "auto",
                        "true",
                        "false"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private outerJoinStrategy() {
        }
    }
    
    public sealed class collectionFetchMode {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "select",
                        "join",
                        "subselect"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private collectionFetchMode() {
        }
    }
    
    public sealed class collectionLazy {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "true",
                        "false",
                        "extra"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private collectionLazy() {
        }
    }
    
    public sealed class optimisticLockMode {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "none",
                        "version",
                        "dirty",
                        "all"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private optimisticLockMode() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Types of polymorphism
    /// </para>
    /// </summary>
    public sealed class polymorphismType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "implicit",
                        "explicit"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private polymorphismType() {
        }
    }
    
    public sealed class unsavedValueType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "undefined",
                        "any",
                        "none"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private unsavedValueType() {
        }
    }
    
    public sealed class ondelete {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "cascade",
                        "noaction"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ondelete() {
        }
    }
    
    public sealed class restrictedLaziness {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "false",
                        "proxy"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private restrictedLaziness() {
        }
    }
    
    public sealed class lockMode {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "none",
                        "read",
                        "upgrade",
                        "upgrade-nowait",
                        "write"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private lockMode() {
        }
    }
    
    public sealed class notFoundMode {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ignore",
                        "exception"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private notFoundMode() {
        }
    }
    
    public sealed class fetchMode {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "select",
                        "join"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private fetchMode() {
        }
    }
    
    public sealed class laziness {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "false",
                        "proxy",
                        "no-proxy"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private laziness() {
        }
    }
    
    public sealed class propertyGeneration {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "never",
                        "insert",
                        "always"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private propertyGeneration() {
        }
    }
    
    public sealed class flushMode {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "auto",
                        "never",
                        "always"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private flushMode() {
        }
    }
    
    public sealed class cacheMode {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "get",
                        "ignore",
                        "normal",
                        "put",
                        "refresh"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private cacheMode() {
        }
    }
    
    public sealed class customSQLCheck {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "none",
                        "rowcount",
                        "param"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private customSQLCheck() {
        }
    }
    
    public partial class customSQL : XTypedElement, IXMetaData {
        
         public static explicit operator customSQL(XElement xe) { return XTypedServices.ToXTypedElement<customSQL>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public customSQL() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> callable {
            get {
                XAttribute x = this.Attribute(XName.Get("callable", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("callable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string check {
            get {
                XAttribute x = this.Attribute(XName.Get("check", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("check", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("customSQL", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<customSQL>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class versionGeneration {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "never",
                        "always"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private versionGeneration() {
        }
    }
    
    public partial class sqldelete : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private customSQL ContentField;
        
         public static explicit operator sqldelete(XElement xe) { return XTypedServices.ToXTypedElement<sqldelete, customSQL>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public sqldelete() {
            SetInnerType(new customSQL());
        }
        
        public sqldelete(customSQL content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public customSQL Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> callable {
            get {
                return this.ContentField.callable;
            }
            set {
                this.ContentField.callable = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string check {
            get {
                return this.ContentField.check;
            }
            set {
                this.ContentField.check = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("sql-delete", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static sqldelete Load(string xmlFile) {
            return XTypedServices.Load<sqldelete, customSQL>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static sqldelete Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<sqldelete, customSQL>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static sqldelete Parse(string xml) {
            return XTypedServices.Parse<sqldelete, customSQL>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new sqldelete(((customSQL)(this.Content.Clone())));
        }
        
        private void SetInnerType(customSQL ContentField) {
            this.ContentField = ((customSQL)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class sqldeleteall : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private customSQL ContentField;
        
         public static explicit operator sqldeleteall(XElement xe) { return XTypedServices.ToXTypedElement<sqldeleteall, customSQL>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public sqldeleteall() {
            SetInnerType(new customSQL());
        }
        
        public sqldeleteall(customSQL content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public customSQL Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> callable {
            get {
                return this.ContentField.callable;
            }
            set {
                this.ContentField.callable = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string check {
            get {
                return this.ContentField.check;
            }
            set {
                this.ContentField.check = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("sql-delete-all", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static sqldeleteall Load(string xmlFile) {
            return XTypedServices.Load<sqldeleteall, customSQL>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static sqldeleteall Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<sqldeleteall, customSQL>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static sqldeleteall Parse(string xml) {
            return XTypedServices.Parse<sqldeleteall, customSQL>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new sqldeleteall(((customSQL)(this.Content.Clone())));
        }
        
        private void SetInnerType(customSQL ContentField) {
            this.ContentField = ((customSQL)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class sqlinsert : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private customSQL ContentField;
        
         public static explicit operator sqlinsert(XElement xe) { return XTypedServices.ToXTypedElement<sqlinsert, customSQL>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public sqlinsert() {
            SetInnerType(new customSQL());
        }
        
        public sqlinsert(customSQL content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public customSQL Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> callable {
            get {
                return this.ContentField.callable;
            }
            set {
                this.ContentField.callable = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string check {
            get {
                return this.ContentField.check;
            }
            set {
                this.ContentField.check = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("sql-insert", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static sqlinsert Load(string xmlFile) {
            return XTypedServices.Load<sqlinsert, customSQL>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static sqlinsert Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<sqlinsert, customSQL>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static sqlinsert Parse(string xml) {
            return XTypedServices.Parse<sqlinsert, customSQL>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new sqlinsert(((customSQL)(this.Content.Clone())));
        }
        
        private void SetInnerType(customSQL ContentField) {
            this.ContentField = ((customSQL)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class sqlupdate : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private customSQL ContentField;
        
         public static explicit operator sqlupdate(XElement xe) { return XTypedServices.ToXTypedElement<sqlupdate, customSQL>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public sqlupdate() {
            SetInnerType(new customSQL());
        }
        
        public sqlupdate(customSQL content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public customSQL Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> callable {
            get {
                return this.ContentField.callable;
            }
            set {
                this.ContentField.callable = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string check {
            get {
                return this.ContentField.check;
            }
            set {
                this.ContentField.check = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("sql-update", "urn:nhibernate-mapping-2.2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static sqlupdate Load(string xmlFile) {
            return XTypedServices.Load<sqlupdate, customSQL>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static sqlupdate Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<sqlupdate, customSQL>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static sqlupdate Parse(string xml) {
            return XTypedServices.Parse<sqlupdate, customSQL>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new sqlupdate(((customSQL)(this.Content.Clone())));
        }
        
        private void SetInnerType(customSQL ContentField) {
            this.ContentField = ((customSQL)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        static Dictionary<XName, System.Type> typeDictionary = new Dictionary<XName, System.Type>();
        
        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
        
        static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(XName.Get("customSQL", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.customSQL));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(XName.Get("any", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.any));
            elementDictionary.Add(XName.Get("array", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.array));
            elementDictionary.Add(XName.Get("bag", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.bag));
            elementDictionary.Add(XName.Get("cache", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.cache));
            elementDictionary.Add(XName.Get("class", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.@class));
            elementDictionary.Add(XName.Get("collection-id", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.collectionid));
            elementDictionary.Add(XName.Get("column", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.column));
            elementDictionary.Add(XName.Get("comment", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.comment));
            elementDictionary.Add(XName.Get("component", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.component));
            elementDictionary.Add(XName.Get("composite-element", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.compositeelement));
            elementDictionary.Add(XName.Get("composite-id", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.compositeid));
            elementDictionary.Add(XName.Get("composite-index", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.compositeindex));
            elementDictionary.Add(XName.Get("composite-map-key", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.compositemapkey));
            elementDictionary.Add(XName.Get("create", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.create));
            elementDictionary.Add(XName.Get("database-object", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.databaseobject));
            elementDictionary.Add(XName.Get("definition", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.definition));
            elementDictionary.Add(XName.Get("dialect-scope", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.dialectscope));
            elementDictionary.Add(XName.Get("discriminator", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.discriminator));
            elementDictionary.Add(XName.Get("drop", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.drop));
            elementDictionary.Add(XName.Get("dynamic-component", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.dynamiccomponent));
            elementDictionary.Add(XName.Get("element", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.element));
            elementDictionary.Add(XName.Get("filter", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.filter));
            elementDictionary.Add(XName.Get("filter-def", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.filterdef));
            elementDictionary.Add(XName.Get("filter-param", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.filterparam));
            elementDictionary.Add(XName.Get("formula", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.formula));
            elementDictionary.Add(XName.Get("generator", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.generator));
            elementDictionary.Add(XName.Get("hibernate-mapping", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.hibernatemapping));
            elementDictionary.Add(XName.Get("id", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.id));
            elementDictionary.Add(XName.Get("idbag", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.idbag));
            elementDictionary.Add(XName.Get("import", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.import));
            elementDictionary.Add(XName.Get("index", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.index));
            elementDictionary.Add(XName.Get("index-many-to-any", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.indexmanytoany));
            elementDictionary.Add(XName.Get("index-many-to-many", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.indexmanytomany));
            elementDictionary.Add(XName.Get("join", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.join));
            elementDictionary.Add(XName.Get("joined-subclass", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.joinedsubclass));
            elementDictionary.Add(XName.Get("key", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.key));
            elementDictionary.Add(XName.Get("key-many-to-one", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.keymanytoone));
            elementDictionary.Add(XName.Get("key-property", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.keyproperty));
            elementDictionary.Add(XName.Get("list", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.list));
            elementDictionary.Add(XName.Get("list-index", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.listindex));
            elementDictionary.Add(XName.Get("load-collection", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.loadcollection));
            elementDictionary.Add(XName.Get("loader", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.loader));
            elementDictionary.Add(XName.Get("many-to-any", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.manytoany));
            elementDictionary.Add(XName.Get("many-to-many", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.manytomany));
            elementDictionary.Add(XName.Get("many-to-one", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.manytoone));
            elementDictionary.Add(XName.Get("map", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.map));
            elementDictionary.Add(XName.Get("map-key", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.mapkey));
            elementDictionary.Add(XName.Get("map-key-many-to-many", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.mapkeymanytomany));
            elementDictionary.Add(XName.Get("meta", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.meta));
            elementDictionary.Add(XName.Get("meta-value", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.metavalue));
            elementDictionary.Add(XName.Get("natural-id", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.naturalid));
            elementDictionary.Add(XName.Get("nested-composite-element", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.nestedcompositeelement));
            elementDictionary.Add(XName.Get("one-to-many", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.onetomany));
            elementDictionary.Add(XName.Get("one-to-one", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.onetoone));
            elementDictionary.Add(XName.Get("param", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.param));
            elementDictionary.Add(XName.Get("parent", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.parent));
            elementDictionary.Add(XName.Get("primitive-array", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.primitivearray));
            elementDictionary.Add(XName.Get("properties", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.properties));
            elementDictionary.Add(XName.Get("property", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.property));
            elementDictionary.Add(XName.Get("query", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.query));
            elementDictionary.Add(XName.Get("query-param", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.queryparam));
            elementDictionary.Add(XName.Get("resultset", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.resultset));
            elementDictionary.Add(XName.Get("return", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.@return));
            elementDictionary.Add(XName.Get("return-column", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.returncolumn));
            elementDictionary.Add(XName.Get("return-discriminator", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.returndiscriminator));
            elementDictionary.Add(XName.Get("return-join", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.returnjoin));
            elementDictionary.Add(XName.Get("return-property", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.returnproperty));
            elementDictionary.Add(XName.Get("return-scalar", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.returnscalar));
            elementDictionary.Add(XName.Get("set", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.set));
            elementDictionary.Add(XName.Get("sql-query", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.sqlquery));
            elementDictionary.Add(XName.Get("subclass", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.subclass));
            elementDictionary.Add(XName.Get("subselect", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.subselect));
            elementDictionary.Add(XName.Get("synchronize", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.synchronize));
            elementDictionary.Add(XName.Get("timestamp", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.timestamp));
            elementDictionary.Add(XName.Get("tuplizer", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.tuplizer));
            elementDictionary.Add(XName.Get("type", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.type));
            elementDictionary.Add(XName.Get("typedef", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.typedef));
            elementDictionary.Add(XName.Get("union-subclass", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.unionsubclass));
            elementDictionary.Add(XName.Get("version", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.version));
            elementDictionary.Add(XName.Get("sql-delete", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.sqldelete));
            elementDictionary.Add(XName.Get("sql-delete-all", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.sqldeleteall));
            elementDictionary.Add(XName.Get("sql-insert", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.sqlinsert));
            elementDictionary.Add(XName.Get("sql-update", "urn:nhibernate-mapping-2.2"), typeof(global::urn.nhibernate.mapping.Item2.Item2.sqlupdate));
        }
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(urn.nhibernate.mapping.Item2.Item2.sqldelete), typeof(global::urn.nhibernate.mapping.Item2.Item2.customSQL));
            wrapperDictionary.Add(typeof(urn.nhibernate.mapping.Item2.Item2.sqldeleteall), typeof(global::urn.nhibernate.mapping.Item2.Item2.customSQL));
            wrapperDictionary.Add(typeof(urn.nhibernate.mapping.Item2.Item2.sqlinsert), typeof(global::urn.nhibernate.mapping.Item2.Item2.customSQL));
            wrapperDictionary.Add(typeof(urn.nhibernate.mapping.Item2.Item2.sqlupdate), typeof(global::urn.nhibernate.mapping.Item2.Item2.customSQL));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[XName.Get("any", "urn:nhibernate-mapping-2.2")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public any any {  get {return rootObject as any; } }

    public array array {  get {return rootObject as array; } }

    public bag bag {  get {return rootObject as bag; } }

    public cache cache {  get {return rootObject as cache; } }

    public @class @class {  get {return rootObject as @class; } }

    public collectionid collectionid {  get {return rootObject as collectionid; } }

    public column column {  get {return rootObject as column; } }

    public comment comment {  get {return rootObject as comment; } }

    public component component {  get {return rootObject as component; } }

    public compositeelement compositeelement {  get {return rootObject as compositeelement; } }

    public compositeid compositeid {  get {return rootObject as compositeid; } }

    public compositeindex compositeindex {  get {return rootObject as compositeindex; } }

    public compositemapkey compositemapkey {  get {return rootObject as compositemapkey; } }

    public create create {  get {return rootObject as create; } }

    public databaseobject databaseobject {  get {return rootObject as databaseobject; } }

    public definition definition {  get {return rootObject as definition; } }

    public dialectscope dialectscope {  get {return rootObject as dialectscope; } }

    public discriminator discriminator {  get {return rootObject as discriminator; } }

    public drop drop {  get {return rootObject as drop; } }

    public dynamiccomponent dynamiccomponent {  get {return rootObject as dynamiccomponent; } }

    public element element {  get {return rootObject as element; } }

    public filter filter {  get {return rootObject as filter; } }

    public filterdef filterdef {  get {return rootObject as filterdef; } }

    public filterparam filterparam {  get {return rootObject as filterparam; } }

    public formula formula {  get {return rootObject as formula; } }

    public generator generator {  get {return rootObject as generator; } }

    public hibernatemapping hibernatemapping {  get {return rootObject as hibernatemapping; } }

    public id id {  get {return rootObject as id; } }

    public idbag idbag {  get {return rootObject as idbag; } }

    public import import {  get {return rootObject as import; } }

    public index index {  get {return rootObject as index; } }

    public indexmanytoany indexmanytoany {  get {return rootObject as indexmanytoany; } }

    public indexmanytomany indexmanytomany {  get {return rootObject as indexmanytomany; } }

    public join join {  get {return rootObject as join; } }

    public joinedsubclass joinedsubclass {  get {return rootObject as joinedsubclass; } }

    public key key {  get {return rootObject as key; } }

    public keymanytoone keymanytoone {  get {return rootObject as keymanytoone; } }

    public keyproperty keyproperty {  get {return rootObject as keyproperty; } }

    public list list {  get {return rootObject as list; } }

    public listindex listindex {  get {return rootObject as listindex; } }

    public loadcollection loadcollection {  get {return rootObject as loadcollection; } }

    public loader loader {  get {return rootObject as loader; } }

    public manytoany manytoany {  get {return rootObject as manytoany; } }

    public manytomany manytomany {  get {return rootObject as manytomany; } }

    public manytoone manytoone {  get {return rootObject as manytoone; } }

    public map map {  get {return rootObject as map; } }

    public mapkey mapkey {  get {return rootObject as mapkey; } }

    public mapkeymanytomany mapkeymanytomany {  get {return rootObject as mapkeymanytomany; } }

    public meta meta {  get {return rootObject as meta; } }

    public metavalue metavalue {  get {return rootObject as metavalue; } }

    public naturalid naturalid {  get {return rootObject as naturalid; } }

    public nestedcompositeelement nestedcompositeelement {  get {return rootObject as nestedcompositeelement; } }

    public onetomany onetomany {  get {return rootObject as onetomany; } }

    public onetoone onetoone {  get {return rootObject as onetoone; } }

    public param param {  get {return rootObject as param; } }

    public parent parent {  get {return rootObject as parent; } }

    public primitivearray primitivearray {  get {return rootObject as primitivearray; } }

    public properties properties {  get {return rootObject as properties; } }

    public property property {  get {return rootObject as property; } }

    public query query {  get {return rootObject as query; } }

    public queryparam queryparam {  get {return rootObject as queryparam; } }

    public resultset resultset {  get {return rootObject as resultset; } }

    public @return @return {  get {return rootObject as @return; } }

    public returncolumn returncolumn {  get {return rootObject as returncolumn; } }

    public returndiscriminator returndiscriminator {  get {return rootObject as returndiscriminator; } }

    public returnjoin returnjoin {  get {return rootObject as returnjoin; } }

    public returnproperty returnproperty {  get {return rootObject as returnproperty; } }

    public returnscalar returnscalar {  get {return rootObject as returnscalar; } }

    public set set {  get {return rootObject as set; } }

    public sqlquery sqlquery {  get {return rootObject as sqlquery; } }

    public subclass subclass {  get {return rootObject as subclass; } }

    public subselect subselect {  get {return rootObject as subselect; } }

    public synchronize synchronize {  get {return rootObject as synchronize; } }

    public timestamp timestamp {  get {return rootObject as timestamp; } }

    public tuplizer tuplizer {  get {return rootObject as tuplizer; } }

    public type type {  get {return rootObject as type; } }

    public typedef typedef {  get {return rootObject as typedef; } }

    public unionsubclass unionsubclass {  get {return rootObject as unionsubclass; } }

    public version version {  get {return rootObject as version; } }

    public sqldelete sqldelete {  get {return rootObject as sqldelete; } }

    public sqldeleteall sqldeleteall {  get {return rootObject as sqldeleteall; } }

    public sqlinsert sqlinsert {  get {return rootObject as sqlinsert; } }

    public sqlupdate sqlupdate {  get {return rootObject as sqlupdate; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(any root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(array root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(bag root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(cache root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(@class root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(collectionid root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(column root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(comment root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(component root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(compositeelement root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(compositeid root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(compositeindex root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(compositemapkey root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(create root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(databaseobject root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(definition root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(dialectscope root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(discriminator root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(drop root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(dynamiccomponent root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(element root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(filter root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(filterdef root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(filterparam root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(formula root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(generator root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(hibernatemapping root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(id root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(idbag root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(import root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(index root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(indexmanytoany root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(indexmanytomany root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(join root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(joinedsubclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(key root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(keymanytoone root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(keyproperty root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(list root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(listindex root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(loadcollection root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(loader root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(manytoany root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(manytomany root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(manytoone root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(map root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(mapkey root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(mapkeymanytomany root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(meta root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(metavalue root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(naturalid root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(nestedcompositeelement root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(onetomany root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(onetoone root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(param root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(parent root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(primitivearray root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(properties root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(property root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(query root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(queryparam root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(resultset root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(@return root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(returncolumn root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(returndiscriminator root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(returnjoin root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(returnproperty root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(returnscalar root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(set root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(sqlquery root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(subclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(subselect root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(synchronize root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(timestamp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(tuplizer root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(type root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(typedef root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(unionsubclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(version root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(sqldelete root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(sqldeleteall root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(sqlinsert root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(sqlupdate root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public global::urn.nhibernate.mapping.Item2.Item2.any any {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.any; } }

    public global::urn.nhibernate.mapping.Item2.Item2.array array {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.array; } }

    public global::urn.nhibernate.mapping.Item2.Item2.bag bag {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.bag; } }

    public global::urn.nhibernate.mapping.Item2.Item2.cache cache {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.cache; } }

    public global::urn.nhibernate.mapping.Item2.Item2.@class @class {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.@class; } }

    public global::urn.nhibernate.mapping.Item2.Item2.collectionid collectionid {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.collectionid; } }

    public global::urn.nhibernate.mapping.Item2.Item2.column column {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.column; } }

    public global::urn.nhibernate.mapping.Item2.Item2.comment comment {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.comment; } }

    public global::urn.nhibernate.mapping.Item2.Item2.component component {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.component; } }

    public global::urn.nhibernate.mapping.Item2.Item2.compositeelement compositeelement {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.compositeelement; } }

    public global::urn.nhibernate.mapping.Item2.Item2.compositeid compositeid {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.compositeid; } }

    public global::urn.nhibernate.mapping.Item2.Item2.compositeindex compositeindex {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.compositeindex; } }

    public global::urn.nhibernate.mapping.Item2.Item2.compositemapkey compositemapkey {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.compositemapkey; } }

    public global::urn.nhibernate.mapping.Item2.Item2.create create {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.create; } }

    public global::urn.nhibernate.mapping.Item2.Item2.databaseobject databaseobject {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.databaseobject; } }

    public global::urn.nhibernate.mapping.Item2.Item2.definition definition {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.definition; } }

    public global::urn.nhibernate.mapping.Item2.Item2.dialectscope dialectscope {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.dialectscope; } }

    public global::urn.nhibernate.mapping.Item2.Item2.discriminator discriminator {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.discriminator; } }

    public global::urn.nhibernate.mapping.Item2.Item2.drop drop {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.drop; } }

    public global::urn.nhibernate.mapping.Item2.Item2.dynamiccomponent dynamiccomponent {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.dynamiccomponent; } }

    public global::urn.nhibernate.mapping.Item2.Item2.element element {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.element; } }

    public global::urn.nhibernate.mapping.Item2.Item2.filter filter {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.filter; } }

    public global::urn.nhibernate.mapping.Item2.Item2.filterdef filterdef {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.filterdef; } }

    public global::urn.nhibernate.mapping.Item2.Item2.filterparam filterparam {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.filterparam; } }

    public global::urn.nhibernate.mapping.Item2.Item2.formula formula {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.formula; } }

    public global::urn.nhibernate.mapping.Item2.Item2.generator generator {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.generator; } }

    public global::urn.nhibernate.mapping.Item2.Item2.hibernatemapping hibernatemapping {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.hibernatemapping; } }

    public global::urn.nhibernate.mapping.Item2.Item2.id id {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.id; } }

    public global::urn.nhibernate.mapping.Item2.Item2.idbag idbag {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.idbag; } }

    public global::urn.nhibernate.mapping.Item2.Item2.import import {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.import; } }

    public global::urn.nhibernate.mapping.Item2.Item2.index index {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.index; } }

    public global::urn.nhibernate.mapping.Item2.Item2.indexmanytoany indexmanytoany {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.indexmanytoany; } }

    public global::urn.nhibernate.mapping.Item2.Item2.indexmanytomany indexmanytomany {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.indexmanytomany; } }

    public global::urn.nhibernate.mapping.Item2.Item2.join join {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.join; } }

    public global::urn.nhibernate.mapping.Item2.Item2.joinedsubclass joinedsubclass {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.joinedsubclass; } }

    public global::urn.nhibernate.mapping.Item2.Item2.key key {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.key; } }

    public global::urn.nhibernate.mapping.Item2.Item2.keymanytoone keymanytoone {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.keymanytoone; } }

    public global::urn.nhibernate.mapping.Item2.Item2.keyproperty keyproperty {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.keyproperty; } }

    public global::urn.nhibernate.mapping.Item2.Item2.list list {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.list; } }

    public global::urn.nhibernate.mapping.Item2.Item2.listindex listindex {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.listindex; } }

    public global::urn.nhibernate.mapping.Item2.Item2.loadcollection loadcollection {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.loadcollection; } }

    public global::urn.nhibernate.mapping.Item2.Item2.loader loader {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.loader; } }

    public global::urn.nhibernate.mapping.Item2.Item2.manytoany manytoany {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.manytoany; } }

    public global::urn.nhibernate.mapping.Item2.Item2.manytomany manytomany {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.manytomany; } }

    public global::urn.nhibernate.mapping.Item2.Item2.manytoone manytoone {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.manytoone; } }

    public global::urn.nhibernate.mapping.Item2.Item2.map map {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.map; } }

    public global::urn.nhibernate.mapping.Item2.Item2.mapkey mapkey {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.mapkey; } }

    public global::urn.nhibernate.mapping.Item2.Item2.mapkeymanytomany mapkeymanytomany {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.mapkeymanytomany; } }

    public global::urn.nhibernate.mapping.Item2.Item2.meta meta {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.meta; } }

    public global::urn.nhibernate.mapping.Item2.Item2.metavalue metavalue {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.metavalue; } }

    public global::urn.nhibernate.mapping.Item2.Item2.naturalid naturalid {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.naturalid; } }

    public global::urn.nhibernate.mapping.Item2.Item2.nestedcompositeelement nestedcompositeelement {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.nestedcompositeelement; } }

    public global::urn.nhibernate.mapping.Item2.Item2.onetomany onetomany {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.onetomany; } }

    public global::urn.nhibernate.mapping.Item2.Item2.onetoone onetoone {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.onetoone; } }

    public global::urn.nhibernate.mapping.Item2.Item2.param param {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.param; } }

    public global::urn.nhibernate.mapping.Item2.Item2.parent parent {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.parent; } }

    public global::urn.nhibernate.mapping.Item2.Item2.primitivearray primitivearray {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.primitivearray; } }

    public global::urn.nhibernate.mapping.Item2.Item2.properties properties {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.properties; } }

    public global::urn.nhibernate.mapping.Item2.Item2.property property {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.property; } }

    public global::urn.nhibernate.mapping.Item2.Item2.query query {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.query; } }

    public global::urn.nhibernate.mapping.Item2.Item2.queryparam queryparam {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.queryparam; } }

    public global::urn.nhibernate.mapping.Item2.Item2.resultset resultset {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.resultset; } }

    public global::urn.nhibernate.mapping.Item2.Item2.@return @return {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.@return; } }

    public global::urn.nhibernate.mapping.Item2.Item2.returncolumn returncolumn {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.returncolumn; } }

    public global::urn.nhibernate.mapping.Item2.Item2.returndiscriminator returndiscriminator {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.returndiscriminator; } }

    public global::urn.nhibernate.mapping.Item2.Item2.returnjoin returnjoin {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.returnjoin; } }

    public global::urn.nhibernate.mapping.Item2.Item2.returnproperty returnproperty {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.returnproperty; } }

    public global::urn.nhibernate.mapping.Item2.Item2.returnscalar returnscalar {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.returnscalar; } }

    public global::urn.nhibernate.mapping.Item2.Item2.set set {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.set; } }

    public global::urn.nhibernate.mapping.Item2.Item2.sqlquery sqlquery {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.sqlquery; } }

    public global::urn.nhibernate.mapping.Item2.Item2.subclass subclass {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.subclass; } }

    public global::urn.nhibernate.mapping.Item2.Item2.subselect subselect {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.subselect; } }

    public global::urn.nhibernate.mapping.Item2.Item2.synchronize synchronize {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.synchronize; } }

    public global::urn.nhibernate.mapping.Item2.Item2.timestamp timestamp {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.timestamp; } }

    public global::urn.nhibernate.mapping.Item2.Item2.tuplizer tuplizer {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.tuplizer; } }

    public global::urn.nhibernate.mapping.Item2.Item2.type type {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.type; } }

    public global::urn.nhibernate.mapping.Item2.Item2.typedef typedef {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.typedef; } }

    public global::urn.nhibernate.mapping.Item2.Item2.unionsubclass unionsubclass {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.unionsubclass; } }

    public global::urn.nhibernate.mapping.Item2.Item2.version version {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.version; } }

    public global::urn.nhibernate.mapping.Item2.Item2.sqldelete sqldelete {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.sqldelete; } }

    public global::urn.nhibernate.mapping.Item2.Item2.sqldeleteall sqldeleteall {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.sqldeleteall; } }

    public global::urn.nhibernate.mapping.Item2.Item2.sqlinsert sqlinsert {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.sqlinsert; } }

    public global::urn.nhibernate.mapping.Item2.Item2.sqlupdate sqlupdate {  get {return rootObject as global::urn.nhibernate.mapping.Item2.Item2.sqlupdate; } }
        
        private XRoot() {
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.any root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.array root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.bag root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.cache root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.@class root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.collectionid root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.column root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.comment root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.component root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.compositeelement root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.compositeid root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.compositeindex root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.compositemapkey root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.create root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.databaseobject root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.definition root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.dialectscope root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.discriminator root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.drop root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.dynamiccomponent root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.element root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.filter root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.filterdef root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.filterparam root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.formula root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.generator root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.hibernatemapping root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.id root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.idbag root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.import root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.index root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.indexmanytoany root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.indexmanytomany root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.join root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.joinedsubclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.key root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.keymanytoone root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.keyproperty root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.list root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.listindex root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.loadcollection root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.loader root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.manytoany root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.manytomany root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.manytoone root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.map root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.mapkey root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.mapkeymanytomany root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.meta root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.metavalue root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.naturalid root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.nestedcompositeelement root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.onetomany root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.onetoone root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.param root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.parent root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.primitivearray root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.properties root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.property root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.query root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.queryparam root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.resultset root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.@return root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.returncolumn root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.returndiscriminator root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.returnjoin root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.returnproperty root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.returnscalar root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.set root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.sqlquery root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.subclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.subselect root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.synchronize root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.timestamp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.tuplizer root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.type root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.typedef root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.unionsubclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.version root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.sqldelete root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.sqldeleteall root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.sqlinsert root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::urn.nhibernate.mapping.Item2.Item2.sqlupdate root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
